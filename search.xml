<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[2022 新年计划]]></title>
      <url>http://tech.noexception.cn/2022/01/17/2022-new-page/</url>
      <content type="html"><![CDATA[<p><em>参不尽天下之理</em></p>
<a id="more"></a>
<h2 id="2022-年需要完成的技术体系"><a class="markdownIt-Anchor" href="#2022-年需要完成的技术体系"></a> 2022 年需要完成的技术体系：</h2>
<ol>
<li>Netty 网络框架及项目实践；</li>
<li>系统二级缓存框架；</li>
<li>Idea 插件开发；</li>
</ol>
<h2 id="计划提升的技能点"><a class="markdownIt-Anchor" href="#计划提升的技能点"></a> 计划提升的技能点：</h2>
<ol>
<li>深入理解及实践设计模式和设计原则；</li>
<li>继续加强数据结构与算法，每周一练；</li>
</ol>
<h2 id="待提升的软技能"><a class="markdownIt-Anchor" href="#待提升的软技能"></a> 待提升的软技能：</h2>
<ol>
<li>提升沟通能力；</li>
<li>善于倾听，变得更 Considerate;</li>
</ol>
<h2 id="第二技能的学习规划"><a class="markdownIt-Anchor" href="#第二技能的学习规划"></a> 第二技能的学习规划：</h2>
<ol>
<li>从 Solidity 入门区块链开发</li>
<li>了解区块链游戏开发</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[每日总结打卡-2021/12/15]]></title>
      <url>http://tech.noexception.cn/2021/12/15/sign-20211215/</url>
      <content type="html"><![CDATA[<p><em>见不尽天下之事</em></p>
<a id="more"></a>
<h3 id="s情景"><a class="markdownIt-Anchor" href="#s情景"></a> S情景</h3>
<ul>
<li>最近这段时间的内容主要是：
<ol>
<li>每天学习一节抽奖项目的内容，当前进度：<code>第13节</code>；</li>
<li>查找并学习如何实现一个二级缓存框架；</li>
<li>零碎的工作上的事情。</li>
</ol>
</li>
</ul>
<h3 id="t任务"><a class="markdownIt-Anchor" href="#t任务"></a> T任务</h3>
<ul>
<li>提交今天的 Lottery 项目学习代码作业</li>
<li>这两天找到了一个二级缓存的开源项目：<a href="https://gitee.com/ld/J2Cache" target="_blank" rel="noopener">J2Cache</a>，clone 到本地</li>
</ul>
<h3 id="a行动"><a class="markdownIt-Anchor" href="#a行动"></a> A行动</h3>
<ul>
<li>关于 Lottery 项目的作业，统一 push 到了当前项目目录下的 <code>idea-plugin/mylottery</code> 下，以一个 git submodule 的形式整理在当前这个<a href="https://codechina.csdn.net/CreativeAlliance/lottery-102-999" target="_blank" rel="noopener">仓库</a>中。</li>
<li>把 <code>J2Cache</code> 源码 clone 到本地，通过官方的单元测试，进行单步调试，首先想了解下，大神写的二级缓存框架的主要流程大体上是怎么样的；</li>
<li>今晚下班的时候，顺带也去 star 了阿里家的 <code>JetCache</code> 也是一个二级缓存框架，本想查查这两个框架的差别，但是网上能够搜索到的资料相当有限。暂时先研究透 <code>J2Cache</code> 先吧，饭要一口一口吃，路要一步一步走。</li>
</ul>
<h3 id="r结果"><a class="markdownIt-Anchor" href="#r结果"></a> R结果</h3>
<ul>
<li>关于 J2Cache 官方测试类代码调试，目前看到缓存的配置加载以及缓存的初始化流程。自从刷完傅哥的 《手撸Spring专栏》以后，看这些源码似乎没有以前那么吃力了，自己也很惊讶。坚持！</li>
<li><strong>日拱一卒，功不唐捐</strong></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 打卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[缓存框架设计思路]]></title>
      <url>http://tech.noexception.cn/2021/12/12/cache/</url>
      <content type="html"><![CDATA[<p><em>读不尽天下之书</em></p>
<a id="more"></a>
<h2 id="需要解决的问题点"><a class="markdownIt-Anchor" href="#需要解决的问题点"></a> 需要解决的问题点</h2>
<h3 id="1-分布式缓存同步"><a class="markdownIt-Anchor" href="#1-分布式缓存同步"></a> 1. 分布式缓存同步</h3>
<h4 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题：</h4>
<ol>
<li>在高并发的场景下，如何保证分布式场景下各个节点中本地缓存的一致性问题？</li>
</ol>
<h4 id="解决思路"><a class="markdownIt-Anchor" href="#解决思路"></a> 解决思路：</h4>
<ol>
<li>同步的目的是为了尽可能保证分布式缓存的一致性。通过<code>发布订阅功能</code>来实现分布式缓存下不同节点的缓存同步。</li>
<li>数据变更通知 + 定期刷新过期缓存的策略，尽可能的保证缓存的一致性。可以通过<code>Redis</code> + <code>Kafka</code>的发布订阅功能实现。</li>
<li>框架留好扩展点，可以快速便捷的扩展其他 MQ 来实现缓存同步。</li>
<li>使用缓存，必定会存在不一致的情况，无法保证强一致性。</li>
</ol>
<h3 id="2-缓存更新"><a class="markdownIt-Anchor" href="#2-缓存更新"></a> 2. 缓存更新</h3>
<h4 id="问题-2"><a class="markdownIt-Anchor" href="#问题-2"></a> 问题：</h4>
<ol>
<li>缓存更新包含了<code>本地缓存</code>以及<code>Redis</code>的操作，同时通知其他缓存节点进行<code>缓存更新</code>操作；</li>
</ol>
<h4 id="解决思路-2"><a class="markdownIt-Anchor" href="#解决思路-2"></a> 解决思路：</h4>
<ol>
<li><strong>主动更新</strong>
<ul>
<li>获取缓存时，若缓存不存在或缓存已过期，则重新加载缓存；</li>
<li>源数据变更后，调用<code>缓存刷新</code>接口重新加载缓存（此时只对已存在的 key 重新加载）</li>
</ul>
</li>
<li><strong>自动更新</strong>
<ul>
<li>定期刷新过期缓存，尽可能保证分布式缓存的一致性；</li>
</ul>
</li>
</ol>
<h3 id="3-缓存淘汰"><a class="markdownIt-Anchor" href="#3-缓存淘汰"></a> 3. 缓存淘汰</h3>
<h4 id="问题-3"><a class="markdownIt-Anchor" href="#问题-3"></a> 问题：</h4>
<ul>
<li>通知其他缓存节点进行<code>缓存淘汰</code></li>
</ul>
<h4 id="解决思路-3"><a class="markdownIt-Anchor" href="#解决思路-3"></a> 解决思路：</h4>
<ol>
<li><strong>主动淘汰</strong></li>
</ol>
<ul>
<li>获取缓存时，检查缓存是否过期，如果过期则淘汰缓存；</li>
<li>结合<code>@CacheEvict</code>在源数据修改前或修改后，淘汰缓存；</li>
<li>数据源变更后，调用刷新缓存接口，进行缓存淘汰；</li>
</ul>
<ol start="2">
<li><strong>自动淘汰</strong></li>
</ol>
<ul>
<li>利用<code>Redis</code>的缓存淘汰策略管理</li>
<li>缓存淘汰算法</li>
</ul>
<h3 id="4-缓存预热"><a class="markdownIt-Anchor" href="#4-缓存预热"></a> 4. 缓存预热</h3>
<h4 id="问题-4"><a class="markdownIt-Anchor" href="#问题-4"></a> 问题：</h4>
<h4 id="解决思路-4"><a class="markdownIt-Anchor" href="#解决思路-4"></a> 解决思路：</h4>
<ol>
<li><strong>手动预热</strong></li>
</ol>
<ul>
<li>对标注了缓存注解的如<code>@Cacheable</code>或者<code>@CachePut</code>的业务接口进行缓存预热。</li>
</ul>
<ol start="2">
<li><strong>自动预热</strong></li>
</ol>
<ul>
<li>在系统启动完毕后，调用业务接口将数据加载到缓存中。</li>
</ul>
<h3 id="5-热点数据"><a class="markdownIt-Anchor" href="#5-热点数据"></a> 5. 热点数据</h3>
<h4 id="问题-5"><a class="markdownIt-Anchor" href="#问题-5"></a> 问题：</h4>
<ul>
<li>缓存集群中的某个 key 瞬间被数万甚至十万的并发请求打爆</li>
</ul>
<h4 id="解决思路-5"><a class="markdownIt-Anchor" href="#解决思路-5"></a> 解决思路：</h4>
<ol>
<li>采用本地缓存来缓解缓存集群和数据库集群的压力。使用二级缓存的形式解决。</li>
<li>应用层面做限流熔断机制，保护后面的缓存集群和数据库集群可用。</li>
</ol>
<h3 id="6-缓存雪崩"><a class="markdownIt-Anchor" href="#6-缓存雪崩"></a> 6. 缓存雪崩</h3>
<h4 id="问题-6"><a class="markdownIt-Anchor" href="#问题-6"></a> 问题：</h4>
<ul>
<li>由于大量缓存失效，导致大量请求打到数据库上，导致数据库的 CPU 和内存压力变大，从而出现一系列连锁反应，造成整个系统崩溃。</li>
</ul>
<h4 id="解决思路-6"><a class="markdownIt-Anchor" href="#解决思路-6"></a> 解决思路：</h4>
<ul>
<li><code>Caffeine</code> 默认使用异步机制加载缓存数据，可有效防止缓存击穿（防止同一个 key 或不同 key 被击穿的场景）</li>
<li>将缓存层设计成高可用，防止缓存大面积故障</li>
<li>利用本地缓存，一定程度上保证服务的可用性。但主要还是通过对源服务的访问进行限流、熔断、降级等手段。</li>
<li>提前压测，项目上线前，演练缓存层宕机后，应用以及后端的负载情况以及可能出现的问题，对高可用提前预演，提前发现问题。</li>
</ul>
<h3 id="7-缓存击穿"><a class="markdownIt-Anchor" href="#7-缓存击穿"></a> 7. 缓存击穿</h3>
<h4 id="问题-7"><a class="markdownIt-Anchor" href="#问题-7"></a> 问题：</h4>
<ul>
<li>在平常高并发的系统中，大量的请求同时查询一个 key 时，此时这个 key 正好失效了，就会导致大量的请求都打到数据库上面去，这种现象就是<strong>缓存击穿</strong></li>
</ul>
<h4 id="解决思路-7"><a class="markdownIt-Anchor" href="#解决思路-7"></a> 解决思路：</h4>
<ul>
<li>解决思路同<code>缓存雪崩</code>，利用<code>Caffeine</code>默认使用异步机制加载缓存数据，可以有效的防止缓存击穿。</li>
</ul>
<h3 id="8-缓存穿透"><a class="markdownIt-Anchor" href="#8-缓存穿透"></a> 8. 缓存穿透</h3>
<h4 id="问题-8"><a class="markdownIt-Anchor" href="#问题-8"></a> 问题：</h4>
<ul>
<li>请求根本不存在的数据，也就是在缓存和数据库中都查不到这条数据，但是请求每次都会打到数据库上面去。这种查询不存在数据的现象就是<strong>缓存穿透</strong>。</li>
</ul>
<h4 id="解决思路-8"><a class="markdownIt-Anchor" href="#解决思路-8"></a> 解决思路：</h4>
<ul>
<li>通过对不存在的 key 缓存空值，来防止缓存穿透。</li>
<li>也可以通过使用<code>BloomFilter</code>来对 key 进行过滤。</li>
<li>对于高并发系统，可以结合 Hystrix 或 Sentinel来做应用级别的限流和降级，以保护下游系统不会被大量的请求给打死。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 缓存设计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[每日总结打卡-2021/12/10]]></title>
      <url>http://tech.noexception.cn/2021/12/10/sign-1210/</url>
      <content type="html"><![CDATA[<p>日记跬步，可至千里</p>
<a id="more"></a>
<h3 id="s-情景"><a class="markdownIt-Anchor" href="#s-情景"></a> S-情景</h3>
<ul>
<li>项目脚手架的代码生成器已经开发完了，周五开坑，开始了解idea插件开发，计划先写一个提醒喝水的插件。多喝水，多上厕所，多走动走动，对身体好，哈哈哈。</li>
<li>其次就是后端脚手架项目，需要一个缓存模块，于是准备开坑，开始撸一个缓存中间件。</li>
</ul>
<h3 id="t-任务"><a class="markdownIt-Anchor" href="#t-任务"></a> T-任务</h3>
<ul>
<li>IDEA-Plugin 章节，使用 Gradle 创建插件项目；</li>
<li>将插件项目 helloworld 跑通；</li>
<li>将缓存模块包装秤一个starter，在需要的项目中，引入pom依赖；</li>
</ul>
<h3 id="a-行动"><a class="markdownIt-Anchor" href="#a-行动"></a> A-行动</h3>
<ul>
<li>后端脚手架项目，代码生成工具已经撸完了；</li>
<li>使用 gradle 构建 Idea-Plugin 插件项目，并跑通 Helloworld；</li>
<li>后续把作业项目同步上传至 <a href="https://codechina.csdn.net/CreativeAlliance/lottery-102-999.git" target="_blank" rel="noopener">https://codechina.csdn.net/CreativeAlliance/lottery-102-999.git</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 打卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2021年的第一篇总结]]></title>
      <url>http://tech.noexception.cn/2021/11/27/202111summary/</url>
      <content type="html"><![CDATA[<p>温故而知新</p>
<a id="more"></a>
<h2 id="做了什么"><a class="markdownIt-Anchor" href="#做了什么"></a> 做了什么</h2>
<ol>
<li>完成《手撸 Spring 专栏》<em><a href="https://codechina.csdn.net/lvtao0626/container-mini" target="_blank" rel="noopener">container-mini</a></em>；</li>
<li>开始尝试基于<code>Spring</code>开发中间件，如：服务限流器、缓存中间件；</li>
<li>在项目中引入<code>drools</code>规则引擎；</li>
<li>编写了一个 CURD 代码生成的小工具*<a href="https://gitee.com/big-lance/fast-code" target="_blank" rel="noopener">fast-code</a>*；</li>
</ol>
<h2 id="没完成的事"><a class="markdownIt-Anchor" href="#没完成的事"></a> 没完成的事</h2>
<ol>
<li>每周算法打卡计划总是断断续续…😔</li>
<li>梳理 Java 后端技术栈知识未完成；</li>
</ol>
<h2 id="下一步计划"><a class="markdownIt-Anchor" href="#下一步计划"></a> 下一步计划</h2>
<p>…</p>
]]></content>
      
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[以 Spring MVC 模式编写 MongoDB 的 CURD]]></title>
      <url>http://tech.noexception.cn/2021/08/01/mongo-spring-mvc/</url>
      <content type="html"><![CDATA[<p>日拱一卒，功不唐捐。</p>
<a id="more"></a>
<p><a name="IIilc"></a></p>
<h2 id="一-mongodb-介绍"><a class="markdownIt-Anchor" href="#一-mongodb-介绍"></a> 一、MongoDB 介绍</h2>
<ul>
<li>MongoDB 是文档数据库，NoSQL数据库中的一种，本篇文章，分享使用<code>Spring MVC</code>的方式去编写MongoDB的CURD操作代码，简化问价存储的开发流程。<br />
<a name="DXFPh"></a></li>
</ul>
<h2 id="二-具体操作"><a class="markdownIt-Anchor" href="#二-具体操作"></a> 二、具体操作</h2>
<p><a name="JMHJI"></a></p>
<h3 id="a-小文件存储"><a class="markdownIt-Anchor" href="#a-小文件存储"></a> A. 小文件存储</h3>
<ol>
<li>引入MongoDB依赖：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">！--</span> <span class="attr">SpringBoot</span> 用户 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">！--</span> 非 <span class="attr">SpringBoot</span> 用户 <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongodb-driver-sync<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>编写Entity代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span> <span class="comment">// 指定对应的 collection 的名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateDocument</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5701973075364468575L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 文档主键ID</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义文档属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二进制文件内容</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Binary content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写持久层代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TemplateDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">TemplateDocument</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件名称查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;'name':?0&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;TemplateDocument&gt; <span class="title">findByName</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>编写服务层代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateDao templateDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TemplateDocument&gt; <span class="title">queryDocumentList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> templateDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TemplateDocument <span class="title">addTemplateDocument</span><span class="params">(TemplateDocument entity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> templateDao.insert(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TemplateDocument <span class="title">modifyTemplateDocument</span><span class="params">(TemplateDocument entity)</span></span>&#123;</span><br><span class="line">        TemplateDocument preModifyDocument = templateDao.findById(entity.getId()).get();</span><br><span class="line">        preModifyDocument.setName(entity.getName());</span><br><span class="line">        <span class="keyword">return</span> templateDao.save(preModifyDocument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDocumentById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        templateDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;TemplateDocument&gt; <span class="title">getFileById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> templateDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TemplateDocument <span class="title">findOneByName</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        List&lt;TemplateDocument&gt; result = templateDao.findByName(fileName);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isEmpty(result))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TemplateDocument();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>编写控制层代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"MongoDB 文件管理"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/template"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateService templateService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"小文件上传接口"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">mongoFileUploda</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        TemplateDocument entity = <span class="keyword">new</span> TemplateDocument();</span><br><span class="line">        entity.setId(UUID.fastUUID().toString());</span><br><span class="line">        entity.setName(file.getOriginalFilename());</span><br><span class="line">        entity.setContent(<span class="keyword">new</span> Binary(file.getBytes()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccess(templateService.saveFile(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"小文件下载接口"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">mongoFileDownload</span><span class="params">(@RequestParam String id)</span> </span>&#123;</span><br><span class="line">        Optional&lt;TemplateDocument&gt; file = templateService.getFileById(id);</span><br><span class="line">        <span class="keyword">if</span> (file.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                    .header(HttpHeaders.CONTENT_DISPOSITION, <span class="string">"fileName=\""</span> + file.get().getName() + <span class="string">"\""</span>)</span><br><span class="line">                    .header(HttpHeaders.CONTENT_TYPE, <span class="string">"application/octet-stream"</span>)</span><br><span class="line">                    .body(file.get().getContent().getData());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="string">"File was not fount"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"文档列表查询"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/queryDocumentList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">queryDocumentList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccess(templateService.queryDocumentList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"文件名搜索"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/searchByFileName"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">searchByFileName</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccess(templateService.findOneByName(fileName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"根据文件ID读取文件内容并返回"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getDataByFileId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse <span class="title">getDataByFileId</span><span class="params">(@RequestParam String fileId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccess(templateService.getDataByFileId(fileId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="V6EAW"></a></p>
<h3 id="b-大文件存储"><a class="markdownIt-Anchor" href="#b-大文件存储"></a> B. 大文件存储</h3>
<ul>
<li>大文件存储，使用有 Spring Data 依赖中提供的 GridFsTemplate，跟 gridFs 进行交互。</li>
</ul>
<ol>
<li>配置信息：
<ol>
<li>设置 MongoDB 文件上传的上限</li>
<li>往 Spring 容器中注入 GridFSBucket， 用于打开下载流</li>
</ol>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span>  <span class="comment"># 设置文件上传上限</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">1024MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">1024MB</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># MongoConfig.java</span><br><span class="line"><span class="comment">// MongoDB 配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.data.mongodb.database&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dbName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往 Spring 容器中注入 GridFSBucket， 用于打开下载流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GridFSBucket <span class="title">getGridFsBucket</span><span class="params">(MongoClient mongoClient)</span> </span>&#123;</span><br><span class="line">        MongoDatabase mongoDatabase = mongoClient.getDatabase(dbName);</span><br><span class="line">        <span class="keyword">return</span> GridFSBuckets.create(mongoDatabase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>实体类代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大文件存储实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HugeFileEntity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date creationDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date lastUpdateTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long size;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件 MD5 加密值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String contentType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件名后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fileType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mongo gridFS 的ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String gridFsId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Service 层：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HugeFileService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GridFsTemplate gridFsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GridFSBucket gridFSBucket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HugeFileEntity <span class="title">fileAdd</span><span class="params">(MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uploadFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = uploadFile.getOriginalFilename();</span><br><span class="line">        Builder&lt;HugeFileEntity&gt; entityBuilder = Builder.of(HugeFileEntity::<span class="keyword">new</span>);</span><br><span class="line">        entityBuilder</span><br><span class="line">                .with(HugeFileEntity::setContentType, uploadFile.getContentType())</span><br><span class="line">                .with(HugeFileEntity::setFileType, StrUtil.subAfter(fileName, <span class="string">"."</span>, <span class="keyword">true</span>))</span><br><span class="line">                .with(HugeFileEntity::setCreationDate, <span class="keyword">new</span> Date())</span><br><span class="line">                .with(HugeFileEntity::setName, fileName)</span><br><span class="line">                .with(HugeFileEntity::setSize, uploadFile.getSize())</span><br><span class="line">                .with(HugeFileEntity::setLastUpdateTime, <span class="keyword">new</span> Date())</span><br><span class="line">                .with(HugeFileEntity::setMd5, MD5.create().digestHex(uploadFile.getInputStream()));</span><br><span class="line">        String gridFsId = <span class="keyword">this</span>.uploadFile(uploadFile.getInputStream(), uploadFile.getContentType());</span><br><span class="line">        entityBuilder.with(HugeFileEntity::setGridFsId, gridFsId);</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.save(entityBuilder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件到 gridFS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(InputStream inputStream, String contentType)</span> </span>&#123;</span><br><span class="line">        String fileName = IdUtil.objectId();</span><br><span class="line">        <span class="keyword">return</span> gridFsTemplate.store(inputStream, fileName, contentType).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询待删除文件</span></span><br><span class="line">        HugeFileEntity entity = mongoTemplate.findById(id, HugeFileEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除文件在gridFS中对应的fs.chunk和fs.files记录</span></span><br><span class="line">            Query deleteFileQuery = <span class="keyword">new</span> Query().addCriteria(Criteria.where(<span class="string">"_id"</span>).is(entity.getGridFsId()));</span><br><span class="line">            gridFsTemplate.delete(deleteFileQuery);</span><br><span class="line">            <span class="comment">// 删除存储在collection中的文档记录</span></span><br><span class="line">            Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"id"</span>).is(entity.getId()));</span><br><span class="line">            mongoTemplate.remove(query, HugeFileEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID查询文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;HugeFileEntity&gt; <span class="title">findFileById</span><span class="params">(String id, <span class="keyword">boolean</span> useContent)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HugeFileEntity entity = mongoTemplate.findById(id, HugeFileEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (entity == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!useContent) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.of(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        Query gridFsQuery = <span class="keyword">new</span> Query().addCriteria(Criteria.where(<span class="string">"_id"</span>).is(entity.getGridFsId()));</span><br><span class="line">        GridFSFile file = gridFsTemplate.findOne(gridFsQuery);</span><br><span class="line">        <span class="comment">// 打开流下载对象</span></span><br><span class="line">        GridFSDownloadStream ins = gridFSBucket.openDownloadStream(file.getObjectId());</span><br><span class="line">        <span class="keyword">if</span> (ins.getGridFSFile().getLength() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取流对象</span></span><br><span class="line">        GridFsResource resource = <span class="keyword">new</span> GridFsResource(file, ins);</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        entity.setContent(IoUtil.readBytes(resource.getInputStream()));</span><br><span class="line">        <span class="keyword">return</span> Optional.of(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;HugeFileEntity&gt; <span class="title">findFileById</span><span class="params">(String id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.findFileById(id, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;HugeFileEntity&gt; <span class="title">queryPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query().with(Sort.by(Sort.Direction.DESC, <span class="string">"creationDate"</span>));</span><br><span class="line">        <span class="keyword">long</span> offset = (<span class="keyword">long</span>) (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">        query.skip(offset);</span><br><span class="line">        query.limit(pageSize);</span><br><span class="line">        <span class="comment">// 排除附件实际内容</span></span><br><span class="line">        Field field = query.fields();</span><br><span class="line">        field.exclude(<span class="string">"content"</span>);</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.find(query, HugeFileEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Controller 层：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"大文件管理"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hugeFile"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HugeFileController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HugeFileService hugeFileService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"分页查询接口"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/queryPage"</span>)</span><br><span class="line">    <span class="keyword">public</span> ServerResponse&lt;List&lt;HugeFileEntity&gt;&gt; index(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccess(hugeFileService.queryPage(pageNum, pageSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"文件上传接口"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse&lt;HugeFileEntity&gt; <span class="title">uploadFile</span><span class="params">(MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccess(hugeFileService.fileAdd(uploadFile));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"文件下载接口"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/downloadFile"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">downloadFile</span><span class="params">(String id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据文档主键ID下载文件</span></span><br><span class="line">        Optional&lt;HugeFileEntity&gt; entity = hugeFileService.findFileById(id, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> entity.&lt;ResponseEntity&lt;Object&gt;&gt;map(hugeFileEntity -&gt; ResponseEntity.ok()</span><br><span class="line">                .header(HttpHeaders.CONTENT_DISPOSITION, <span class="string">"fileName="</span> + hugeFileEntity.getName())</span><br><span class="line">                .header(HttpHeaders.CONTENT_TYPE, hugeFileEntity.getContentType())</span><br><span class="line">                .header(HttpHeaders.CONTENT_LENGTH, hugeFileEntity.getSize() + <span class="string">""</span>)</span><br><span class="line">                .header(<span class="string">"Connection"</span>, <span class="string">"close"</span>)</span><br><span class="line">                .body(hugeFileEntity.getContent())).orElseGet(() -&gt; ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="string">"不存在的文件"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"文件删除接口"</span>)</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerResponse&lt;HugeFileEntity&gt; <span class="title">deleteFile</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        hugeFileService.deleteFile(id);</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.createBySuccessMessage(<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="ur8s6"></a></p>
<h2 id="三-大文件存储关系图"><a class="markdownIt-Anchor" href="#三-大文件存储关系图"></a> 三、大文件存储关系图</h2>
<h3 id="实体类关系图"><a class="markdownIt-Anchor" href="#实体类关系图"></a> 实体类关系图</h3>
<p><img src="./entity-relay.png" alt="entity-relay" /></p>
]]></content>
      
        
        <tags>
            
            <tag> 日积笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARTS 打卡——Weekly ③]]></title>
      <url>http://tech.noexception.cn/2021/05/25/arts-03/</url>
      <content type="html"><![CDATA[<p>日拱一卒，功不唐捐。</p>
<a id="more"></a>
<h2 id="algorithm算法题"><a class="markdownIt-Anchor" href="#algorithm算法题"></a> Algorithm——算法题</h2>
<h3 id="字母异位词分组"><a class="markdownIt-Anchor" href="#字母异位词分组"></a> 字母异位词分组</h3>
<h4 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h4>
<blockquote>
<p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。<br />
<img src="./Snip20210528_34.png" alt="description" /></p>
</blockquote>
<h4 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h4>
<ul>
<li>
<p>首先想到的思路就是，模仿 HashMap 的方式，通过实现一个 hash 函数，得到一个单词的哈希值，然后作为这个单词的 key 缓存到一个 Cache 中，如果是字母以为词，放入相同的一个分组中，否则放入另外的分组中。最后，返回分好组的结果即可。（这个 hash 函数的算法可以有很多，我想到的最简单的实现就是，将输入的单词排序，因为字母异位词的特征就是，单词所组成的字母是相同的，但是顺序不同。所以重新排序得到的结果应该就是一致的，满足我们 hash 散列函数的要求。）</p>
</li>
<li>
<p>第二个思路，也是从网友的帖子中发现的一个比较有意思的算法。即：<code>利用质数代表26个字母，让乘积结果作为hash值</code> 这种算法比我们排序的算法要快上许多。实现简单，思路巧妙。</p>
</li>
</ul>
<h4 id="解答代码"><a class="markdownIt-Anchor" href="#解答代码"></a> 解答代码：</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法1：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">hashString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] table = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; table.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (table[i]&gt;table[j])&#123;</span><br><span class="line">                    <span class="keyword">char</span> temp = table[i];</span><br><span class="line">                    table[i] = table[j];</span><br><span class="line">                    table[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(table);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; crucible = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String param : strs) &#123;</span><br><span class="line">            String hashValue = hashString(param);</span><br><span class="line">            <span class="keyword">if</span> (!crucible.keySet().contains(hashValue))&#123;</span><br><span class="line">                <span class="comment">// 尚未存在</span></span><br><span class="line">                crucible.put(hashValue, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            crucible.get(hashValue).add(param);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : crucible.keySet()) &#123;</span><br><span class="line">            result.add(crucible.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法2：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Long <span class="title">hashString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] primeNum = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] table = str.toCharArray();</span><br><span class="line">        Long product = <span class="number">1L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">            product *= primeNum[table[i] - <span class="number">97</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;Long, List&lt;String&gt;&gt; crucible = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String param : strs) &#123;</span><br><span class="line">            Long hashValue = hashString(param);</span><br><span class="line">            <span class="keyword">if</span> (!crucible.keySet().contains(hashValue))&#123;</span><br><span class="line">                <span class="comment">// 尚未存在</span></span><br><span class="line">                crucible.put(hashValue, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            crucible.get(hashValue).add(param);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Long key : crucible.keySet()) &#123;</span><br><span class="line">            result.add(crucible.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="review阅读一篇英文文章"><a class="markdownIt-Anchor" href="#review阅读一篇英文文章"></a> Review——阅读一篇英文文章</h2>
<pre class="highlight"><code class="">
## Tip——学习一个技巧
### 控制反转、依赖反转、依赖注入，这三者有何区别和联系
#### 控制反转（IOC）
- 这里的“控制”指的是对程序执行流程的控制，而“反转”指的是在没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程可以通过框架来控制。**流程的控制权从程序员“反转”到了框架。**
- 控制反转并不是一种具体的实现技巧，而是一个比较笼统的设计思想，一般用来指导框架层面的设计。

#### 依赖注入（DI）
- 依赖注入跟控制反转恰恰相反，它是一种具体的编码技巧。
- **解释**：不通过`new()`的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类使用。
- 例子对比：

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非依赖注入实现方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notification</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MessageSender messageSender;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Notification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageSender = <span class="keyword">new</span> MessageSender(); <span class="comment">//此处有点像hardcode</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String cellphone, String message)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...省略校验逻辑等...</span></span><br><span class="line">    <span class="keyword">this</span>.messageSender.send(cellphone, message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String cellphone, String message)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用Notification</span></span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖注入的实现方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notification</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MessageSender messageSender;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 通过构造函数将messageSender传递进来</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Notification</span><span class="params">(MessageSender messageSender)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageSender = messageSender;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String cellphone, String message)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...省略校验逻辑等...</span></span><br><span class="line">    <span class="keyword">this</span>.messageSender.send(cellphone, message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用Notification</span></span><br><span class="line">MessageSender messageSender = <span class="keyword">new</span> MessageSender();</span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification(messageSender);</span><br></pre></td></tr></table></figure>

- 把 MessageSender 定义成接口，基于接口而非实现编程，继续优化：

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notification</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MessageSender messageSender;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Notification</span><span class="params">(MessageSender messageSender)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageSender = messageSender;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String cellphone, String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageSender.send(cellphone, message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String cellphone, String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短信发送类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String cellphone, String message)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 站内信发送类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InboxSender</span> <span class="keyword">implements</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String cellphone, String message)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Notification</span></span><br><span class="line">MessageSender messageSender = <span class="keyword">new</span> SmsSender();</span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification(messageSender);</span><br></pre></td></tr></table></figure>

#### 依赖注入框架（DI Frameword）
- 在采用依赖注入实现的 Notification 类中，虽然我们不需要用类似 hard code 的方式，在类内部通过 new 来创建 MessageSender 对象，但是，这个创建对象、组装（或注入）对象的工作紧紧是被移动到了更上层代码而已，还是需要程序员自己来实现。
- 可以通过框架来自动完成，只需要通过依赖注入框架提供的扩展点，简单配置一下所有需要创建的类对象、类与类之间的依赖关系，就可以实现由框架来自动创建对象、管理对象的生命周期、依赖注入等原本需要程序员来做的事情。
- 这类框架有很多： Google Guice、Java Spring、Pico Container、Butterfly Container。

#### 依赖反转原则（DIP）
- 原文：High-level modules shouldn't depend on low-level modules. Both modules should depend on abstractions. In addition, abstractions shouldn't depend on details. Details depend on abstractions.
- 定义：高层模块不要依赖低层模块。高层模块和低层模块应该通过抽象来互相依赖。除此之外，抽象不要依赖具体实现细节，具体实现细节依赖抽象。
- 这条原则主要是用来指导框架层面的设计，跟前面讲到的控制反转类似。
##### 用 Tomcat 作为例子：
- Tomcat 是运行 Java Web 应用程序的容器，Tomcat 是高层模块，Java Web 是低层模块。两者之间没有直接的依赖关系，两者都依赖同一个“抽象”，就是 Servlet 规范。Servlet 规范不依赖具体的 Tomcat 容器和应用程序的实现细节，而两者都依赖 Servlet 规范。


## Share——分享一篇有观点的文章
  - &lt;a href=&quot;https://coolshell.cn/articles/21113.html&quot; target=&quot;_blank&quot;&gt;[ 百度为什么掉队了 ]&lt;/a&gt;
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> ARTS </tag>
            
            <tag> 打卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARTS 打卡——Weekly ②]]></title>
      <url>http://tech.noexception.cn/2021/05/18/arts-02/</url>
      <content type="html"><![CDATA[<p>日拱一卒，功不唐捐。</p>
<a id="more"></a>
<h2 id="algorithm算法题"><a class="markdownIt-Anchor" href="#algorithm算法题"></a> Algorithm——算法题</h2>
<h3 id="循环链表"><a class="markdownIt-Anchor" href="#循环链表"></a> 循环链表</h3>
<h4 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述：</h4>
<blockquote>
<p>给定一个链表，判断链表中是否有环。<br />
如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。<br />
如果链表中存在环，则返回 true 。 否则，返回 false 。<br />
<img src="./Snip20210515_117.png" alt="description" /></p>
</blockquote>
<h4 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路：</h4>
<ul>
<li>首先第一个想到的思路就是：
<ol>
<li>创建一个集合，用于存放每一个遍历过的节点；</li>
<li>遍历给定的链表，将每一个元素都放入上一步创建的集合当中；</li>
<li>在遍历的过程中，判断当前节点是否存在于集合当中，如果存在则说明，是循环链表；</li>
<li>其次，遍历到链表末尾的时候，next指向的为 null，则说明不是循环链表；</li>
</ol>
</li>
<li>然后，想到的第二个思路就是：
<ul>
<li>用两个指针，分别是快慢指针；</li>
<li>快指针步长是慢指针的两倍（三倍也行）;</li>
<li>一直这样遍历下去，如果是循环链表的话，则快慢指针终会相遇；</li>
<li>否则，当快指针的next或者慢指针的next指向null时，则说明不是循环链表</li>
</ul>
</li>
</ul>
<h4 id="解答代码"><a class="markdownIt-Anchor" href="#解答代码"></a> 解答代码：</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法一：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode current = head;</span><br><span class="line">        Set&lt;ListNode&gt; listNodePool = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (listNodePool.contains(current))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            listNodePool.add(current);</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 解法二：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用快慢指针的方法</span></span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow || slow == fast.next) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="review阅读一篇英文文章"><a class="markdownIt-Anchor" href="#review阅读一篇英文文章"></a> Review——阅读一篇英文文章</h2>
<ul>
<li><a href="https://uxdesign.cc/the-software-architect-fallacy-b62a41683979" target="_blank">[ The software architect fallacy（软件架构师谬论） ]</a></li>
</ul>
<h4 id="看法"><a class="markdownIt-Anchor" href="#看法"></a> 看法：</h4>
<ul>
<li>这篇文章用了一个非常生动形象的例子阐述了瀑布型开发模型的弊端，并提出了一下一些思考点：
<ol>
<li>能够看到产品3-5年后的样子吗？</li>
<li>在未来还需要投入多少工作量才能让产品上线？</li>
<li>如果第一个版本能够使产品更稳定地被更高的客户采用，那么团队是否有可能对产品的关键区域进行返工？</li>
<li>我们有哪些决定会限制或者改变我们产品最终的形态？</li>
<li>在快速迭代的同时，我们能够保证产品基础功能的稳定运行吗？</li>
<li>是否存在有可以重构的模块或者部分？</li>
</ol>
</li>
</ul>
<h2 id="tip学习一个技巧"><a class="markdownIt-Anchor" href="#tip学习一个技巧"></a> Tip——学习一个技巧</h2>
<h3 id="设计原则贫血模型与充血模型"><a class="markdownIt-Anchor" href="#设计原则贫血模型与充血模型"></a> 设计原则——贫血模型与充血模型</h3>
<ul>
<li>基于贫血模型的 MVC 三层架构开发模式，是一种面向过程的编程风格，被称为“反模式”。<em>领域驱动设计</em>是基于充血模型的开发模式，越来越被人提倡。</li>
</ul>
<h3 id="贫血模型"><a class="markdownIt-Anchor" href="#贫血模型"></a> 贫血模型：</h3>
<h4 id="贫血模型的定义"><a class="markdownIt-Anchor" href="#贫血模型的定义"></a> 贫血模型的定义：</h4>
<ol>
<li>在大多数的后端项目中，Entity 和 DAO(Repository) 组成数据访问层，BO 和 Service 组成业务逻辑层，VO 和 Controller 组成接口层。BO 是一个纯粹的数据结构，只包含数据，不包含任何业务逻辑。业务逻辑集中在 Service 中。通过 Service 来操作 BO。Service 层的数据和业务逻辑，被分割为 BO 和 Service 两个类。这种 BO 不包含业务逻辑的类，就叫做 <strong>贫血模型</strong>。贫血模型将数据与操作分离，破坏了面向对象的封装特性，所以说是一种典型的面向对象的编程风格。</li>
</ol>
<h3 id="充血模型"><a class="markdownIt-Anchor" href="#充血模型"></a> 充血模型：</h3>
<h4 id="领域驱动设计"><a class="markdownIt-Anchor" href="#领域驱动设计"></a> 领域驱动设计</h4>
<ul>
<li>DDD, 主要用来<strong>指导</strong>如何解耦业务系统，<strong>划分</strong>业务模块，<strong>定义</strong>业务领域模型及其交互。（2004年提出，但是由于微服务的盛行加速了 DDD 的兴起）</li>
<li>做好 DDD 的关键是：<strong>看人对自己所做业务的熟悉程度，而不是对领域驱动设计这个概念本身的掌握程度。</strong></li>
</ul>
<h4 id="充血模型的定义"><a class="markdownIt-Anchor" href="#充血模型的定义"></a> 充血模型的定义：</h4>
<ol>
<li>数据和对应的业务逻辑被封装到同一个类中国，因此，充血模型满足面向对象的封装特性，是典型的面向对象编程风格。</li>
<li>基于充血模型的DDD开发模式实现的代码，也是按照 MVC 三层架构分层的。Controller 层负责暴露接口，Repository 层负责数据存取， Service 层负责核心业务逻辑。区别主要在 Service 层。</li>
<li>基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain.</li>
</ol>
<h4 id="贫血模型之所以受欢迎的原因"><a class="markdownIt-Anchor" href="#贫血模型之所以受欢迎的原因"></a> 贫血模型之所以受欢迎的原因：</h4>
<ol>
<li>业务简单，基本就是基于SQL的CRUD操作，无需动脑子精心设计充血模型，贫血模型就足以应付这种简单业务的工作。</li>
<li>充血模型的设计要比贫血模型更加有难度。充血模型是一种面向对象的编程风格，一开始就要设计好针对数据要暴露那些操作，定义哪些业务逻辑。贫血模型只需要定义数据，后续有新的功能开发需求，就在 Service 层定义操作，不需要是事先做太多设计。</li>
<li>思维固化。这种贫血模型已成为 Web 开发中事实上的标准，难以改变。</li>
</ol>
<h4 id="充血模型的应用场景"><a class="markdownIt-Anchor" href="#充血模型的应用场景"></a> 充血模型的应用场景：</h4>
<ol>
<li>基于贫血模型的传统开发模式，比较适合业务比较简单的系统开发。</li>
<li>基于充血模型的DDD开发模式，更适合业务复杂的系统开发。如：
<ol>
<li>包含各种利息计算模型；</li>
<li>还款模型等复杂业务的金融系统</li>
</ol>
</li>
<li>一句话概括平时的开发：街道一个后端接口的开发需求的时候，就去看接口需要的数据对应到数据库中国，需要哪张表或者哪几张表，然后思考如何编写SQL语句来获取数据。之后就是定义 Entity、BO、VO，然后模板式地往对应的 Repository、Service、Controller 类中添加代码。</li>
<li>在基于充血模型的 DDD 的开发模式下，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。</li>
<li><strong>越复杂的系统，对代码的复用性、易维护性要求就越高，我们就越应该花更多的时间和精力在前期设计上。</strong> 而基于充血模型的 DDD 开发模式，正好需要我们前期做大量的业务调研、领域模型设计，所以它更加适合这种复杂系统的开发。</li>
</ol>
<h2 id="share分享一篇有观点的文章"><a class="markdownIt-Anchor" href="#share分享一篇有观点的文章"></a> Share——分享一篇有观点的文章</h2>
<ul>
<li><a href="https://coolshell.cn/articles/20533.html" target="_blank">[ 使用简单的逻辑方法进行独立思考 ]</a></li>
</ul>
<h3 id="笔记"><a class="markdownIt-Anchor" href="#笔记"></a> 笔记：</h3>
<ol>
<li><strong>五步思考：</strong>
<ol>
<li>信息数据可考证；</li>
<li>处理集合和其包含关系；
<ul>
<li><em>在数学的逻辑包含中，超集的定义可以适用于子集，通过子集的特征可以对超集进行探索，但是没法定义超集。</em></li>
<li><em>集合的大小也是一个很重要的事，幸存者偏差会是一个很容易让人掉下去的陷阱，因为可能会有很大的样本集可能在你的视线盲区。</em></li>
</ul>
</li>
<li>处理逻辑因果关系；
<ul>
<li><em>因果关系出问题的文章读多了是对大脑有损伤的，要尽量远离。</em></li>
</ul>
</li>
<li>找到靠谱的基准线；
<ul>
<li><em>智者建桥，愚者建墙</em></li>
</ul>
</li>
<li>更加深入和高维思考；</li>
</ol>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> ARTS </tag>
            
            <tag> 打卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARTS 打卡——Weekly ①]]></title>
      <url>http://tech.noexception.cn/2021/05/11/arts-01/</url>
      <content type="html"><![CDATA[<p>日拱一卒，功不唐捐。</p>
<a id="more"></a>
<h2 id="algorithm算法题"><a class="markdownIt-Anchor" href="#algorithm算法题"></a> Algorithm——算法题</h2>
<h3 id="杨辉三角"><a class="markdownIt-Anchor" href="#杨辉三角"></a> 杨辉三角</h3>
<h4 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述：</h4>
<blockquote>
<p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</br><br />
在杨辉三角中，每个数是它左上方和右上方的数的和。<br />
<img src="./Snip20210512_83.png" alt="description" /></p>
</blockquote>
<h4 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路：</h4>
<ul>
<li>首先看杨辉三角的规律：
<ol>
<li>行数跟个数相等</li>
<li>每一行的总和等于2的n-1次方，n为当前行数</li>
<li>每行都是回文</li>
<li>每行第二个数（如果有的话），都是n-1，且n为当前行数</li>
<li>从第一行开始生成的话，奇数行中间那个数，就正好等于上一行中间两个数之和</li>
<li>首先生成当前航的前一半的数字，剩下的根据先前生成的倒序插入即可</li>
</ol>
</li>
<li>处理流程大致上就分为：
<ul>
<li>计算并标记当前生成行的中位坐标，并标记当前行是否是奇数行（奇数行需要生成回文数列中的最大值）</li>
<li>计算并生成当前行前半部分数据</li>
<li>计算奇数行回文中间数值</li>
<li>将前半部分数值倒序插入当前行中，不全数据</li>
</ul>
</li>
</ul>
<h4 id="解答代码"><a class="markdownIt-Anchor" href="#解答代码"></a> 解答代码：</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">		List&lt;List&lt;Integer&gt;&gt; resultArray = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		List&lt;Integer&gt; subArray = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">			subArray = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			<span class="keyword">int</span> mid = (i + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">int</span> mod = (i + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (mid &lt; <span class="number">1</span>) &#123;</span><br><span class="line">				subArray.add(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mid; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">					subArray.add(<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">					subArray.add(i);</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				subArray.add(resultArray.get(i - <span class="number">1</span>).get(j) + resultArray.get(i - <span class="number">1</span>).get(j - <span class="number">1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (mod == <span class="number">1</span> &amp;&amp; mid &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">				subArray.add(resultArray.get(i - <span class="number">1</span>).get(mid) + resultArray.get(i - <span class="number">1</span>).get(mid - <span class="number">1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = mid; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">				subArray.add(subArray.get(k - <span class="number">1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			resultArray.add(subArray);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> resultArray;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="review阅读一篇英文文章"><a class="markdownIt-Anchor" href="#review阅读一篇英文文章"></a> Review——阅读一篇英文文章</h2>
<ul>
<li><a href="https://javascript.plainenglish.io/what-is-http-3-and-why-does-it-matter-cb7d7b4b600f" target="_blank">[ What is HTTP/3, and Why Does it Matter? ]</a></li>
</ul>
<h4 id="看法"><a class="markdownIt-Anchor" href="#看法"></a> 看法：</h4>
<ul>
<li>HTTP/3 基于 Google 在2012年发布的 QUIC 协议，添加了多项功能，比原来基于TCP/IP协议的HTTP要快非常非常多，QUIC 协议基于 UDP 实现，无需3次握手，具有快速安全的特点</li>
<li>支持情况：
<ul>
<li>Chrome: 87+</li>
<li>Edge: 87+</li>
<li>Firefox: 88+</li>
<li>Safari: 14+（需要在开启试验功能才能支持）</li>
</ul>
</li>
</ul>
<h2 id="tip学习一个技巧"><a class="markdownIt-Anchor" href="#tip学习一个技巧"></a> Tip——学习一个技巧</h2>
<h3 id="简单工厂工厂方法的一种特例"><a class="markdownIt-Anchor" href="#简单工厂工厂方法的一种特例"></a> 简单工厂（工厂方法的一种特例）</h3>
<ul>
<li>先来看一段未使用工厂模式的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigSource</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> RuleConfig <span class="title">load</span><span class="params">(String ruleConfigFilePath)</span> </span>&#123;</span><br><span class="line">    String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath);</span><br><span class="line">    IRuleConfigParser parser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"json"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> JsonRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"xml"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> XmlRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"yaml"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> YamlRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"properties"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> PropertiesRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRuleConfigException(</span><br><span class="line">             <span class="string">"Rule config file format is not supported: "</span> + ruleConfigFilePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String configText = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//从ruleConfigFilePath文件中读取配置文本到configText中</span></span><br><span class="line">    RuleConfig ruleConfig = parser.parse(configText);</span><br><span class="line">    <span class="keyword">return</span> ruleConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getFileExtension</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...解析文件名获取扩展名，比如rule.json，返回json</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"json"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为了让代码逻辑更加清晰，可读性更好，我们要善于将功能独立的代码封装成函数。</p>
</blockquote>
<ul>
<li>我们可以将代码中设计 parser 创建的部分逻辑剥离出来，抽象成 <code>createParser()</code> 函数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigSource</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> RuleConfig <span class="title">load</span><span class="params">(String ruleConfigFilePath)</span> </span>&#123;</span><br><span class="line">    String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath);</span><br><span class="line">    IRuleConfigParser parser = createParser(ruleConfigFileExtension);</span><br><span class="line">    <span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRuleConfigException(</span><br><span class="line">              <span class="string">"Rule config file format is not supported: "</span> + ruleConfigFilePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String configText = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//从ruleConfigFilePath文件中读取配置文本到configText中</span></span><br><span class="line">    RuleConfig ruleConfig = parser.parse(configText);</span><br><span class="line">    <span class="keyword">return</span> ruleConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getFileExtension</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...解析文件名获取扩展名，比如rule.json，返回json</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"json"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> IRuleConfigParser <span class="title">createParser</span><span class="params">(String configFormat)</span> </span>&#123;</span><br><span class="line">    IRuleConfigParser parser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"json"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> JsonRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"xml"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> XmlRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"yaml"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> YamlRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"properties"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> PropertiesRuleConfigParser();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parser;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>为了让类的职责更加单一、代码更加清晰，我们还可以进一步将 <code>createParser()</code> 函数剥离到一个独立的类中，让这个类只负责对象的创建。</li>
<li>而这个类就是我们所说的 <strong>简单工厂模式类</strong> 。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigSource</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> RuleConfig <span class="title">load</span><span class="params">(String ruleConfigFilePath)</span> </span>&#123;</span><br><span class="line">    String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath);</span><br><span class="line">    IRuleConfigParser parser = RuleConfigParserFactory.createParser(ruleConfigFileExtension);</span><br><span class="line">    <span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRuleConfigException(</span><br><span class="line">              <span class="string">"Rule config file format is not supported: "</span> + ruleConfigFilePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String configText = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//从ruleConfigFilePath文件中读取配置文本到configText中</span></span><br><span class="line">    RuleConfig ruleConfig = parser.parse(configText);</span><br><span class="line">    <span class="keyword">return</span> ruleConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getFileExtension</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...解析文件名获取扩展名，比如rule.json，返回json</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"json"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂模式类↓↓↓</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IRuleConfigParser <span class="title">createParser</span><span class="params">(String configFormat)</span> </span>&#123;</span><br><span class="line">    IRuleConfigParser parser = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"json"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> JsonRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"xml"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> XmlRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"yaml"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> YamlRuleConfigParser();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"properties"</span>.equalsIgnoreCase(configFormat)) &#123;</span><br><span class="line">      parser = <span class="keyword">new</span> PropertiesRuleConfigParser();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parser;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在上面的代码实现中，我们每次调用 <code>RuleConfigParserFactory</code> 的 <code>createParser()</code> 的时候，都要创建一个新的 parser。</li>
<li>实际上，如果 parser 可以服用，为了节省内存和对象创建的时间，我们可以将 parser 事先创建好缓存起来。</li>
<li>当调用 createParser() 函数的时候，我们从缓存中取出 parser 对象直接使用。</li>
<li>有点类似于，单利模式 和 简单工厂模式 的结合。作为简单工厂模式的第二种实现方式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, RuleConfigParser&gt; cachedParsers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    cachedParsers.put(<span class="string">"json"</span>, <span class="keyword">new</span> JsonRuleConfigParser());</span><br><span class="line">    cachedParsers.put(<span class="string">"xml"</span>, <span class="keyword">new</span> XmlRuleConfigParser());</span><br><span class="line">    cachedParsers.put(<span class="string">"yaml"</span>, <span class="keyword">new</span> YamlRuleConfigParser());</span><br><span class="line">    cachedParsers.put(<span class="string">"properties"</span>, <span class="keyword">new</span> PropertiesRuleConfigParser());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IRuleConfigParser <span class="title">createParser</span><span class="params">(String configFormat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (configFormat == <span class="keyword">null</span> || configFormat.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//返回null还是IllegalArgumentException全凭你自己说了算</span></span><br><span class="line">    &#125;</span><br><span class="line">    IRuleConfigParser parser = cachedParsers.get(configFormat.toLowerCase());</span><br><span class="line">    <span class="keyword">return</span> parser;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在简单工厂模式的代码实现中，有多处 if 分支判断逻辑，违背开闭原则，但权衡扩展性和可读性，这样的代码实现在大多数情况下是没有问题的。</li>
<li>应用多态或设计模式来替代 if 分支判断逻辑，它虽然提高了代码的扩展性，更加符合开闭原则，但也增加了类的个数，牺牲了代码的可读性。</li>
</ul>
<h3 id="工厂方法"><a class="markdownIt-Anchor" href="#工厂方法"></a> 工厂方法</h3>
<ul>
<li>如果非要去除掉代码中的 if 分支逻辑，比较经典的方式就是利用多态。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRuleConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="function">IRuleConfigParser <span class="title">createParser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonRuleConfigParserFactory</span> <span class="keyword">implements</span> <span class="title">IRuleConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IRuleConfigParser <span class="title">createParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonRuleConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlRuleConfigParserFactory</span> <span class="keyword">implements</span> <span class="title">IRuleConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IRuleConfigParser <span class="title">createParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XmlRuleConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YamlRuleConfigParserFactory</span> <span class="keyword">implements</span> <span class="title">IRuleConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IRuleConfigParser <span class="title">createParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> YamlRuleConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesRuleConfigParserFactory</span> <span class="keyword">implements</span> <span class="title">IRuleConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IRuleConfigParser <span class="title">createParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PropertiesRuleConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>以上，就是<code>工厂方法模式</code>的典型代码实现方式。<em>这样当我们新增一种 parser 的时候，只需要新增一个实现了 IRuleConfigPArserFactory 接口的 Factory 类即可。</em>。</p>
</li>
<li>
<p>所以，<strong>工厂方法比起简单工厂模式更加符合开闭原则。</strong></p>
</li>
<li>
<p>但是这里面存在一个问题，就是上层使用类，又会变为初版那样工厂对象的创建逻辑耦合进了 load() 函数</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigSource</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> RuleConfig <span class="title">load</span><span class="params">(String ruleConfigFilePath)</span> </span>&#123;</span><br><span class="line">    String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath);</span><br><span class="line"></span><br><span class="line">    IRuleConfigParserFactory parserFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"json"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parserFactory = <span class="keyword">new</span> JsonRuleConfigParserFactory();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"xml"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parserFactory = <span class="keyword">new</span> XmlRuleConfigParserFactory();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"yaml"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parserFactory = <span class="keyword">new</span> YamlRuleConfigParserFactory();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"properties"</span>.equalsIgnoreCase(ruleConfigFileExtension)) &#123;</span><br><span class="line">      parserFactory = <span class="keyword">new</span> PropertiesRuleConfigParserFactory();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRuleConfigException(<span class="string">"Rule config file format is not supported: "</span> + ruleConfigFilePath);</span><br><span class="line">    &#125;</span><br><span class="line">    IRuleConfigParser parser = parserFactory.createParser();</span><br><span class="line"></span><br><span class="line">    String configText = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//从ruleConfigFilePath文件中读取配置文本到configText中</span></span><br><span class="line">    RuleConfig ruleConfig = parser.parse(configText);</span><br><span class="line">    <span class="keyword">return</span> ruleConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getFileExtension</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...解析文件名获取扩展名，比如rule.json，返回json</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"json"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>解决方法：<strong>我们可以为工厂类再创建一个简单工厂，也就是工厂的工厂，用来创建工厂类对象。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RuleConfigParserFactoryMap 类是创建工厂对象的工厂类，getParserFactory() 返回的是缓存好的单例工厂对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigSource</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> RuleConfig <span class="title">load</span><span class="params">(String ruleConfigFilePath)</span> </span>&#123;</span><br><span class="line">    String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath);</span><br><span class="line"></span><br><span class="line">    IRuleConfigParserFactory parserFactory = RuleConfigParserFactoryMap.getParserFactory(ruleConfigFileExtension);</span><br><span class="line">    <span class="keyword">if</span> (parserFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRuleConfigException(<span class="string">"Rule config file format is not supported: "</span> + ruleConfigFilePath);</span><br><span class="line">    &#125;</span><br><span class="line">    IRuleConfigParser parser = parserFactory.createParser();</span><br><span class="line"></span><br><span class="line">    String configText = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//从ruleConfigFilePath文件中读取配置文本到configText中</span></span><br><span class="line">    RuleConfig ruleConfig = parser.parse(configText);</span><br><span class="line">    <span class="keyword">return</span> ruleConfig;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getFileExtension</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...解析文件名获取扩展名，比如rule.json，返回json</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"json"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为工厂类只包含方法，不包含成员变量，完全可以复用，</span></span><br><span class="line"><span class="comment">//不需要每次都创建新的工厂类对象，所以，简单工厂模式的第二种实现思路更加合适。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleConfigParserFactoryMap</span> </span>&#123; <span class="comment">//工厂的工厂</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, IRuleConfigParserFactory&gt; cachedFactories = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    cachedFactories.put(<span class="string">"json"</span>, <span class="keyword">new</span> JsonRuleConfigParserFactory());</span><br><span class="line">    cachedFactories.put(<span class="string">"xml"</span>, <span class="keyword">new</span> XmlRuleConfigParserFactory());</span><br><span class="line">    cachedFactories.put(<span class="string">"yaml"</span>, <span class="keyword">new</span> YamlRuleConfigParserFactory());</span><br><span class="line">    cachedFactories.put(<span class="string">"properties"</span>, <span class="keyword">new</span> PropertiesRuleConfigParserFactory());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IRuleConfigParserFactory <span class="title">getParserFactory</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span> || type.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IRuleConfigParserFactory parserFactory = cachedFactories.get(type.toLowerCase());</span><br><span class="line">    <span class="keyword">return</span> parserFactory;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="问题什么时候该用工厂方法模式而非简单工厂模式"><a class="markdownIt-Anchor" href="#问题什么时候该用工厂方法模式而非简单工厂模式"></a> 问题：什么时候该用工厂方法模式，而非简单工厂模式？</h4>
<ul>
<li>基于单一职责的设计思想，当创建对象逻辑比较复杂，不只是简单的 new 一下就可以，而是要组合其他类对象，做各种初始化操作的时候，我们推荐使用工厂方法模式，将复杂的创建逻辑拆分到多个工厂类中，让每个工厂类都不至于过于复杂。</li>
<li>而使用简单工厂模式，将所有的创建逻辑都放到一个工厂类中，会导致这个工厂类变得很复杂。</li>
<li>如果对象不可复用，那工厂每次都要返回不同的对象：
<ul>
<li>使用简单工厂模式实现，包含 if 分支逻辑的实现方式。</li>
<li>避免 if-else 分支逻辑，就推荐使用工厂方法模式。</li>
</ul>
</li>
</ul>
<h3 id="抽象工厂"><a class="markdownIt-Anchor" href="#抽象工厂"></a> 抽象工厂</h3>
<ul>
<li>场景：
<ul>
<li>在简单工厂和工厂方法模式中，解析器只根据配置文件格式来分类，但是，如果类有两种分类方式，比如，我们既可以按照配置文件格式来分类，也可以按照解析的对象来分类。</li>
<li>针对这种特殊的场景，如果还是继续用工厂方法来实现的话，我们需要针对每个 parser 都编写一个工厂类。如果未来还需要增加针对业务配置的解析器，那就要再对应地增加工厂类。</li>
</ul>
</li>
<li>过多的类会让系统难维护。</li>
<li>解决方式：
<ul>
<li>抽象工厂针对这种特殊的场景诞生。我们可以让一个工厂负责创建过个不同类型的对象，而不是只创建一种 parser 对象。</li>
<li>这样可以有效地减少工厂类的个数。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="function">IRuleConfigParser <span class="title">createRuleParser</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">ISystemConfigParser <span class="title">createSystemParser</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//此处可以扩展新的parser类型，比如IBizConfigParser</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonConfigParserFactory</span> <span class="keyword">implements</span> <span class="title">IConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IRuleConfigParser <span class="title">createRuleParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonRuleConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ISystemConfigParser <span class="title">createSystemParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonSystemConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlConfigParserFactory</span> <span class="keyword">implements</span> <span class="title">IConfigParserFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IRuleConfigParser <span class="title">createRuleParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XmlRuleConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ISystemConfigParser <span class="title">createSystemParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XmlSystemConfigParser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略YamlConfigParserFactory和PropertiesConfigParserFactory代码</span></span><br></pre></td></tr></table></figure>
<h4 id="应用工厂模式最本质的参考标准"><a class="markdownIt-Anchor" href="#应用工厂模式最本质的参考标准"></a> 应用工厂模式最本质的参考标准：</h4>
<ol>
<li><strong>封装变化</strong>：创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明；</li>
<li><strong>代码复用</strong>：创建代码抽离到独立的工厂类之后可以复用；</li>
<li><strong>隔离复杂性</strong>：封装复杂的创建逻辑，调用者无需了解如何创建对象；</li>
<li><strong>控制复杂度</strong>：将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁；</li>
</ol>
<h3 id="为什么没事不要随便用工厂模式创建对象"><a class="markdownIt-Anchor" href="#为什么没事不要随便用工厂模式创建对象"></a> 为什么没事不要随便用工厂模式创建对象</h3>
<h3 id="工厂模式和依赖注入容器"><a class="markdownIt-Anchor" href="#工厂模式和依赖注入容器"></a> 工厂模式和依赖注入容器</h3>
<h4 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h4>
<ol>
<li>工厂模式中，一个工厂类只负责某个类对象或者某一组相关类对象（继承自同一抽象类或者接口的子类）的创建；</li>
<li>DI 容器负责的是整个应用中所有类对象的创建；</li>
<li>DI 容器还需要负责配置类的解析、对象声明周期的管理；</li>
</ol>
<h4 id="di-容器的核心功能"><a class="markdownIt-Anchor" href="#di-容器的核心功能"></a> DI 容器的核心功能</h4>
<h5 id="1-配置解析"><a class="markdownIt-Anchor" href="#1-配置解析"></a> 1. 配置解析</h5>
<ul>
<li>背景：
<ul>
<li>在工厂模式中，工厂类要创建哪个类对象是事先确定好的，并且是写死在工厂类代码中的。作为一个通用的框架来说， <strong>框架代码跟应用代码应该是高度解耦的，DI 容器事先并不知道应用会创建哪些对象</strong> ，不可能把某个应用要创建的对象写死在框架代码中。</li>
<li>所以，我们需要通过一种形式，让应用告知 DI 容器要创建哪些对象。</li>
</ul>
</li>
<li>做法：
<ul>
<li>将需要由 DI 容器来创建的类对象和创建类对象的必要信息，放到配置文件中。</li>
<li>容器读取配置文件，根据配置文件提供的信息来创建对象。</li>
</ul>
</li>
<li>举例：
<ul>
<li>Spring 容器的配置文件，定义 beans 的依赖关系以及位置</li>
</ul>
</li>
</ul>
<h5 id="2-对象创建"><a class="markdownIt-Anchor" href="#2-对象创建"></a> 2. 对象创建</h5>
<ul>
<li>背景：
<ul>
<li>在 DI 容器中国，如果我们给每个类都创建一个工厂列，那项目中类的个数会成倍增加，这回增加代码的维护成本；</li>
</ul>
</li>
<li>做法：
<ul>
<li>将所有类对象的创建放到一个工厂类中完成。</li>
</ul>
</li>
<li>举例：
<ul>
<li>Spring 容器中的 BeansFactory。</li>
</ul>
</li>
</ul>
<h5 id="3-对象声明周期管理"><a class="markdownIt-Anchor" href="#3-对象声明周期管理"></a> 3. 对象声明周期管理</h5>
<ul>
<li>背景：
<ul>
<li>简单工厂模式有两种实现方式：一种是每次都返回新创建的对象，另一种是每次都返回同一个事先创建好的对象，也就是所谓的单例对象。</li>
</ul>
</li>
<li>做法：
<ul>
<li>在 Spring 框架中，我们可以通过配置 scope 属性，来区分这两种不同类型的对象。<code>scope=prototype</code> 表示返回新创建的对象，<code>scope=singleton</code> 表示返回单例对象，默认返回单例；</li>
<li>Spring 框架中，可以配置对象是否支持懒加载。如果 <code>lazy-init=true</code>，对象在真正被使用到的时候才被创建；如果 <code>lazy-init=false</code>，对象在应用启动的时候就事先创建好。</li>
<li>配置对象的 <code>init-method</code> 和 <code>destroy-method</code> 方法，如： <code>init-method=loadProperties()</code>，<code>destroy-method=updateConfigFile()</code>。
<ul>
<li>在 DI 容器在创建好对象之后，会主动调用 <code>init-method</code> 属性指定的方法来初始化对象。</li>
<li>在对象被最终销毁之前，DI 容器会主动调用 <code>destroy-method</code> 属性指定的方法来做一些清理工作，比如释放数据库连接池、关闭文件。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="实现一个简单的-di-容器"><a class="markdownIt-Anchor" href="#实现一个简单的-di-容器"></a> 实现一个简单的 DI 容器</h3>
<ul>
<li>核心逻辑：
<ul>
<li>配置文件解析</li>
<li>根据配置文件通过 <strong>反射</strong> 语法来创建对象</li>
</ul>
</li>
</ul>
<h4 id="1-最小原型设计"><a class="markdownIt-Anchor" href="#1-最小原型设计"></a> 1. 最小原型设计</h4>
<ul>
<li>在最小原型设置中，配置文件中支持的配置语法仅限配置 <code>beans&gt;bean.id.class.scope.lazy-init&gt;constructor-arg.type.value.ref</code></li>
<li>使用示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">            <span class="string">"beans.xml"</span>);</span><br><span class="line">    RateLimiter rateLimiter = (RateLimiter) applicationContext.getBean(<span class="string">"rateLimiter"</span>);</span><br><span class="line">    rateLimiter.test();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-提供执行入口"><a class="markdownIt-Anchor" href="#2-提供执行入口"></a> 2. 提供执行入口</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">  <span class="function">Object <span class="title">getBean</span><span class="params">(String beanId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> BeansFactory beansFactory;</span><br><span class="line">  <span class="keyword">private</span> BeanConfigParser beanConfigParser;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.beansFactory = <span class="keyword">new</span> BeansFactory();</span><br><span class="line">    <span class="keyword">this</span>.beanConfigParser = <span class="keyword">new</span> XmlBeanConfigParser();</span><br><span class="line">    loadBeanDefinitions(configLocation);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(String configLocation)</span> </span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      in = <span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">"/"</span> + configLocation);</span><br><span class="line">      <span class="keyword">if</span> (in == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can not find config file: "</span> + configLocation);</span><br><span class="line">      &#125;</span><br><span class="line">      List&lt;BeanDefinition&gt; beanDefinitions = beanConfigParser.parse(in);</span><br><span class="line">      beansFactory.addBeanDefinitions(beanDefinitions);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> log error</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> beansFactory.getBean(beanId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ClassPathXmlApplicationContext 负责组装 BeansFactory 和 BeanConfigParser 两个类；</li>
<li>执行流程：
<ul>
<li>从 classpath 中加载 XML 格式的配置文件，通过 BeanCofigParser 解析为统一的 BeanDefinition 格式；</li>
<li>然后，BeansFactory 根据 BeanDefinition 来创建对象；</li>
</ul>
</li>
</ul>
<h4 id="3-配置文件解析"><a class="markdownIt-Anchor" href="#3-配置文件解析"></a> 3. 配置文件解析</h4>
<ul>
<li>配置文件解析主要包含 BeanConfigParser 接口和 XmlBeanConfigParser 实现类，负责将配置文件解析为 BeanDefinition 结构，以便 BeansFactory 根据这个结构来创建对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanConfigParser</span> </span>&#123;</span><br><span class="line">  <span class="function">List&lt;BeanDefinition&gt; <span class="title">parse</span><span class="params">(InputStream inputStream)</span></span>;</span><br><span class="line">  <span class="function">List&lt;BeanDefinition&gt; <span class="title">parse</span><span class="params">(String configContent)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlBeanConfigParser</span> <span class="keyword">implements</span> <span class="title">BeanConfigParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;BeanDefinition&gt; <span class="title">parse</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    String content = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span>...</span></span><br><span class="line">    <span class="keyword">return</span> parse(content);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;BeanDefinition&gt; <span class="title">parse</span><span class="params">(String configContent)</span> </span>&#123;</span><br><span class="line">    List&lt;BeanDefinition&gt; beanDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span>...</span></span><br><span class="line">    <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanDefinition</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String className;</span><br><span class="line">  <span class="keyword">private</span> List&lt;ConstructorArg&gt; constructorArgs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> Scope scope = Scope.SINGLETON;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> lazyInit = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">// 省略必要的getter/setter/constructors</span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope.equals(Scope.SINGLETON);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Scope &#123;</span><br><span class="line">    SINGLETON,</span><br><span class="line">    PROTOTYPE</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorArg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRef;</span><br><span class="line">    <span class="keyword">private</span> Class type;</span><br><span class="line">    <span class="keyword">private</span> Object arg;</span><br><span class="line">    <span class="comment">// 省略必要的getter/setter/constructors</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-核心工厂类设计"><a class="markdownIt-Anchor" href="#4-核心工厂类设计"></a> 4. 核心工厂类设计</h4>
<ul>
<li>BeansFactory 根据从配置文件解析得到的 BeanDefinition 来创建对象。</li>
<li>如果对象的 scope 属性是 singleton，那对象创建之后会缓存在 singletonObjects 这样一个 map 中，下次再请求此对象的时候，直接从 map 中取出返回，不需要重新创建。</li>
<li>如果对象的 scope 属性是 prototype，那每次请求对象，BeansFactory 都会创建一个新的对象返回。</li>
<li><strong>BeansFactory 创建对象用到的主要技术点是 Java 中的反射语法。</strong></li>
<li>代码示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeansFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> ConcurrentHashMap&lt;String, BeanDefinition&gt; beanDefinitions = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBeanDefinitions</span><span class="params">(List&lt;BeanDefinition&gt; beanDefinitionList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitionList) &#123;</span><br><span class="line">      <span class="keyword">this</span>.beanDefinitions.putIfAbsent(beanDefinition.getId(), beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitionList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (beanDefinition.isLazyInit() == <span class="keyword">false</span> &amp;&amp; beanDefinition.isSingleton()) &#123;</span><br><span class="line">        createBean(beanDefinition);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanId)</span> </span>&#123;</span><br><span class="line">    BeanDefinition beanDefinition = beanDefinitions.get(beanId);</span><br><span class="line">    <span class="keyword">if</span> (beanDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchBeanDefinitionException(<span class="string">"Bean is not defined: "</span> + beanId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> createBean(beanDefinition);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@VisibleForTesting</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beanDefinition.isSingleton() &amp;&amp; singletonObjects.contains(beanDefinition.getId())) &#123;</span><br><span class="line">      <span class="keyword">return</span> singletonObjects.get(beanDefinition.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object bean = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class beanClass = Class.forName(beanDefinition.getClassName());</span><br><span class="line">      List&lt;BeanDefinition.ConstructorArg&gt; args = beanDefinition.getConstructorArgs();</span><br><span class="line">      <span class="keyword">if</span> (args.isEmpty()) &#123;</span><br><span class="line">        bean = beanClass.newInstance();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class[] argClasses = <span class="keyword">new</span> Class[args.size()];</span><br><span class="line">        Object[] argObjects = <span class="keyword">new</span> Object[args.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.size(); ++i) &#123;</span><br><span class="line">          BeanDefinition.ConstructorArg arg = args.get(i);</span><br><span class="line">          <span class="keyword">if</span> (!arg.getIsRef()) &#123;</span><br><span class="line">            argClasses[i] = arg.getType();</span><br><span class="line">            argObjects[i] = arg.getArg();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BeanDefinition refBeanDefinition = beanDefinitions.get(arg.getArg());</span><br><span class="line">            <span class="keyword">if</span> (refBeanDefinition == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchBeanDefinitionException(<span class="string">"Bean is not defined: "</span> + arg.getArg());</span><br><span class="line">            &#125;</span><br><span class="line">            argClasses[i] = Class.forName(refBeanDefinition.getClassName());</span><br><span class="line">            argObjects[i] = createBean(refBeanDefinition);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bean = beanClass.getConstructor(argClasses).newInstance(argObjects);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException</span><br><span class="line">            | InstantiationException | NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationFailureException(<span class="string">""</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bean != <span class="keyword">null</span> &amp;&amp; beanDefinition.isSingleton()) &#123;</span><br><span class="line">      singletonObjects.putIfAbsent(beanDefinition.getId(), bean);</span><br><span class="line">      <span class="keyword">return</span> singletonObjects.get(beanDefinition.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h3>
<blockquote>
<p>BeansFactory 类中的 createBean() 函数是一个递归函数。当构造函数的参数是 ref 类型时，会递归地创建 ref 属性指向的对象。如果我们在配置文件中错误地配置了对象之间的依赖关系，导致存在循环依赖，那 BeansFactory 的 createBean() 函数是否会出现堆栈溢出？又该如何解决这个问题呢？</p>
</blockquote>
<ul>
<li>demo 位于当前目录下的 <code>dependencycircle</code> 目录下</li>
</ul>
<h2 id="share分享一篇有观点的文章"><a class="markdownIt-Anchor" href="#share分享一篇有观点的文章"></a> Share——分享一篇有观点的文章</h2>
<ul>
<li><a href="https://coolshell.cn/articles/20977.html" target="_blank">[ 程序员如何把控自己的职业 ]</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> ARTS </tag>
            
            <tag> 打卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2021年度计划及目标]]></title>
      <url>http://tech.noexception.cn/2021/01/25/2021-purpose/</url>
      <content type="html"><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="勤劳温柔，还善良" />
    <label for="pass">勤劳温柔，还善良</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1/F+mTOQQaLjassQoLawIxMepySGvnMbOWJObwjjhucvTO8ksJbeCypup6HGviishrePPqMJjptiEudGG1imeVSyzQsD6wGyswksNTdwbINv3We0KZdg1QLkSCspq4ktR+KzbwytjMZDZztA5ipthfgCzYGxuNZNO6ly4vE2+BrF8ACcz1IPdKH6GnLvcF+XCD12ZrgthEWIaV8HBpWYqUf5EtFszS6qQ1ra5VNS+faZPAYP9x96lmC5ijSlvK3jvUeOZoBaE9TV5I+kKfsn1tk7hcNlSoawJ29tic/WFbC0k01niFIdMcxQ0xs8C6Wne51gOG1HGa+wfS6RfAJvh85knI6PUjTFgi/vFhXSeo5otdL1s99SpS2Sgx7XRFVXKbeohhi5EN9cPMnTtmdBO/GWXCR8Pyes8/egvJWqKmvxRlNuSlZm7YNk3y3zud3eN5XaOqNbqT+neg7+SDRT9jmXVbOb9FaOtNk6Y7FV+mm/TUBmosB3UJ1CwPLHGQHR8r6oYpdgqBSANHXz6HzP6YQCtM5HsNB/kJ+DHpaZHrJbV4ffN8V5w77ugpZlVTy8rje4sbDdYa2M/VzALMJEah5klDcMQXsy6TkDjF5OGFIHlTLAT8HnM4s
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
        
        <tags>
            
            <tag> 规划 </tag>
            
            <tag> 目标 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[先定一个小目标]]></title>
      <url>http://tech.noexception.cn/2020/07/07/one-purpose/</url>
      <content type="html"><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="勤劳温柔，还善良" />
    <label for="pass">勤劳温柔，还善良</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1841G27lPCmbkOZAyyiELkGkdagtyIsSi5cpOUneynD3Q1yC2FQccY4VnGnQeSAsHdWLAFvNWzdfkkng8tz7w1Djr6XW/yKuKU77D2+w5vVc0OIfYJt3d6N1LmvRtC5qhmVPrrLE+QeRXq6KbqgCo/vy8MUy65vI+VhhjmQzIeKLw9dLxWNtRjX70dMieuj9S9zS/k+2KgP/Hk5LfZ0mJbCVE+20NhLW2z90S0XiwwythsvCb+3S0GQc39GzdaYOKcBhKbVhdY85URJ1P/stsSpWHbFk0uP/MIGKF5ikX3cl51x3YXAa7q/tEvkXHe38BI5hZTY1nojdyqa9r5bFKDk8uUnIpIcB3XdTZ4AOrgYt/kcNQOwAweUrtUMhb+DOiRzJIvWpunA5dqCWwr+kinM3feUknlJR/rlH30P8PX64Q1d3mJjpFDoz5CA+Stu1PNkSGSxTyGeZVJ4uZlZ7xFvjNyIlPT3SDQjo4dkcdM8o6GZsr5Gkxtm1ba2Aj28ZGMH59c/GZUB9oJSbNjsOivYLvqJR50/LcFbfbwcU5CbL/vatRH56kpLS83z6NUP+X/nKHoO+Zi0jzmpnTzUSymmWNWOLNEun6GB3ogK0MkXAsOFPBTeA92bksNrbsQThx4mMExz8I6+sEpS1OpUU2+ULr7TGzugOVDoAse3YN1U4QbBmQkKsNTHCuUGKrjlCxwJTaSXXvfhcEjD4L+L71BjdJvyVqI4ciOxi/59yK+X4xMUAAylXixaRNGDqaDmSB3tl448/ahfjY9i71O/pPzW8lHHyJ5DbDhZzY1LF18l11ZKrviLCV5xiK3Y0Tv6ISTv2lkkhAU/+/arOPi4Shze+ESoH22aiv8uOhKPVbemyUc2yDDUTQAWFz3/GOC0RFO5oO8bXBYTBgs9/kVGvXE3MQNktsh3jf6crpi4O5Z8IqFwLJUyiwS/syEv3Zu5wNkOeTeUL2XauW5PHO6qEhly9Uo4V955H7p4eMiW0mFVrFf44QDh9jrF+3YRoIBrg5cGp7VCkkrXk65cRVOcmjoGZDrj82V9y0odnpelrfEoJeUin3mCq9zNT7DBCIp4bH1F3KfDlWyJWO26nmJ6SApvFiqTnpWrYykOi6BVBcREO7K5u7ojJK8JqIN8FWVMFXySGEZ2YlCaqj0sMVTkUUWhXLcrR0iFxhfpP4ZM2eM9YMLY+nfIDrrthgp8qhy8+2Br7KguV8QQ+E5IQw283SMAk8KwzLiS0eyrN5tdqxlmW7YP6bNUQMjQ24twRLYlunjB7lK5EtlY9HOcopcReR+XIT2xotWUkSyR5X96IwcjM6bbmb3h6/583dmceJBYGDCNEAwlEDQXsExA79Yux6BRH01GRK94S4PoeCEMvm1Cjx+zDZG9kjNpP2xWn4wLpxlzG8CiZw0cbw58qz0CegUwU6r0YubtpksWTDHBwvnUdBNF1QrqkTf9vkPUHDAUzTCIOi/GP3sDOTERqCD9bMu9+/TLn9Qwz7CH1CVk7/yo6pnf2H0r1SOIj7azqpTnKO1H3eGiK9ZHmtZLAXChYUHrP8lijFD5kqBSiD6dhMvEFyYRhTw6aXEf3QVENuasJHntP8DZCsalXzSiRvIRt6FQNHr+q/RyUQ8UWjuc/LIM8EzDkd9GjYTP1w3SoFb2hg5Te+SgQtYO7y0HLowiB/pvnv599DZgeWq8idP1I69L7XbZODA5n1tGU/PXHslNwgfLCd5V4OaevwhYMDI3wEf+UJKSjxZDgzVMzc1BjhSJnpBeI7JRorwKcjKi8MqyBr5j/6fq4bIYmOjUEljhkioEjZA80DEgGsusnv+RghhPUbQZwkp5INnq86VRwgvTdS89jELBCz+e+A7WyhVAAYB78oVYGymAuFyLUUpuz9UakWAgJZ7oRsrG0xzl0tjIgGWe883sqhwiFJA9jp0NmUPluLaKfBJXEifR7xp/sOQprZ2OweCvh+O7R9PuVqqgv15WimRTQIsdm9ziyNWnsODPRn9xlo66qlhThG5zCEs0ge7Wwxg+hQOwFUBlGa90Ulo1/nLYrEsoCv4d999ZGF4Kc7CMt41adtgQVSh7y0PmyQH36OSyknZ7rFyHpr+iCDPpVhJ9liT4A3OB6h3bIZ3WugcPxyUaFNpv2HXbSxlVJDQ05dbXU0qmjo67/viFb8Cb7PLZVbLneqx6LhdQe+PiFuq7p18bgqoPSfrlAr2auZBRUXmc82t+ElTeSUzoQpIYiRujmlKhNZTosMs10C0g7GBJ5AO3yshA9aATXz77SHJ0djg0H7Z4OFqFpWBuf2dyjajfHtrfSTpYI4a8o41i84UtZ6Ry18h+YFW2UKQ3vmMlLYCETjFq6029Wx+bblu9ujg8wHI29zDw9iP/27sNqymVy0Nc7F69/UvDopPi43tSHvwT7jeN0mD3OZMyEVdMUwP4NA5z6IH0fWXfKYUCUA/DxciGFtuIau4t5Bda33OXIoleV+bCz++r0Lr2lB8igLhH7FKyZRr+HDdFTCcIzkrIwZm2eSbS8MmErXUxPHK9XFL0eB3bom05eS+eIKK4uflDHalJCM/vihiTGzq4IBJYzWyJqu8SKqaSCEyMKx3X9ID6K0thrdUb6SH703LmTRxvVighAJJX9qfWYhA7qoSaQeJkZb2XmFCSbC2pcwKI/aP87WqPp0BU9Xta0v1MbPdBQ4lCnXs3Bue5PU/Zlay/6/i5mzDBpjStL8eVmguJZkBib/EPKfg9JEPOu+4CUokXLMfgoz8Xw7/HRUveh/+Xx6ZjuzR+iBKFk+ElwpYGvPq03EDzXDZ/XEWvYwkCRVQ6oE0Q68F+ofLM8iCHa9yd2hIR40pQP5ML/X6OmT2p33ys5e547en4Q6el5duX6zdHtp+3/6V+Hor5PCFEfx8NzjghmSdjIZcFTg4YI/RiOte4x1Xr2VqQyEZEBKUwsWrDUlIIc76rtfzTWlnRyRg5qcLdTL77gWY5MmfR7Dh1FMZzEOgpU+uVNp4ESUgQKpz+rY6NWy06htoS+aHO7crKU3PL0RDd9FEr72zYiB0Q184nEoSvemBMzuQTqXdOMLzPxbDTgNclvYy7GgsgSLSDwtyASpxRhb5BFeiixzXLsVNZvDW1AQNcyl2ZCFPHv37Gg6ArARP2bDu14C0aBH4aJAni8hB1qHUu2Glzenok19UHuzp5nXH0lQGSpTp5zXLHjLTzYJ4sw0UlVjbvKPhNQz04nH9VDTQlmCQh1rbp94CzA1Dk7y39/KL+GqWEi/LYq7MwoncESrxjubJhQDkaZ+qGM84i/zCF99Of81I3CYKN+LFQcSXh5C8GyFd5O/RvzOPatA==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
        
        <tags>
            
            <tag> 小目标 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2019年度总结——暨2020年度计划]]></title>
      <url>http://tech.noexception.cn/2020/01/21/2020summary/</url>
      <content type="html"><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="勤劳温柔，还善良" />
    <label for="pass">勤劳温柔，还善良</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX19prMdfaUBzMZksQbKAFH5tWEyyxqzU3FmEUANapBSlc1m4RGu9/ZqAxKf4M6oEFM/TODOlxQM5L23g4Nx6HX35qluReZzNzel3loKDMfcFSfvmUfC0jWu3R78PbLtt6AJ90emLTwwpJonJoT6H599xWOrwM8u7NvhO+2tMKmRRROIJqvbPTlSfoWK2Svl1OLkV1kvqbJyXVBZmBng4oogJtVKeujEZSqg4Trji1fBerQo+78LddKAEoWoTefMHTZWeHNeEK9eNMD1dh/HKocwqM33fS85BSWhPAYEidaSckA2UNXoWX/jRshafJ9yYyA7kU69FMFyMgiL6s/KcxI3ENdcEflXHH2o1miLeafAzABCq3+If6vBTSSPtj4VZq/zULKKWDl/eaMuIu5jkPP+PcCUqI0TtqhvB4rWNEIuI1Nh+dZCDMZBWkY1AJLm5/ukf/5KLDE2DfwcHy2TAutkvHmSX31WYhsLH4btarJwq9edSSH/Kciw6vGNh0KEfb+ibXWinUTP9+EfvK0KO01IhhSmDF70PLtt3U/6ZToO4bPz73C3yI0oP5hJA7T9XJI3qlOyQHT0XcPjWQoP+hXr7Wa1oLEFH3W/DVsfQ+V/VrxS8Vj7DhuWsT965WD4HacjeWu7Lsj1gtp2oMK4bzefF22V1F0V+q+Em9MGLtP2iewDjeN/DPbUr/rFK/2KhQglxn0+bbEvLUSH7lGRQICRH7ZY+7sSqsswJ119txaIJpfl9ZoLpa4+VNSqlSoIRcw6zUm7GrAqGQgdyU2JNT4wwHm5TYZwnmLDY6mqttYEY/AtsyUPramlSiK6xo0C/4LSM21tXsi/czr5zNO0Y5PwwGFHExKiWBUMdF+AMViaMohQ7NjxX0ys+VR1w0qCWa7Rb83jV26HkhZ7qt0pko0Eiqv/MVPJNj5YpLL8c48Oqy44SULH0YbK6V7Ry9P/dU+lK1oP+oLblvX81Bml4X92f6rvk6mHRVdrR951FYwh9sLfK+Nt/6GwkykpVNwvc9n2qr5tbuxcBaUadGC8X9cYAZneUg9KSBW1AaUv6YXmXCYGoMosoQ0mCM7ilV33/AEUGbISBjmemkx5Havah27UfEkG0Mgpdsfn3Xqvgb8PV2pBaLR2NUsI4VGSY9cD2wrWvdHz30LN5xnF/zfZBYSuPazp+N0K7BAIPS2g/mUdSXsZB5zXZ8pAnbFXIUMMOpWL5B5JGsfY1h5PKL3ygxD8GztZvJGHIJyqAMdHC7zEXs4EC73jb5n2voIIs4vdD+AKZD+gNPcNa0g5/1O4S2hAz8jCTPhHjGj+rldFmJrWG05FzhuJDrP0krMKt/xG43ApkdYJercp/soJSRjoD/yhUGgtMWAcUPGV6KsWbHb97SI1VbV+JLt03vIEDXNvAJ9Zql6LgxVhl9xTX2XKPJFgZcXHVzSq3dCvLL695jPY2bpQ132zD/W3ZbSsqWVQwHEZ16sPLjJ/knmkbxjuqyh7vK+BckwevX/bXmnekbCrYEgEp1hqjAhFJ2SiHWRDpOXy+xRdghorakoxft0YMoJFll2H5wibf8JEW/tgaeCvEHqB5rV7k1MLJ9L21lR/u2tw6I9ZooIInm3vgAtD1ofScepzay7XLDpVoQLjP7qyhr9euyflegStKTnYMOl4CeB3kRl6pUqKxBsdiafOQgeVY8YcnnvB/Pp6OKHhUI3q8bXNOyVhJzfTSFUHuOB3Pi1xnO/LHeen1TOlfZ97pluKxTAbnZ1AABERBljzpsZ4FP5gWdFGjrf4beI8sJ/PwywxdHlMmXcytvNMhHWeNuVCpMWfoC9Zo4or0NFZkXZ61vmSH/TWWMsDG2PBCTkkKCaMwbkur8sfV/Utjz1JIUryTQGCXnCynBSANNeT4X63Jc3vhvw3xT5/tUaUSm+KudPJA1aapts/WlR4nfTUol1bZD8rBJzzBJxSd1woGMoCnd3qoQNO7e1hUUnLN3uv42OUeaWzw0NNPRt+7lWOFwpGTOkXgoeQ5YAStVO4WxDed7q7Qdnhgn0QpJfbwYHQ/vvB+gfekl8+SvzbQAnKn/wszdwg1U0EtTxxtzkvDfxBd9aKtcnwMxC3JrYnkTTdAsLpn8uBv1ACFqtyNQg3MVmHypcwmXgZM42bjXHX+dlP83Qg68fhYD4ov4qmdBX0PVfMSWY+E3nqAUbO5uvkfByeqEUOZtvD79DxF1K7vVKTIJTtA3ybKYBPyonECcE3XpZxAo2YhDDmouBWmzNYAsik1XAsxO9g8R3clkXbFh0W8UdSwzbtfGv7iCEzxUR2noKTu2lFVWh5J8zInj05J0fIAAFFkI97AXPf0Pm17qvYq4frIACvWr4RnGHq196OmrxvPx6Su7T/6OaUERytkq6sfcburqM/UJkuYQTzx8KsZ5UoRMV/52d+7N48FMZJ5hd2CkxmyIBFd6Bm0A5sKmTVesfhPgCcvt6Xv+UnulAqwxkRLDEr9ZXUkPZG3Sat9D+wpeQJch3EwY3iZMPiF8vC7rfo/vs9cQRJAbCDpXAViDg+PHYYrZbPEwHRtL8GV060OYZMnb4xlCQyLnWtsIX3mVh6nSqyFL3TuvojvuTE/8yh4U3jY8EawzWBp4y5A2RHnrV94vBBsVkFRp94uR2bK1Kv4Xw9r0kYiMLC28CgKbZbvWhm8Dzp3g+n9LjKzgiJW2apGF4ePg1iAvSRWG1XsF2ATAzu9v3IcbnQ7F3Cvu4+pVd4kz+aPqmGjjr5uilbUBEBtAzk3ydpG+epJeBB22tkNq3oHGwMZXHii+HwvL6vZUSJXFk7wbOF2t4iRIzkj0HAUgHEYmjAB+jhtonK/pRqi09nC/4hadD5j3MG7VG9MlaltYjr7cj43CNXsWQO1r0HZ15ol1BPTkOc8+TN9HVL3mqSuctprAvg03wbKHh39CXNusoGo1xkoTyYbkJaIMRaua5U+nNMcNkm9g+Xbvsb3uVo964Ks9W6QAkbyx4S54mSWxMcuKldvTE+q2ZURWHoEgSjvnWFBsZREFCCb2UenodSVLabE/o/OxQnOB3m3ZTBESKkGKIi6OyUWyiEgIOzHvEA4wNefFYCapKfESCTd2uuf/SRN8dmu3nvCRSnjOROxKX2kusTsofo+SjnW7+18X+D6CHPqLMG4Hg+87SYKz1/nb1XAooGFa2oWKxlDFqBy2EWIXcYF7xkjye5L5cKqWOr+TPf93ZQ5IMgq+S0wyk+jHN87g2QAFI1mTThZQfQNMWtBjNPvFtaehEJF156K6PC5AuiMVAYn8kpQybWxvgTaz1J/FefB+nHnPFBueSDqYqjK3hmlf8VV2GkbmTvwAnAPJXWml984Qs6ntB4NqqL671Orz2ZvPPX8cAJg1nY23Wn+FjbvAB9qRkNUUcqa1C9sO4ZAvqm+iYSjojfWGo8D7pZQdNR2Zi5EQPiy3mwCeqP1XfHPxJjlwQ59AkuW0GkftIgVtrn/g9FG0iFxw27lQ/7kisWcxaHZ1yP2ZPeaUFMXpzNG4sd9xrsvGEGzQdVyxFs8v0nJKJi6mT+LYyUJeMTir6dnJ0Js839TmdOxCybeTWXvEhX7YzcS4KiE35OeUeq5cfPG7icEXC9ahQKY2DlfXVE+IAraQ+ZVqzgRgwvUTONCb5YXwSs4kwpSw4LrE1daB/Kth1ERa0AW0GLLzw/6xb2JfnOBsWvHaScVvUI1UdcbblG8DhmnGJ7U7QskutPo2t5pXMDyKnSZuWoWFUGzW6nc16Bd7orluOY5f4azb37WwMksWRVG+p/UNHynPAKF8SYvszkoIGhbtFh4wpcDVMqLJMazzhgAgwJj1ZLh/qQyDmHk5BOkyQnOd44ALbOPOys07a2/Uxyv1XvCYccuaXNORsk38dQm9PBwNrb+Kj7S1RHpFB9SwVZHSPMumR5z6qD9aAp18gUsAJjJ67bv5f8MgYvFQsUaVJaT/ArLms3mcYHWS+jCQ28nXH9RtbCzGKbteaBl+PLL5DRjbJOqXKxwMe64ZUU38u4e94w/ZGnLdzaVrE+JVun8XU6Nckppp+TmH+IUuKzWdBUkM4yF9ZwpP+4BDybZbLK9qGZz3k4nOThT2ROd8C+pweWMWAcUpApXceXLdmgNmUWQTORFmNW/wp5J9F1F5c9xNuuWtBUJh/tztCg5VL1NFpobnyatVn2Yb0lKWwr9AMoj3SP81JqEhB0Nr2K7O8up5xh+NQa0JZ7eWJHZBZKwez4jZhYM2aeaM/6PYpUjSP+jU3QOO8y9sQNVe2aE8zuCmaDRbYgY2Htv6GZXbsFAEr5EI+f09iMW3hRBlRGnJZI5pOw+tIrrMs+Gw+rdKAkZOK4iPNlWf1Wo1Ue+W2buUPFzbxzuLCM2wG5rqoWgKJN3u3wGM+yzg4sV3ocTm1RJA3HENK2PsDh/DWOxPQUsNfozIGuXUhMy9YjAzUdaxqVNbNeaUmhZ371LI276utSdKX1ePLsIfX+bC+FPz2L2+4fLxIqzMI/xB6NZrHyBPDA5P/a3GHnezQJdhoc4ypxD1n0wGQVypOVYaZhMmmKi51jpFkCVb9iq4HZLSgv/4j+nVcmFC9erlAuLAMGwMSN9TTocn/MRKv3QXBSe4tkSf1jtVgArBCIp/JVsCp/M7NVpJO5Fa56SxCpEtRtu355O9LzcUw4sMbfR6T7D75T2Keo4LSgCmMATQouFvKhB8Vvg677/kUEnEgaoBJHKlRkKW2uWQbHhnk7rz7OmBpvDT0aEQCKVEInfWgCqfULSGvsOI/C1Rg/uKz/LgjD3C3Qn+tX739kn+dMOnGVgpElPS9xAtx+SXfOez0qFWPrVp5czGqPbXubx6rw5SOuCb5/301KJ
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
        
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 铸剑之路]]></title>
      <url>http://tech.noexception.cn/2019/12/29/docker-walking/</url>
      <content type="html"><![CDATA[<p>天道酬勤</p>
<a id="more"></a>
<h2 id="1-从指定的镜像运行一个容器"><a class="markdownIt-Anchor" href="#1-从指定的镜像运行一个容器"></a> 1. 从指定的镜像，运行一个容器：</h2>
<ul>
<li>命令：<code>docker run -itd -p port:port -name 'container_name' image_name</code></li>
<li>参数解析：
<ul>
<li>i: 可交互的容器</li>
<li>d: 在后台运行</li>
<li>t: 应该是允许分配一个 tty 窗口</li>
<li>p: 映射容器芋宿主机之间的端口</li>
</ul>
</li>
</ul>
<h2 id="2-在一个后台运行的容器执行命令进入交互界面并-exit-时不会将容器停止"><a class="markdownIt-Anchor" href="#2-在一个后台运行的容器执行命令进入交互界面并-exit-时不会将容器停止"></a> 2. 在一个后台运行的容器，执行命令/进入交互界面并 exit 时，不会将容器停止：</h2>
<ol>
<li>执行命令：
<ol>
<li>命令：<code>docker exec container_id_or_name want_to_exe_command</code></li>
<li>效果：会在指定的容器中执行指定的命令，并且将结果打印在控制台中</li>
</ol>
</li>
<li>进入交互界面并且 exit 时，不会将容器停止：
<ol>
<li>命令：<code>docker exec -it container_id_or_name /bin/bash</code></li>
<li>效果：进入指定容器的bash交互命令行，允许通过 exit 退出</li>
</ol>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中间件的常用命令汇总]]></title>
      <url>http://tech.noexception.cn/2019/12/29/middleware-usage/</url>
      <content type="html"><![CDATA[<p>天道酬勤</p>
<a id="more"></a>
<ul>
<li>启动ES：docker run -itd --name es -p 9200:9200 -p 9300:9300 -e “discovery.type=single-node” elasticsearch /bin/bash</li>
<li>启动消息队列：docker run -itd -p 9876:9876 rocketmqinc/rocketmq:4.2.0</li>
</ul>
<h2 id="rocketmq"><a class="markdownIt-Anchor" href="#rocketmq"></a> Rocketmq</h2>
<ol>
<li>启动 NameServer:
<ol>
<li><code>nohup sh bin/mqnamesrv &amp;; tail -f ~/logs/rocketmqlogs/namesrv.log</code></li>
</ol>
</li>
<li>启动 Broker:
<ol>
<li><code>nohup sh bin/mqbroker -n localhost:9876 &amp;; tail -f ~/logs/rocketmqlogs/broker.log</code></li>
</ol>
</li>
<li>测试发送和接受消息：
<ol>
<li>发送消息：
<ol>
<li><code>export NAMESRV_ADDR=localhost:9876; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</code></li>
</ol>
</li>
<li>接受消息：
<ol>
<li><code>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</code></li>
</ol>
</li>
</ol>
</li>
<li>关闭服务：
<ol>
<li><code>sh bin/mqshutdown broker // 停止 broker</code></li>
<li><code>sh bin/mqshutdown namesrv // 停止 nameserver</code></li>
</ol>
</li>
<li>查看集群情况：
<ol>
<li><code>./mqadmin clusterList -n 127.0.0.1:9876</code></li>
</ol>
</li>
<li>查看 broker 状态:
<ol>
<li><code>./mqadmin brokerStatus -n 127.0.0.1:9876 -b 172.20.1.138:10911</code></li>
</ol>
</li>
<li>查看 topic 列表：
<ol>
<li><code>./mqadmin topicList -n 127.0.0.1:9876</code></li>
</ol>
</li>
<li>查看 topic 状态：
<ol>
<li><code>./mqadmin topicStatus -n 127.0.0.1:9876 -t MyTopic</code></li>
</ol>
</li>
<li>查看 topic 路由：
<ol>
<li><code>./mqadmin topicRoute -n 127.0.0.1:9876 -t MyTopic</code></li>
</ol>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一周总结（2019-09-23 ~ 2019-09-29）]]></title>
      <url>http://tech.noexception.cn/2019/09/26/2019-09-26/</url>
      <content type="html"><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="勤劳温柔，还善良" />
    <label for="pass">勤劳温柔，还善良</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
        
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 持续更新中 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2019-05-28 ARTS 分享]]></title>
      <url>http://tech.noexception.cn/2019/05/28/arts-2019-05-28/</url>
      <content type="html"><![CDATA[<p>天道酬勤</p>
<a id="more"></a>
<h2 id="aalgorithm-一道算法题"><a class="markdownIt-Anchor" href="#aalgorithm-一道算法题"></a> A——Algorithm  一道算法题</h2>
<h3 id="leetcode-852-山脉数组的顶峰索引"><a class="markdownIt-Anchor" href="#leetcode-852-山脉数组的顶峰索引"></a> LeetCode 852. 山脉数组的顶峰索引</h3>
<ul>
<li>
<p>我们把符合下列属性的数组 A 称作山脉：</p>
<ul>
<li>A.length &gt;= 3</li>
<li>存在 <code>0 &lt; i &lt; A.length - 1</code> 使得 <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>
</ul>
</li>
<li>
<p>给定一个确定为山脉的数组，返回任何满足 上述公式的 i 的值。</p>
</li>
<li>
<p><strong>提示：</strong></p>
<ol>
<li>3 &lt;= A.length &lt;= 10000</li>
<li>0 &lt;= A[i] &lt;= 10^6</li>
<li>A 是如上定义的山脉</li>
</ol>
</li>
<li>
<p><strong>解答：</strong></p>
<ul>
<li>思路：
<ul>
<li>这道题解题思路，就是找到整个数组最大的数字，在无序状态下使用二分法的话，会出现找到的不是真正的山峰的情况，如果需要重新排序，再使用二分法找到最大的元素的话，时间复杂度就多了一个 O(n) 得不偿失。使用一次遍历找到最大的元素是最快的也是符合题目要求的答案</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例 1：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：[0,1,0]</span></span><br><span class="line"><span class="comment">// 输出：1</span></span><br><span class="line"><span class="comment">// 示例 2：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：[0,2,1,0]</span></span><br><span class="line"><span class="comment">// 输出：1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;result)&#123;</span><br><span class="line">                result = A[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="rreview-阅读一篇英文文章"><a class="markdownIt-Anchor" href="#rreview-阅读一篇英文文章"></a> R——Review  阅读一篇英文文章</h2>
<h2 id="ttips-学习一个新技术点"><a class="markdownIt-Anchor" href="#ttips-学习一个新技术点"></a> T——Tips  学习一个新技术点</h2>
<h3 id="websocket"><a class="markdownIt-Anchor" href="#websocket"></a> Websocket</h3>
<h4 id="一-websocket-介绍"><a class="markdownIt-Anchor" href="#一-websocket-介绍"></a> 一、Websocket 介绍</h4>
<ul>
<li><strong>Websocket 是什么：</strong>
<ol>
<li>Websocket 是一种网络通信协议。RFC6455 定义了它的通信标准。</li>
<li>Websocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</li>
<li>Websocket 是一个 TCP 接口进行双向通信的技术，PUSH 技术类型。同时 Websocket 仍将基于 W3C 标准，目前为止，Chrome 和 Safari 的最新版本浏览器已经支持 Websocket 了。</li>
<li>ajax 轮询和 long pull 均可实现实时信息传递。
<ol>
<li>ajax 轮询的原理非常简单，让浏览器每隔几秒就发送一次请求，询问服务器是否有新信息。</li>
<li>long poll 其实原理跟 ajax 轮询差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没有收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不反悔 Response 给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</li>
</ol>
</li>
</ol>
</li>
<li><strong>场景：</strong>
<ol>
<li>最典型的的场景就是聊天室，如果使用 HTTP 协议的话，就只能轮询获取服务端有没有消息，而使用 Websocket 的话，服务端有新消息可以自动推送。</li>
</ol>
</li>
<li><strong>特点：</strong>
<ol>
<li>**较少的控制开销。**在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。在不包含扩展的情况下，对于服务器到客户端的内容，此头部大小只有2至10字节（和数据包长度有关）；对于客户端到服务器的内容，此头部还需要加上额外的4字节的掩码。相对于HTTP请求每次都要携带完整的头部，此项开销显著减少了。</li>
<li>**更强的实时性。**由于协议是全双工的，所以服务器可以随时主动给客户端下发数据。相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少；即使是和Comet等类似的长轮询比较，其也能在短时间内更多次地传递数据。</li>
<li>**保持连接状态。**与HTTP不同的是，Websocket需要先创建连接，这就使得其成为一种有状态的协议，之后通信时可以省略部分状态信息，而HTTP请求可能需要在每个请求都携带状态信息（如身份认证等）。</li>
<li>**更好的二进制支持。**Websocket定义了二进制帧，相对HTTP，可以更轻松地处理二进制内容。可以支持扩展。Websocket定义了扩展，用户可以扩展协议、实现部分自定义的子协议，如部分浏览器支持压缩等。</li>
<li>**更好的压缩效果。**相对于HTTP压缩，Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率。</li>
</ol>
</li>
</ul>
<h4 id="二-stomp-和-websocket"><a class="markdownIt-Anchor" href="#二-stomp-和-websocket"></a> 二、Stomp 和 Websocket</h4>
<ul>
<li><code>STOMP</code>（Simple Text Orientated Messaging Protocol），简单文本定向消息协议，它提供了一个可互操作的连接格式，允许 STOMP 客户端与任意 STO,P 消息代理（Broker）进行交互。STOMP 协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到了广泛的应用。</li>
<li><em>STOMP 协议分为客户端和服务端：</em>
<ul>
<li><strong>STOMP 服务端</strong>
<ul>
<li>STOMP服务端被设计为客户端可以向其发送消息的一组目标地址。STOMP协议并没有规定目标地址的格式，它由使用协议的应用自己来定义。例如，/topic/a、/queue/a、queue-a对于STOMP协议来说都是正确的。应用可以自己规定不同的格式以此来表明不同格式代表的含义。比如应用自己可以定义以/topic打头的为发布订阅模式，消息会被所有消费者客户端收到，以/user开头的为点对点模式，只会被一个消费者客户端收到。</li>
</ul>
</li>
<li><strong>STOMP 客户端</strong>
<ul>
<li>对于STOMP协议来说，客户端会扮演下列两种角色的任意一种：
<ul>
<li>作为生产者，通过 SEND 帧发送消息到指定的地址；</li>
<li>作为消费者，通过发送 SUBSCRIBE 帧到已知地址来进行消息订阅，而当生产者发送消息到这个订阅地址后，订阅该地址的其他消费者会受到通过 MESSAGE 帧受到该消息。</li>
</ul>
</li>
<li>实际上，WebSocket结合STOMP相当于构建了一个消息分发队列，客户端可以在上述两个角色间转换，订阅机制保证了一个客户端消息可以通过服务器广播到多个其他客户端，作为生产者，又可以通过服务器来发送点对点消息。</li>
</ul>
</li>
<li><strong>STOMP 帧结构</strong>
<ul>
<li>一个 STOMP 帧有三部分组成： 命令、Header（头信息）、Body（消息体）。
<ul>
<li>命令使用UTF-8编码格式，命令有SEND、SUBSCRIBE、MESSAGE、CONNECT、CONNECTED等。</li>
<li>Header也使用UTF-8编码格式，它类似HTTP的Header，有content-length、content-type等。</li>
<li>Body可以是二进制也可以是文本，Body与Header间通过一个空行（EOL）来分隔。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">COMMAND</span><br><span class="line"></span><br><span class="line">header1:value1</span><br><span class="line"></span><br><span class="line">header2:value2</span><br><span class="line"></span><br><span class="line">Body^@</span><br><span class="line"></span><br><span class="line">其中，^@表示行结束符。</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SEND</span><br><span class="line">destination:/broker/roomId/1</span><br><span class="line">content-length:57</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">"type"</span>:<span class="string">"OUT"</span>,<span class="attr">"content"</span>:<span class="string">"ossxxxxx-wq-yyyyyyyy"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 1 行：表明此帧为SEND帧，是COMMAND字段。</span></span><br><span class="line"><span class="comment">// 第 2 行：Header字段，消息要发送的目的地址，是相对地址。</span></span><br><span class="line"><span class="comment">// 第 3 行：Header字段，消息体字符长度。</span></span><br><span class="line"><span class="comment">// 第 4 行：空行，间隔Header与Body。</span></span><br><span class="line"><span class="comment">// 第 5 行：消息体，为自定义的JSON结构。</span></span><br></pre></td></tr></table></figure>
<h4 id="三-webcocket-事件"><a class="markdownIt-Anchor" href="#三-webcocket-事件"></a> 三、Webcocket 事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>事件处理程序</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>open</td>
<td>Socket onopen</td>
<td>连接建立时触发</td>
</tr>
<tr>
<td>message</td>
<td>Socket onopen</td>
<td>客户端接收服务端数据时触发</td>
</tr>
<tr>
<td>error</td>
<td>Socket onerror</td>
<td>通讯发生错误时触发</td>
</tr>
<tr>
<td>close</td>
<td>Socket onclose</td>
<td>连接关闭时触发</td>
</tr>
</tbody>
</table>
<ul>
<li>一个页面使用 Websocket 的示例：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080"</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Connection open ..."</span>); </span><br><span class="line">ws.send(<span class="string">"Hello WebSockets!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"Received Message: "</span> + evt.data);</span><br><span class="line">ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Connection closed."</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="四-spring-boot-与-websocket-整合spring-boot-websocket-聊天室"><a class="markdownIt-Anchor" href="#四-spring-boot-与-websocket-整合spring-boot-websocket-聊天室"></a> 四、Spring Boot 与 Websocket 整合(Spring Boot Websocket 聊天室)</h4>
<ol>
<li>
<p><strong>聊天室功能</strong></p>
<ul>
<li>支持用户加入聊天室，对应到 Websocket 技术就是建立连接 onopen；</li>
<li>支持用户退出聊天室，对应到 Websocket 技术就是关闭连接 onclose；</li>
<li>支持用户在聊天室发送消息，对应到 Websocket 技术就是调用 onmessage 发送消息；</li>
<li>支持异常时提示，对应到 Websocket 技术 onerror。</li>
</ul>
</li>
<li>
<p><strong>页面开发</strong></p>
<ul>
<li>前端使用 Bootstrap 渲染页面，页面内容如下：</li>
</ul>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>chat room websocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.2.1.min.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"width: 60%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> &gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>聊天室<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"message_content"</span>  <span class="attr">class</span>=<span class="string">"form-control"</span>  <span class="attr">readonly</span>=<span class="string">"readonly"</span> <span class="attr">cols</span>=<span class="string">"50"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"in_user_name"</span>&gt;</span>用户姓名 <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"in_user_name"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"user_join"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> &gt;</span>加入聊天室<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"user_exit"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span> &gt;</span>离开聊天室<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"in_room_msg"</span> &gt;</span>群发消息 <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"in_room_msg"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"user_send_all"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> &gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最上面使用textarea画一个对话框，用来显示聊天室的内容；中间部分添加用户加入聊天室和离开聊天室的按钮，按钮上面是输入用户名的入口；页面最下面添加发送消息的入口， --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面中添加 Websocket 通讯代码： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> urlPrefix =<span class="string">'ws://localhost:8080/chat-room/'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> ws = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#user_join'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = $(<span class="string">'#in_user_name'</span>).val();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> url = urlPrefix + username;</span></span><br><span class="line"><span class="actionscript">            ws = <span class="keyword">new</span> WebSocket(url);</span></span><br><span class="line"><span class="actionscript">            ws.onopen = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"建立 websocket 连接..."</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="actionscript">            ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//服务端发送的消息</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#message_content'</span>).append(event.data+<span class="string">'\n'</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="actionscript">            ws.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#message_content'</span>).append(<span class="string">'用户['</span>+username+<span class="string">'] 已经离开聊天室!'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"关闭 websocket 连接..."</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">//客户端发送消息到服务器</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#user_send_all'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> msg = $(<span class="string">'#in_room_msg'</span>).val();</span></span><br><span class="line">            if(ws)&#123;</span><br><span class="line">                ws.send(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 退出聊天室</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#user_exit'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            if(ws)&#123;</span><br><span class="line">                ws.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主要是监听三个按钮的点击事件，当用户登录、离开、发送消息是调用对应的WebSocket事件，将信息传送给服务端。同时打开页面时创建了WebSocket对象，页面会监控WebSocket事件，如果后端服务和前端通讯室将对应的信息展示在页面。 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>服务端开发</strong></p>
<ul>
<li>添加依赖</li>
</ul>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动类
<ul>
<li>启动类需要添加 <code>@EnableWebSocket</code> 开启 WebSocket 功能。</li>
</ul>
</li>
</ul>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketApplication</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(WebSocketApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>请求接收
<ul>
<li>在创建服务端消息接收功能之前，先创建一个WebSocketUtils工具类，用来存储聊天室在线的用户信息，以及发送消息的功能。定义全局变量ONLINE_USER_SESSIONS用来存储在线用户，使用ConcurrentHashMap提升高并发时效率。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 存储 websocket session</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Session&gt; ONLINE_USER_SESSIONS = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Session session, String message)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (session == <span class="keyword">null</span>) </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> RemoteEndpoint.Basic basic = session.getBasicRemote();</span><br><span class="line">      <span class="keyword">if</span> (basic == <span class="keyword">null</span>) </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> </span><br><span class="line">      &#123;</span><br><span class="line">          basic.sendText(message);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">catch</span> (IOException e) </span><br><span class="line">      &#123;</span><br><span class="line">          log.error(<span class="string">"sendMessage IOException "</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessageAll</span><span class="params">(String message)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      ONLINE_USER_SESSIONS.forEach((sessionId, session) -&gt; sendMessage(session, message));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong>Controller</strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/chat-room/&#123;username&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoomServerEndpoint</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSession</span><span class="params">(@PathParam(<span class="string">"username"</span>)</span> String username, Session session)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ONLINE_USER_SESSIONS.put(username, session);</span><br><span class="line">        String message = <span class="string">"欢迎用户["</span> + username + <span class="string">"]来到聊天室"</span>;</span><br><span class="line">        log.info(<span class="string">"用户登录 : &#123;&#125;"</span>, message);</span><br><span class="line">        sendMessageAll(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(@PathParam(<span class="string">"username"</span>)</span> String username, String message)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.info(<span class="string">"发送消息 : "</span>+message);</span><br><span class="line">        sendMessageAll(<span class="string">"用户["</span> + username + <span class="string">"] : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(@PathParam(<span class="string">"username"</span>)</span> String username, Session session)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 当前的Session移除</span></span><br><span class="line">        ONLINE_USER_SESSIONS.remove(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知其他人当前用户已经离开聊天室了</span></span><br><span class="line">        sendMessageAll(<span class="string">"用户["</span> + username + <span class="string">"]已经离开聊天室"</span>);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            log.error(<span class="string">"onClose excepiton"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable throwable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            log.error(<span class="string">"onError excepiton"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"Throwable msg &#123;&#125;"</span>, throwable.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>接受类上需要添加<code>@ServerEndpoint(&quot;url&quot;)</code>代表监听此地址的 WebSocket 信息。</li>
<li>@OnOpen注解和前端的onopen事件一致，表示用户建立连接时触发。</li>
<li>@OnMessage监听发送消息的事件。</li>
<li>@OnClose监听用户断开连接事件。</li>
<li>@OnError事件，可以在此方法内记录下错误的异常信息，并关闭用户连接。</li>
</ul>
<h2 id="sshare-分享一篇有观点和思考的技术文章"><a class="markdownIt-Anchor" href="#sshare-分享一篇有观点和思考的技术文章"></a> S——Share    分享一篇有观点和思考的技术文章</h2>
<p><a href="https://coolshell.cn/articles/19271.html" target="_blank" rel="noopener">https://coolshell.cn/articles/19271.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> ARTS </tag>
            
            <tag> 打卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARTS 每周打卡记录——2019/03/30]]></title>
      <url>http://tech.noexception.cn/2019/03/30/arts1/</url>
      <content type="html"><![CDATA[<p>路漫漫其修远兮，吾将上下而求索</p>
<a id="more"></a>
<blockquote>
<p>ARTS是什么？</br><br />
Algorithm：每周至少做一个leetcode的算法题；</br><br />
Review：阅读并点评至少一篇英文技术文章；</br><br />
Tip/Techni：学习至少一个技术技巧；</br><br />
Share：分享一篇有观点和思考的技术文章。</br></p>
</blockquote>
<h2 id="1-algorithms"><a class="markdownIt-Anchor" href="#1-algorithms"></a> 1. Algorithms</h2>
<ul>
<li>LeetCode
<ul>
<li><strong>题目：</strong> 计算给定二叉树的所有左叶子之和。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</span><br></pre></td></tr></table></figure>
<ul>
<li>解答：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumOfLeft(root, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sumOfLeft</span><span class="params">(TreeNode root, Boolean flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; flag == <span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumOfLeft(root.left, <span class="keyword">true</span>) + sumOfLeft(root.right, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-review"><a class="markdownIt-Anchor" href="#2-review"></a> 2. Review</h2>
<ul>
<li>死活打不开外国网站…暂时看看国内文章，以及自己的一些观点吧
<ul>
<li><a href="https://tech.sina.cn/i/gn/2019-03-30/detail-ihsxncvh6910257.d.html?from=wap" target="_blank" rel="noopener">淘宝宣布直播计划：今年培育200个销售额过亿直播间</a></li>
</ul>
</li>
<li>我的观点，线上购物 + 直播会很火，容易激发路人的购物欲望。</li>
</ul>
<h2 id="3-tips"><a class="markdownIt-Anchor" href="#3-tips"></a> 3. Tips</h2>
<ul>
<li>在阿里飞冰的文档里面看到的一些小规范：
<ul>
<li>提交 commti 的类型，包括以下几种
<ol>
<li>feat: 新功能</li>
<li>fix: 修复问题</li>
<li>docs: 修改文档</li>
<li>style: 修改代码格式，不影响代码逻辑</li>
<li>refactor: 重构代码，理论上不影响现有功能</li>
<li>perf: 提升性能</li>
<li>test: 增加修改测试用例</li>
<li>chore: 修改工具相关（包括但不限于文档、代码生成等）</li>
<li>deps: 升级依赖</li>
</ol>
</li>
</ul>
</li>
<li>这些小规范，有一个好处，在看 git log 的时候，很清晰明了的知道自己和其他人修改了什么内容。</li>
</ul>
<h2 id="4-share"><a class="markdownIt-Anchor" href="#4-share"></a> 4. Share</h2>
<ul>
<li><strong>Spring Autowired 与 Resource 的区别</strong></li>
<li><code>@Resource</code> 和 <code>@Autowired</code> 都是做 bean 的注入时使用，其实 <code>@Resource</code> 并不是 Spring 的注解，它的包是 <code>javax.annotation.Resource</code>, 需要导入，但是 Spring 支持该注解的注入。</li>
</ul>
<h3 id="共同点"><a class="markdownIt-Anchor" href="#共同点"></a> 共同点</h3>
<ul>
<li>两者都可以卸载字段和 setter 方法上。两者如果都写在字段上，那么就不需要再写 setter 方法。</li>
</ul>
<h3 id="不同点"><a class="markdownIt-Anchor" href="#不同点"></a> 不同点</h3>
<ol>
<li><em>@Autowired</em></li>
</ol>
<ul>
<li><code>@Autowired</code>为 Spring 提供的注解，需要导入包<code>org.springframework.beans.factory.annotation.Autowired</code>;只按照byType注入。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下面两种@Autowired只要使用一种即可</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的方法上</span></span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@Autowired</code>注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许 null 值，可以设置它的 required 属性为 false。如果我们想使用按照名称（byName）来装配，可以结合<code>@Qualifier</code>注解一起使用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualified</span>(<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><em>@Resource</em></li>
</ol>
<pre><code>- `@Resource`默认按照 ByName 自动注入，由 J2EE 提供，需要导入包`javax.annotation.Resource`。`@Resource`有两个重要的属性：name 和 type，而 Spring 将`@Resource`注解的 name 属性解析为 bean 的名字，而 type 属性则解析为 bean 的类型。所以，如果使用 name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。如果既不制定 name 也不制定 type 属性，这时将通过反射机制使用 byName 自动注入策略。
</code></pre>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下面两种@Resource只要使用一种即可</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的setter方法上</span></span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>- **注**：最好是将`@Resource`放在 setter 方法上，因为这样更符合面向对象的思想，通过 set、get 去操作属性，而不是直接去操作属性。
</code></pre>
<h3 id="resource-装配顺序"><a class="markdownIt-Anchor" href="#resource-装配顺序"></a> <code>@Resource 装配顺序</code>：</h3>
<ol>
<li>如果同时指定了 name 和 type，则从 Spring 上下文中找到唯一匹配的 bean 进行装配，找不到则抛出异常。</li>
<li>如果指定了 name，则从上下文中查找名称（id）匹配的 bean 进行装配，找不到则抛出异常。</li>
<li>如果指定了 type，则从上下文中找到类似匹配的唯一 bean 进行装配，找不到或是找到多个，都会抛出异常。</li>
<li>如果既没有指定 name，又没有指定 type，则自动按照 byName 方式进行装配；如果没有匹配，则退回一个原始类型进行匹配，如果匹配则自动装配。</li>
</ol>
<ul>
<li><strong><code>@Resource</code>的作用相当于<code>@Autowired</code>，只不过<code>@Autowired</code>按照 byName 自动注入。</strong></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> ARTS 打卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2019新年计划]]></title>
      <url>http://tech.noexception.cn/2019/01/06/2019first/</url>
      <content type="html"><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="勤劳温柔，还善良" />
    <label for="pass">勤劳温柔，还善良</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1/LHnCFos/KKneo26K3CNSjngc6TtkwIAysG/spMiMspq4kLDo9LqhUgF/kXZBcqDMWkYCVTsn1F/pQLDHUs1VkR7vuaJzngZ7UzXrSndGJf9AH7FFRu70gcdm/zWBHZQezkVsKKDfrJqh2CQYDluuKxaf+zNDd7RfjVus0jteTCBpBX4cJ+70XrpMY66i0hdvCANIU/5LNrBYGk+L77ZOWhwEWvb2Hdu2sHkWWd+iiORCxsWV9tAqx+3378/FMbEhKDBOF+n8DSeTOBUYvMYY/yeZCK3COzuJJnc3MNHiPqZdKgtplWcylOlkXdCjXX/6y2KWNmSP7EZAuPG53bJw1xaO36jPZhWAGH4r26wEYooRdVwK+rWmm/3EL/2lplnWZ2BqMST02WDMJ/qBlkL6m3n6XC9sXDuEeahvGhMJWtXMRh18TGQyLR3xaq3grnFrBttAEibiq3VQM7Xz6FIKS4TV6QcFBfLemsdp0wkeokF0IXmDJ7NxJT6orUWwB9ii6XoPI6YXlujVVH+NdY/rchDFR0+i15NeWUKvtAt5mB//cts//tqiBZ7Jf8/vMARNIYUUeubsNB26np6fRFp3bzXdHFQeWumk6nh80ue+C2yStaXJyrC4vaf+tcOqiRSYrOyNro1luwyrfxg4wMWfTiQxTKyYrdtcotZJCguFXPer8AabfkVyYP5P0DYVNCRJQmZjvx+MDBm6c7/FTH+K85ZHW8BUu1E0iUXgR1WT1DBSrdEpGG3r0atWWIWW8GtD1f+sdeyc0E3scqwDiTuxdCRwU5t4NA3VEab47s+qIdlHV436SF0hFtTShkJ6IBTzhhDAeZNVdFyMLmLYThDzmdt1ml/RI3dr5WmdD1zU0bkZZqjIxz8NLBHtwR0PTjn8xVinxJka8XYaRtjWZCSXkPsMf2N22jO3vqBP5b58sVbNbJ/+UnfQFVDa/XzpVoQi6lULSnD8WE51oPJOhiKqTcvV1cgQauXmwzWkNZmZuYgilo7UNofaNyBZctCpij2GloryCHkjL66nArtyBdYkantb1WaAnkD56PE9dvpH868d6kKNuP6oVB1CzNoMCuFXx3P4I5DdrlEqqt7T0NTjbtQdWuQ4KnfXrAwNsogVRE6FJZrY+ncRRmu0+aQ/eLHdGpz3ZBuQOjnQMaAWSTzRUmhktnaYQewOSZaSrMGmd5IPZkUpRWwKWUjb8Hdw4kA6yHr17EID6Inua6kXcnAllxVwIN9bXWmIFyK8JSTQUIzZp9YSn9o1hmdaVtmGRapHFPvQGbtaHw59iUQYzkbXzDmzG5seX8kiaXcgy+H74QHuT2ib9DX84/XeHAPzRAP9HsZotRF8M/rH8BlF+UQZuT+q9gw7bl4peWTOtNEFruvQLVLLVP9Lrm89L57B4cfNafsl5cjW8yz0GKQuRQrh9BA2EVrWTZhSwRsaedekeLkFcRV+Kp3assrCBCL8Oyv3xWaUujGoNGgnSJLZclA3iEEtUNTx5y5zKMw8p85jPUDCTWNiS8A/O/xKKNOxNe4m1TBB65CNMqWkG4oMnQ0bIvt9PhqMZIV6p2hoUDWzbt3NpIj3elc1L7i1n7yR1kY2UjT4j3/pNa+NJAUmSCo92y+1dEOJXJrnzJlf7HWChrdLF8LFmkwLrqB5g8Ge42DIaOyGSY5F0WBSzCJYFgJePdpoMrWinW0NEa3t56fWi0v0kQUcguW10iJEztkd59vbZr3HceHEObkwyy3DEIa51uwglq5tzYOmjNlWRhfrh9Mg58tUjGX5Gt8u0IEME49qYamNrXeGab1LJw7ADVtIUxw9PuR8BfoHTN7xTl8x9aHSwPRbAYbodhebsU+n1LIMghm4H+L41LeRCyRKfRA+vJeHJeVW7zJyhqAaNYpN2wi0h03Xu1Z5EMsRa6YOxfnYF1pVc29VFoGYBlSeEQCi2iWTQSBJ4k8CzZRJptH7QeSogdYA7Z6bOQtkfio38xQ+Ft0l8GFt+Y6+qYG4nwCeMVsT/z548ny6VGqzPJsBIFDlmnzp3QUcZfryAtQiWUCFJAOz25Y0AVwX6r+csZIOOj3psU3E/vMzDq/sn+GP59xm6poW6Nt5N2W5xdG2HtxTi0Cw3quvAZQndbQsekI+AdBMIcSjmYanef1Ke5xsANT6Eo0ZwaIP6fBKG0Lk5Wv60FmbWqx49MiOZ703+ZRON3JtIZTiS9OPp/9v6QxKUbtZDX9wYTMYHbguRe7gyggKEXuV2Da6lUieGHHVPLJ4ITNsVW+xr3rsvSWi2CldLw7QjFHOJsiLdtOXGHJHfIlS/ULUxs41FcoObUJvcBwCvUhjydHSXIMfkdBACT3LwVk+OcpgFUH8uxpsAVRgBEYlD2+jDl2r4OeKcbAfR8rOyuAHcdrZHTCgNp/qqgAVMDuHKKzJo2EeaqwRJYAr8aBw0GeIwzWf7acr9Oi7IGFn5gpW4b8PW+95hWyztrKaxraij4SHTqMhV/H87G43Z62xOcblQONvrHJ9cH8Qn+C1s2Hvp51SICr+5fRxZOBoY0MV2XLevcIwacAXr0tWt7sjt7QWFOpevolrixngpLufwpHDkvgQXPwWkmtN97/lhbwGJSdzzdYreaFdaBGg6SRceIjOqFwHj7zKcewzktfGKR6Q4tn9rWA+cGZYzg1knlYrwjTNbevOAi/VgZIJJDe3gkYoiLRAw9gXifp0iooqOqnhBgMNgc9xW9YjELHFfH+bSS/dml+w4gCTYKpRpYDSGB4RxEWaEFb8LQXImWF+75iS8AXtn+O8h0H/A8gRK2njHl9UJZfR/9GNXq6CLDSYSEJ+1G/QNLdRfdDn+MP+kvUq0dAdGkF2uKdvDVpKZ+2jmvCLMOlqJAXR5zXLYsXxPffv4XHVgsMeJAYQv76bMmfH+txLmVXBbpAD2retknMhvs8ml1YGdBReozgxk60lwaAfjNfF2wf56bmbZB60sP9jmOTOtcc6RJUCUhCHqODxehK1fnjNBaLZZ63Tdh1hqCSTY+ehvznOWicDFrBfZrzRADqj2GHpcY8y3E/JGCgxUOk+vOu2X+rqxz6ja6X7TbH+uWozK4DNxwKVaP6PHgT1CPKcIN0Vh0XR2HknK4CEBf9GTtUmG5rcDZ31NlE2OQvmdKa8ItgCAvYDtt2AuBmdnr+rTtjs=
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
        
        <tags>
            
            <tag> 新年计划 </tag>
            
            <tag> 算旧账 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[丢失的文章记录]]></title>
      <url>http://tech.noexception.cn/2018/10/01/logbefore/</url>
      <content type="html"><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="世界上最美丽的人是谁." />
    <label for="pass">世界上最美丽的人是谁.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1/EWHbApEWz2IrnyftAjl7K99btcQSnP5iXQ0CJ/6YRivlECoVg5D0rB0bTuA0Iqt28UXWKRyIlt5Xqd9bDi7EbPPNQRTN1fSgeETC6E3FmTmqpX3wMZ+8fah1x6O7bUAH0RuaaUgdbcvlaE+v9Ns6c9Szvr9TsH/dZ7bouVF0CvGAsEu3YhaySRZSTIGbd7FU1gDkRsnmRadjaB9yKin+zQm6e4YwYn3qzrzulLXuNOrjA8cp77knGoc313k9nSKnWQN4h51SWnG/r6mcr4YG3HInDfOl99GeSMrOy3NHhRAXm7GY6JTiIB+RQCMyBkOP5M4uu4b6YOKRXtw68oyHtvfkI/tJGuqmrzc0jxG+7TEkwxfvyhOmcvaLAL2FiXqz2zNScrrquYlfkdiVu+5mFfUAbhhNTX29tYjg9kfBzFXbuimSCetcXAhPgKAzxnVIjle8rigT0OHMT2JW3aYU+T6GvtOTFV+CKHzouqVrqxTtinBw2FxK6L9xEwtf9Iba1giQCIdE9tN6+oP9YFDwbwsWjPoCjTBo39EUtziI0MSGm6x1tGL6fYxHGTUqgkcT9NB/nk7iVk2nP+rNDE/TuE2WqGuFqlLdXmz4UGG2A7QQ/M6SQ7KoU6t8vU3/nFSVPcUzXvVoEKeBlyoaB5aaU7v2eqfmRvZeaZHby1Qp6OMlKQWyyZdDGpuoCbZAjKLfRDzKswktZjhOrQhkd8jdtpOw2/HAYaxUrWI4ET4bZCZ3ZwAMC7oJ9lFibTPQZt6T5ZlpWhc/wdOq/e9Pqm37R6mTSNAW0Qq6giJqo0o1gkHjdDZnWxq3E/Qa7LLyzuozWjROcUsXnftwS/UbVtxNeKaf+XgbyMKClQQkrU+nFggP+u7pT+TMlK8PLaAiygG3VOFnd5Ue47ZvSmZJjzjIKsgkRLApGH8Ai1TG61vSbfZc+jzlqJYcrn3iFFEk5s3GWpqHWh+4KttIUsSE/OSLtyTb98ATyfYQAnR1LCvk+TCmnvCDas/z18U4DFZzBaMc0hW9VNPMLDuql+Uv39WYfMlaVyLLQJH1TBuaWzio+goTunHpf+JP2Zg6djo603eJ6n6T4UNBVrDXFe4re1ItUWE1X/xld7jOe+YYKngaTvHMwkRO7vHfZtNYHij5uDuI7/OOVBZGM4K97gG5WMQCSpBDKMz4HGMMgnny7B3SGzs5ewTp9/dHpA50E86XrRFZBqj/dc/H3IgPjQ9ry6O3O3no1LXBBPBQVDYiJozIVuiUDl0nvQqMKoOI6PIKREs6HnwmW4h9xTKAMpz7b8i0a8LP0qBonon1KanCuO8/invpzd3RaIHXsWBHxa2IFTjLHe3CmO7yYVnj8PGUMGw6cirN/EpDoE+3WE9jcRuKw9dEKo2FiN5fboCxnj3VTqv6xdUeVYNclha1vsF7lHxQ7YElk5JGCnQTzBwTDnyH7IS9Ew4RAuxGd
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL 特性]]></title>
      <url>http://tech.noexception.cn/2017/04/13/SQLAdavance/</url>
      <content type="html"><![CDATA[<p>关于高级 SQL 特性的读书笔记整理</p>
<a id="more"></a>
<h1 id="约束"><a class="markdownIt-Anchor" href="#约束"></a> 约束</h1>
<ul>
<li>约束(constraint)：管理如何插入或处理数据库数据的规则。</li>
</ul>
<h2 id="主键"><a class="markdownIt-Anchor" href="#主键"></a> 主键</h2>
<ul>
<li>主键是一种特殊的约束，用来保证一列中的值是唯一的，而且永不改动。</li>
<li>主键要满足的条件：
<ol>
<li>任意两行的主键值都不同。</li>
<li>每行都具有一个主键值（即列中不允许 NULL 值）</li>
<li>包含主键值的列从不修改或更新。</li>
<li>主键值不能重用。如果表中删除某一行，其主键值不分配给新行。</li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在建表时定义主键：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line">(</span><br><span class="line">    cum1	<span class="built_in">CHAR</span>(<span class="number">10</span>)	<span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">	cum2	<span class="built_in">CHAR</span>(<span class="number">10</span>)	<span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定于主键的第二种方法：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename </span><br><span class="line"><span class="keyword">CONSTRAINT</span> PRIMARY <span class="keyword">KEY</span> (cum1);</span><br><span class="line"><span class="comment">-- 注意：在 SQLite 中不允许使用 ALTER TABLE 定义键，要求在初始的 CREATE TABLE 语句中定义它们。</span></span><br></pre></td></tr></table></figure>
<h2 id="外键"><a class="markdownIt-Anchor" href="#外键"></a> 外键</h2>
<ul>
<li>
<p>外键是表中的一列，其值必须列在另一表中的主键中。外键是保证引用完整性的极其重要的部分。</p>
</li>
<li>
<p>《SQL 必知必会》 中的例子：</p>
<ul>
<li>Orders 表将录入到系统的每个订单作为一行包含其中。顾客信息存储在 Customers 表中。 Orders 表中订单通过顾客 ID 与 Customers 表中的特定行相关联。顾客 ID 为 Customers 表的主键，每个顾客都有唯一的 ID。订单号为 Orders 表的主键，每个订单都有唯一的订单号。</br>Order 表中顾客 ID 列的值不一定是唯一的。如果某个顾客有多个订单，则有多个行具有相同的顾客 ID （虽然每个订单都有不同的订单号）。同事，Orders 表中顾客 ID 列的合法值为 Customers 表中顾客的 ID。</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在建表语句中定义外键：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">	order_num	<span class="built_in">INTEGER</span>		<span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">	order_date	DATETIME	<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	cust_id		<span class="built_in">CHAR</span>(<span class="number">10</span>)	<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">REFERENCES</span> Customers(cust_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在 ALTER TABLE 语句中用 CONSTRAINT 语法来完成：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (cust_id) <span class="keyword">REFERENCES</span> Customers (cust_id)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>外键有助于防止意外删除：</strong>
<ul>
<li>在定义外键后，DBMS 不允许删除在另一个表中具有关联行的行。例如不能删除关联订单的顾客。删除顾客的唯一方法是首先删除相关订单。由于需要一系列的删除，因而利用外键可以防止意外删除数据。</li>
<li>有的 DBMS 支持成为<strong>级联删除</strong>的特性。如果启用，该特性在从一个表中删除行时删除所有相关的数据。</li>
</ul>
</li>
</ul>
<h2 id="唯一约束"><a class="markdownIt-Anchor" href="#唯一约束"></a> 唯一约束</h2>
<ul>
<li>
<p>唯一约束用来保证一列（或一组列）中的数据时唯一的。</p>
</li>
<li>
<p>唯一约束与主键的区别：</p>
<ul>
<li><strong>表可包含多个唯一约束，但每个表只允许一个主键。</strong></li>
<li>唯一约束列可包含 NULL 值。</li>
<li>唯一约束列可修改和更新。</li>
<li>唯一约束列的值可重复使用。</li>
<li>与主键不一样，唯一约束不能用来定义外键。</li>
</ul>
</li>
<li>
<p>语法： 同其他约束的语法。关键字 UNIQUE。</p>
</li>
</ul>
<h2 id="检查约束"><a class="markdownIt-Anchor" href="#检查约束"></a> 检查约束</h2>
<ul>
<li>检查约束用来保证一列（或一组列）中的数据满足一组指定的条件。</li>
<li>检查约束的常见用途：
<ul>
<li>**检查最大或最小值。**例如，防止0个物品的订单。</li>
<li>**指定范围。**例如保证发货日期大于等于今天的日期，但不超过今天起一年后的日期。</li>
<li>**只允许特定的值。**例如，在性别字段中只允许 M 或 F。</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在建表语句中定义检查约束：</span></span><br><span class="line"><span class="comment">-- 保证 quantity 大于 0.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> OrderItems</span><br><span class="line">(</span><br><span class="line">	order_num	<span class="built_in">INTEGER</span>		<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	order_item	<span class="built_in">INTEGER</span>		<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	prod_id		<span class="built_in">INTEGER</span>		<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	quantity	<span class="built_in">INTEGER</span>		<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span> (quantity &gt; <span class="number">0</span>),</span><br><span class="line">	item_price	MONEY		<span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检查名为 gender 的列只包含 M 或 F，可编写如下的 ALTER TABLE 语句：</span></span><br><span class="line">ADD CONSTRAINT <span class="keyword">CHECK</span> (gender <span class="keyword">LIKE</span> <span class="string">'[MF]'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h1>
<ul>
<li>索引用来排序数据以加快搜索和排序操作的速度。</li>
<li>可以在一个或多个列上定义索引，使 DBMS 保存期内容的一个排过序的列表。在定义了索引后，DBMS 以使用书的索引类似的方法使用它。DBMS 搜索排过序的索引，找出匹配的位置，然后检索这些行。</li>
<li>创建索引前要注意：
<ul>
<li>**索引改善检索操作的性能，但降低了数据插入、修改和删除的性能。**在执行这些操作时，DBMS 必须动态地更新索引</li>
<li><strong>索引数据可能要占用大量的存储空间。</strong></li>
<li>**并非所有数据都适合做索引。**取值不多的数据不如具有更多可能值的数据，能用过索引得到那么多的好处。</li>
<li>**索引用于数据过滤和数据排序。**如果你经常以某种特定的顺序排序数据，则该数据可能适合做索引。</li>
<li><strong>可以在索引中定义多个列。</strong></li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建索引：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> prod_name_ind</span><br><span class="line"><span class="keyword">ON</span> Products (prod_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 索引必须唯一命名。</span></span><br></pre></td></tr></table></figure>
<h1 id="触发器"><a class="markdownIt-Anchor" href="#触发器"></a> 触发器</h1>
<ul>
<li>
<p>触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。</p>
</li>
<li>
<p>与存储过程不一样，触发器与单个的表相关联。与 Orders 表上的 INSERT 操作相关联的触发器只在 Orders 表中插入行时执行。</p>
</li>
<li>
<p><strong>约束的处理比触发器快，在可能的时候，应该尽量使用约束。</strong></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 约束 </tag>
            
            <tag> 索引 </tag>
            
            <tag> 触发器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事务处理]]></title>
      <url>http://tech.noexception.cn/2017/04/10/transactionprocessing/</url>
      <content type="html"><![CDATA[<p>一篇关于事务处理的笔记。</p>
<a id="more"></a>
<h1 id="事务处理"><a class="markdownIt-Anchor" href="#事务处理"></a> 事务处理</h1>
<ul>
<li>
<p>通过确保成批的 SQL 操作要么完全执行，要么完全不执行，来维护数据库的完整性。</p>
</li>
<li>
<p>利用事务处理，可以保证一组操作不会中途停止，它们要么完全执行，要么完全不执行。如果没有错误发生，整组语句提交到数据库表；如果发生错误，则进行回退，将数据库恢复到某个已知且安全的状态。</p>
</li>
<li>
<p>关键词：</p>
<ul>
<li>事务( transaction )指一组 SQL 语句；</li>
<li>回退（rollback）指撤销指定 SQL 语句的过程；</li>
<li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li>
<li>保留点（savepoint）指事务处理中设置的临时占位符，可以对它发布回退（与回退整个事务处理不同）。</li>
</ul>
</li>
<li>
<p>可以回退的语句：INSERT、UPDATE、DELETE。</p>
</li>
</ul>
<h1 id="控制事务处理"><a class="markdownIt-Anchor" href="#控制事务处理"></a> 控制事务处理</h1>
<ul>
<li>
<p>事务处理的语法：</p>
<ul>
<li><code>START TRANSACTION</code> 或 <code>BEGIN</code> ：开始一个新的事务；</li>
<li><code>COMMIT</code>：提交当前的事务，提交以后，无法回滚；</li>
<li><code>ROLLBACK</code>：回滚当前的事务，取消对表的操作；</li>
<li><code>SET autocommit</code>：为当前的会话打开或关闭 autocommit 模式，默认打开。</li>
</ul>
</li>
<li>
<p>隐式地关闭 autocommit 模式，要用 <code>START TRANSACTION</code> 语句：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @A:=<span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> <span class="keyword">type</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> table2 <span class="keyword">SET</span> summary=@A <span class="keyword">WHERE</span> <span class="keyword">type</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 在 START TRANSACTION 中， autocommit 模式会暂时的为关闭状态，指导 COMMIT 或者 ROLLBACK 语句被执行。这是 autocommit 模式才会回到之前的状态。</span></span><br></pre></td></tr></table></figure>
<h2 id="rollback"><a class="markdownIt-Anchor" href="#rollback"></a> ROLLBACK</h2>
<ul>
<li>SQL 的 ROLLBACK 命令用来回退 SQL 语句。</li>
<li>在事务处理块中，DELETE 操作（SELECT 和 UPDATE 一样）并不是最终的结果。</li>
</ul>
<h2 id="commit"><a class="markdownIt-Anchor" href="#commit"></a> COMMIT</h2>
<ul>
<li>隐式提交（implicit commit）：一般的 SQL 语句都是针对数据库表直接执行和编写的，即提交（写或保存）操作是自动进行的。</li>
</ul>
<h2 id="savepoint"><a class="markdownIt-Anchor" href="#savepoint"></a> SAVEPOINT</h2>
<ul>
<li>使用简单的 ROLLBACK 和 COMMIT 语句，就可以写入或撤销整个事务。但是，只对简单的事务才能这样做，复杂的事务可能需要部分提交或回退。</li>
<li>要支持回退部分事务，必须在事务处理块中合适的位置放占位符。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> identifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> identifier;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>SAVEPOINT 越多越好</strong>： 保留点越多，越能灵活地进行回退。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 视图]]></title>
      <url>http://tech.noexception.cn/2017/04/09/MySQLView/</url>
      <content type="html"><![CDATA[<p>关于 MySQL 的视图的笔记</p>
<a id="more"></a>
<h1 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h1>
<ul>
<li><strong>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。它可以把查询包装秤一个虚拟表，就可以轻松地检索出相同的数据。视图不包含任何列或数据，包含的是一个查询。</strong></li>
<li>视图是虚拟的表。它们包含的不是数据而是根据需要检索数据的查询。视图提供了一种封装 SELECT 语句的层次，可用来简化数据处理，重新格式化或保护基础数据。</li>
</ul>
<h2 id="使用视图"><a class="markdownIt-Anchor" href="#使用视图"></a> 使用视图</h2>
<ul>
<li>
<p>使用视图的好处：</p>
<ol>
<li>重用 SQL 语句。</li>
<li>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道其基本查询细节。</li>
<li>使用表的一部分而不是整个表。</li>
<li>保护数据。可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</li>
<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>
</ol>
</li>
<li>
<p>视图与表：</p>
<ol>
<li>创建视图后，可以用与表相同的方式使用它们。例如：SELECT、过滤、排序、将视图与表或其他视图联接、添加更新数据等等。</li>
<li>视图是用来查看存储在别处数据的一种设施，本身不包含数据，因此返回的数据是从其他表中检索出来的。</li>
<li>性能问题，如上所述，若用多个联结和过滤创建了复杂的视图或者嵌套多层视图，性能会大幅度下降。在部署使用了大量视图的应用前，应该进行测试。</li>
</ol>
</li>
</ul>
<h2 id="规则和限制"><a class="markdownIt-Anchor" href="#规则和限制"></a> 规则和限制</h2>
<ul>
<li>关于视图创建和使用最常见的规则和限制：
<ol>
<li>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。</li>
<li>对于可以创建的视图数目没有限制。</li>
<li>创建视图，必须具有足够的访问权限。这些权限通常由数据库管理人员授予。</li>
<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造视图。所允许的嵌套层数在不同的 DBMS 中有所不同（嵌套视图可能会严重降低查询的性能，因此在产品环境中使用之前，应该对其进行全面测试）。</li>
<li>许多 DBMS 禁止在视图查询中使用 <code>ORDER BY</code> 字句（MySQL 中貌似没有限制）。</li>
<li>有些 DBMS 要求对返回的所有列进行命名，如果列是计算字段，则需要使用别名。</li>
<li><strong>视图不能索引，也不能有关联的触发器或默认值。</strong></li>
<li>有些 DBMS 把视图作为只读的查询，这表示可以从视图检索数据，但不能将数据写会底层表。（详情参阅具体的 DBMS 文档）</li>
<li>有些 DBMS 允许创建这样的视图，它不能进行导致行不再属于视图的插入或更新。例如有一个视图，只检索带有电子邮件地址的顾客。如果更新某个顾客，删除他的电子邮件地址，将使顾客不再属于视图。这是默认行为，而且是允许的，但有的 DBMS 可能会防止这种情况发生。</li>
</ol>
</li>
</ul>
<h1 id="创建视图"><a class="markdownIt-Anchor" href="#创建视图"></a> 创建视图</h1>
<ul>
<li>创建视图语句：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> viewname <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> field_name1, field_name2, field_name3</span><br><span class="line"><span class="keyword">FROM</span> table_name1, table_name2, table_name3</span><br><span class="line"><span class="keyword">WHERE</span> table_name1.... = table_name2....</span><br><span class="line"><span class="keyword">AND</span> table_name2.... = table_name3....;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除视图语句：(覆盖或更新视图时，必须先删除它，然后再重新创建。)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> viewname;</span><br></pre></td></tr></table></figure>
<h2 id="利用视图简化复杂的联结"><a class="markdownIt-Anchor" href="#利用视图简化复杂的联结"></a> 利用视图简化复杂的联结</h2>
<ul>
<li>创建不绑定特定数据的视图是一种好办法。扩展视图的范围不仅使得它能被重用，而且可能更有用。这样做不需要创建和维护多个类似视图。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个例子:</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> ProductCustomers <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">from</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">where</span> Customers.cust_id = Orders.cust_id</span><br><span class="line"><span class="keyword">and</span> OrderItems.order_num = Orders.order_num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">from</span> ProductCustomers</span><br><span class="line"><span class="keyword">where</span> prod_id = <span class="string">'RGAN01'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="格式化检索出的数据"><a class="markdownIt-Anchor" href="#格式化检索出的数据"></a> 格式化检索出的数据</h2>
<ul>
<li><strong>SELECT 约束全部使用。</strong></li>
<li>MySQL 不支持<code>+、||</code>操作符来拼接值，检索出来的结果全为0，但是行数与所求的行数是相同的。要使用函数<code>Concat()</code>例如：(出处《SQL必知必会》)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Concat</span>(vend_name, <span class="string">'('</span>, vend_country, <span class="string">')'</span>) </span><br><span class="line"><span class="keyword">from</span> Vendors </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</span><br></pre></td></tr></table></figure>
<h2 id="用视图过滤不想要的数据"><a class="markdownIt-Anchor" href="#用视图过滤不想要的数据"></a> 用视图过滤不想要的数据</h2>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个例子：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> CustomerEmailList <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> cust_id, cust_name, cust_email</span><br><span class="line"><span class="keyword">from</span> Customers</span><br><span class="line"><span class="keyword">where</span> cust_email <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> CustomersEmailList;</span><br></pre></td></tr></table></figure>
<h2 id="视图与计算字段"><a class="markdownIt-Anchor" href="#视图与计算字段"></a> 视图与计算字段</h2>
<ul>
<li>使用方法同表。</li>
</ul>
<p></br></br></p>
<p>参考文献：《 SQL 必知必会》</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 视图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql 错误记录]]></title>
      <url>http://tech.noexception.cn/2017/04/09/MysqlError/</url>
      <content type="html"><![CDATA[<p><img src="http://image53.360doc.com/DownloadImg/2012/07/1409/25499912_4.jpg" alt="天道酬勤" /></p>
<a id="more"></a>
<h2 id="1-mysql远程连接问题"><a class="markdownIt-Anchor" href="#1-mysql远程连接问题"></a> 1. Mysql远程连接问题</h2>
<h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述：</h3>
<ul>
<li>
<p>从一台linux客户款远程连接Mysql，出现错误代码<code>ERROR 2003 (HY000): Can't connect to MySQL server on '***.***.***.***' (111)</code></p>
</li>
<li>
<p>问题分析：</p>
<ol>
<li>网络连接问题。</li>
</ol>
<ul>
<li>排除，局域网内，均能相互ping通</li>
</ul>
<ol start="2">
<li>配置文件中<code>bind_address</code>项</li>
<li>DNS解析的问题</li>
</ol>
<ul>
<li>直接用的是主机IP而非主机名，不存在解析错误的问题</li>
</ul>
</li>
<li>
<p>解决方法：</p>
<ol>
<li>编辑 MySQL 配置文件 my.cnf <code>sudo vim /etc/mysql/my.cnf</code></li>
<li>找到<code>bind-address = 127.0.0.1</code>，用<code>#</code>号将其注释掉。</li>
<li>重启 MySQL 服务。</li>
<li>倘若在第一步的时候，没有在<code>my.cnf</code>中找到<code>bind-address=127.0.0.1</code>，则去<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件中寻找。</li>
<li>问题解决。</li>
</ol>
<ul>
<li><strong>来源于StackOverflow</strong></li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Error </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息队列和Celery]]></title>
      <url>http://tech.noexception.cn/2017/03/28/messagehandle/</url>
      <content type="html"><![CDATA[<p><img src="http://image53.360doc.com/DownloadImg/2012/07/1409/25499912_4.jpg" alt="天道酬勤" /></p>
<a id="more"></a>
<h2 id="beanstalkd"><a class="markdownIt-Anchor" href="#beanstalkd"></a> Beanstalkd</h2>
<h3 id="beanstalkd-的特点"><a class="markdownIt-Anchor" href="#beanstalkd-的特点"></a> Beanstalkd 的特点：</h3>
<ol>
<li><strong>可持久化。</strong> Beanstalkd 运行使用内存，但也提供了持久性支持。在启动的时候使用 <code>-b</code> 参数指定持久化目录，它会将所有的任务写入 binlog 文件。在发生断电等情况后，用同样的参数指定重启它，将恢复 binlog 中的内容。</li>
<li><strong>任务超时重发。</strong> 消费者必须在预设的 TTR （Time To Run） 时间内发送 delete/release/bury 改变任务状态，否则它会认为消息处理失败，把任务交给别的消费者节点执行。</li>
<li>**支持任务预留。**如果任务因为某些原因无法执行，消费者可以把任务置为 buried 状态保留这些任务。</li>
<li>**支持分布式。**客户端可以实现和 Memcached 一样的分布式。</li>
<li><strong>灵活设置任务过期和TTR时间。</strong></li>
</ol>
<h3 id="job"><a class="markdownIt-Anchor" href="#job"></a> job</h3>
<ul>
<li>job 就是待异步执行的任务，也就是消息，是 Beanstalkd 中的基本单元。一个 job 通过生产者使用 put 命令时创建，然后被放在一个管道（tube）中。在整个生命周期中 job 可能有4个工作状态。
<ol>
<li><strong>ready:</strong> 等待被取出并处理。</li>
<li><strong>reserved:</strong> 如果 job 被消费者（worker）取出，将被此消费者预订，消费者将执行 job .</li>
<li><strong>delayed:</strong> 等待特定时间之后，状态再改为 ready 状态。</li>
<li><strong>buried:</strong> 等待唤醒，通常在 job 处理失败时，会变成这个状态。</li>
</ol>
</li>
</ul>
<h3 id="beanstalkc"><a class="markdownIt-Anchor" href="#beanstalkc"></a> Beanstalkc</h3>
<ul>
<li>Beanstalkd 借鉴了 Memcached 设计，它们的协议和使用方式的风格很像。本节使用 Beanstalkd 的 Python 客户端 Beanstalkc 演示 Beanstalkd 的用法</li>
</ul>
<blockquote>
<p><code>pip install PyYAML beanstalkc #安装</code></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python系统管理——Supervisor]]></title>
      <url>http://tech.noexception.cn/2017/03/21/python-supervisor/</url>
      <content type="html"><![CDATA[<p><img src="http://image53.360doc.com/DownloadImg/2012/07/1409/25499912_4.jpg" alt="天道酬勤" /></p>
<a id="more"></a>
<h3 id="supervisor-组件"><a class="markdownIt-Anchor" href="#supervisor-组件"></a> Supervisor 组件</h3>
<ol>
<li>Supervisord : 服务端程序，它的主要功能是启动 Supervisord 服务及其管理的子进程，记录日志，重启崩溃的进程等。</li>
<li>Supervisorctl : 命令行客户端程序，它提供一个类似 Shell 的接口，通过 UNIX 域套接字或者 TCP/IP 套接字使用 XML_RPC 协议与 Supervisord 进程进行数据通信。它的主要功能就是管理（启动、关闭、重启、查看状态等）子进程。</li>
<li>Web Server : 实现了在界面上管理进程，还能查看进程日志和清除日志。Web Server 其实是通过 XML_RPC 来实现的，可以向 Supervisord 请求数据。它配置爱 [inet_http_server] 块里面。</li>
<li>XML_RPC 接口 : 可以通过XML-RPC 协议对 Web Server 进行远程调用，达到和 Supervisorctl 以及 Web Server 一样的管理功能。</li>
</ol>
<h3 id="配置-supervisor"><a class="markdownIt-Anchor" href="#配置-supervisor"></a> 配置 Supervisor</h3>
<ul>
<li>Supervisor 的配置文件一般都叫 supervisord.conf。启动 Supervisord 的时候会按照如下路径寻找配置文件：
<ol>
<li>当前目录下的 supervisord.conf ($CWD/supervisord.conf)。</li>
<li>当前目录的 etc 目录下的 supervisord.conf （$CWD/etc/supervisord.conf）</li>
<li>相对于可执行文件 supervisord 的上一级的 etc 目录下的 supervisord.conf (…/etc/supervisord.conf)。</li>
<li>相对于可执行文件 supervisord 的上一级的 supervisord.conf （…/supervisord.conf）</li>
</ol>
<ul>
<li><strong>可以使用 -c 选项指定不符合如上要求的配置文件路径</strong></li>
</ul>
</li>
</ul>
<h3 id="使用-supervisor"><a class="markdownIt-Anchor" href="#使用-supervisor"></a> 使用 Supervisor</h3>
<p>  分为三种：supervisorctl 命令行方式管理进程、通过 web 方式管理进程和通过 XML_RPC 接口来管理进程。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 系统管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于 Flask 信号的一点小笔记]]></title>
      <url>http://tech.noexception.cn/2017/03/17/day0317/</url>
      <content type="html"><![CDATA[<p>Flask中的信号及其含义</p>
<a id="more"></a>
<h1 id="信号"><a class="markdownIt-Anchor" href="#信号"></a> 信号</h1>
<ul>
<li>信号通过发送发生在核心框架的其他地方或 Flask 扩展的动作时的通知来帮助你解耦应用。简而言之，信号允许特定的发送端通知订阅者发生了什么</li>
</ul>
<h2 id="订阅信号"><a class="markdownIt-Anchor" href="#订阅信号"></a> 订阅信号</h2>
<ul>
<li>使用 connect() 方法来订阅信号。该函数的第一个参数是信号发出时要调用的函数，第二个参数可选，用于确定信号的发送端。</li>
<li>使用 disconnect() 方法来退订。</li>
<li>对于所有的核心 Flask 信号，发送端都是发送信号的应用。当你订阅一个信号，请确保也提供一个发送端，除非你确实想监听全部应用的信号。这在你开发一个扩展的时候尤其正确。</li>
</ul>
<h2 id="创建信号"><a class="markdownIt-Anchor" href="#创建信号"></a> 创建信号</h2>
<ul>
<li>在定义的 Namespace 中命名信号。这也是大多时候推荐的做法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</span><br><span class="line">my_signals = Namespace()</span><br></pre></td></tr></table></figure>
<p>-创建信号：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_saved = mysignals.signal(<span class="string">'model-saved'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>这里使用唯一的信号名，简化调试。可以用 name 属性来访问信号名。</li>
</ul>
<h2 id="发送信号"><a class="markdownIt-Anchor" href="#发送信号"></a> 发送信号</h2>
<ul>
<li>调用 send() 方法，发出信号。 它接受发送端作为第一个参数，和一些推送到信号订阅者的可选关键字参数：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        model_saved.send(self)</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>永远尝试选择一个合适的发送端。如果你有一个发出信号的类，把 self 作为发送端。如果你从一个随记的函数发出信号，把 <code>current_app._get_current_object()</code> 作为发送端。</p>
</li>
<li>
<p><strong>传递代理作为发送端：</strong> 永远不要向信号传递 current_app 作为发送端，使用 <code>current_app._get_current_object()</code> 作为替代。这样的原因是， current_app 是一个代理，而不是真正的对象。</p>
</li>
</ul>
<h2 id="信号与-flask-的请求上下文"><a class="markdownIt-Anchor" href="#信号与-flask-的请求上下文"></a> 信号与 Flask 的请求上下文</h2>
<ul>
<li>信号在接收时，完全支持请求上下文。上下文本地的变量在 request_started 和 request_finished 一贯可用，所以你可以信任 flask.g 和其他需要的东西。</li>
</ul>
<h2 id="基于装饰器的信号订阅"><a class="markdownIt-Anchor" href="#基于装饰器的信号订阅"></a> 基于装饰器的信号订阅</h2>
<ul>
<li>可以在 Blinker 1.1 中容易地用新的 connect_via() 装饰器订阅信号：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> template_rendered</span><br><span class="line"></span><br><span class="line"><span class="meta">@template_rendered.connect_via(app)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">when_template_rendered</span><span class="params">(sender, template, context, **extra)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Template %s is rendered with %s'</span> % (template.name, context)</span><br></pre></td></tr></table></figure>
<h2 id="核心信号"><a class="markdownIt-Anchor" href="#核心信号"></a> 核心信号</h2>
<ol>
<li><code>flask.template_rendered</code>：模板渲染成功的时候发送，这个信号与模板实例<code>template</code>、上下文的字典一起用。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_template_renders</span><span class="params">(sender, template, context, **extra)</span>:</span></span><br><span class="line">    sender.logger.debug(<span class="string">'Rendering template "%s" with context %s'</span>, </span><br><span class="line">                         template.name <span class="keyword">or</span> <span class="string">'string template'</span>, </span><br><span class="line">                         context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> template_rendered</span><br><span class="line">template_rendered.connect(log_template_renders, app)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>flask.request_started</code>：建立请求上下文后，在请求处理开始前发送，订阅者可以用 request 之类的标准全局代理访问请求。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_request</span><span class="params">(sender, **extra)</span>:</span></span><br><span class="line">    sender.logger.debug(<span class="string">'Request context is set up'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request_started</span><br><span class="line">request_started.connect(log_request, app)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>flask.request_finished</code>：在响应发送给客户端之前发送，可以传递 response 。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_response</span><span class="params">(sender, response, **extra)</span>:</span></span><br><span class="line">    sender.logger.debug(<span class="string">'Request context is about to close down.'</span></span><br><span class="line">                        <span class="string">'Response: %s'</span>, response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request_finished</span><br><span class="line">request_finished.connect(log_response, app)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>flask.got_request_exception</code>：在请求处理中抛出异常时发送，异常本身会通过 exception 传递到订阅的函数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_exception</span><span class="params">(sender, exception, **extra)</span>:</span></span><br><span class="line">    sender.logger.debug(<span class="string">'Got exception during processing: %s'</span>, exception)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> got_request_exception</span><br><span class="line">got_request_exception.connect(log_exception, app)</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><code>flask.request_tearing_down</code>：在请求销毁时发送，它总是被调用，即使发生异常。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db_connection</span><span class="params">(sender, **extra)</span>:</span></span><br><span class="line">    session.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request_tearing_down</span><br><span class="line">request_tearing_down.connect(close_db_connection, app)</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><code>flask.appcontext_tearing_down</code>：在应用上下文销毁时发送，它总是被调用，即使发生异常。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_db_connection</span><span class="params">(sender, **extra)</span>:</span></span><br><span class="line">    session.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request_tearing_down</span><br><span class="line">appcontext_tearing_down.connect(close_db_connection, app)</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><code>flask.appcontext_pushed</code>: 这个信号在应用上下文压入栈时发送。发送者是应用对象。这通常在单元测试中为了暂时地钩住信息比较有用。例如这可以用来提前在 g 对象上设置一些资源。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> appcontext_pushed</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_set</span><span class="params">(app, user)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(sender, **kwargs)</span>:</span></span><br><span class="line">        g.user = user</span><br><span class="line">    <span class="keyword">with</span> appcontext_pushed.connected_to(handler, app):</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_user_me</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> user_set(app, <span class="string">'john'</span>):</span><br><span class="line">        c = app.test_client()</span><br><span class="line">        resp = c.get(<span class="string">'/user/me'</span>)</span><br><span class="line">        <span class="keyword">assert</span> resp.data == <span class="string">'username=john'</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li><code>flask.appcontext_popped</code>: 这个信号在应用上下文弹出栈时发送。发送者是应用对象。这通常在 <strong>appcontext_tearing_down</strong> 信号发送后发送</li>
<li><code>flask.message_flashed</code>: 这个信号在应用对象闪现一个消息时发送。消息作为 message 命名参数发送，分类则是 category 参数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">recorded = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record</span><span class="params">(sender, message, category, **extra)</span>:</span></span><br><span class="line">    recorded.append((message, category))</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> message_flashed</span><br><span class="line">message_flashed.connect(record, app)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python Web </category>
            
            <category> Flask </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flask </tag>
            
            <tag> 信号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lxml随记]]></title>
      <url>http://tech.noexception.cn/2017/02/18/Lxml%25E7%25AC%2594/</url>
      <content type="html"><![CDATA[<p><img src="http://img.wowoqq.com/allimg/150627/1-15062FI956.jpg" alt="love" /></p>
<a id="more"></a>
<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介：</h3>
<ul>
<li>Lxml是基于libxml2解析库的Python封装。解析速度比Beautiful Soup 快，缺点就是安装麻烦。</li>
</ul>
<h3 id="css选择器"><a class="markdownIt-Anchor" href="#css选择器"></a> CSS选择器：</h3>
<ul>
<li>CSS选择器表示选择元素所使用的模式</li>
<li>示例：
<ul>
<li>选择所有标签：<code>*</code></li>
<li>选择<a>标签：<code>a</code></li>
<li>选择所有class=&quot;link&quot;的元素：<code>.link</code></li>
<li>选择class=&quot;link&quot;的<a>标签：<code>a.link</code></li>
<li>选择id=&quot;home&quot;的<a>标签：<code>a#home</code></li>
<li>选择父元素为<a>标签的所有<span>子标签：<code>a &gt; span</code></li>
<li>选择<a>标签内部的所有<span>标签：<code>a span</code></li>
<li>选择title属性为&quot;Home&quot;的所有<a>标签：<code>a[title=Home]</code></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结]]></title>
      <url>http://tech.noexception.cn/2017/01/03/2016%25E5%25B9%25B4%25E7%25BB%2588%25E6%2580%25BB%25E7%25BB%2593/</url>
      <content type="html"><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="勤劳温柔，还善良" />
    <label for="pass">勤劳温柔，还善良</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX19tf88JYuR5x4JUWtRU42lA3LVfSBwHbG+87DaUht8/Ha0Dph+pkcJd04xKgpGwcSJVK549LvP/BFeQ4eNcsgPwMv/YI4Spc0Ps3DwdAj5ZJoy0McnIVahikMKTrE92IrkYRClDUe3JrpOaVfqOZ6DUkHT5dwM1NfCsqsue2Ci9c+Q3aIWy/JOZQmbVGbYw4yrNzoLaCW6Q2qEgV1/1Z5ixKvEoeOThf/3RhSmOg9YqZ+UB2pdyh8+ELt0xYz8L81M1wS+xhF5AYpUBSI6Ta0SeEIb9N6glPzQImmzwznDR/84b1xQ5wxEKh/O3TQHF6GQ5kxpwOE9wwQTw7GaKHqNW+UCKTgn8OrUHN3mTml7E4V2unrwQKdyXT6qqLKL9OiYaVXYPOjQ2epxbVWzIR8f8ZsPi3jMvXHNFm55ztO200sDUfJO9Sj9xJnG893Uk+8G/MEKRF7LboOaK7U6q70aO8EDI8gtbC1kCI10NiIo4KYDRdMyFQWDqiV4EdHMJRD1gPQxMi9lKBfXmpRBS0W86dnrv4WBj2TzIjQcpVuFgqyMPHA7cD8QOXDUV5/UNXjXSB5vg5eOZs2wZ/esF18JTe1/Pv2bqtgSyv7MdTE4fiBQnpyUApc0qo4qbrvR9GX05JJP5Z33RDFlKnUlCc6257i8xHA2FP5lyZH8agPgRdDRGqr+Kj87pjjrghQMSOD/WD6BIJC9qgmq2izvj+Bm/L7KUhfDv2RhFECK4q+ZW4AICfhA5yUBdbSdNfz5Geo5k+9PzO/J/sLE6tQpW5Owu4yhWdVYhzSL9puJvRV4Na34LhPu/ErXbxnsihr2M+P1/vs9iau9rDE5wYWGCrn8urCw8GK5UHVP3Hgr92WrnieY5Xzz2dRMFC2VQ3jTfbN3bbsXTjFQX1/TiCoXx6KnyW8Yq187cxRaCmPLU5hvoMY66XM1OmfpntrPla0X6WLXSqauCMB6dKL7V4j/oFw9NiyGn38D0gPM0Y8GH1m2tkBDecrmfLW3Lv1RasSSSzuOSNC0JeCFxuPIJwWM592oEl2QLzFbDElZKmrmIIux8cr6ejsk/nLpZOjkFOT5bcig7NrdJO+7HD7yZW9Z56SAiEw4Y9z+MVQLJp4Mg4kNbvP/4cYqjt/tnirMJn89dX4TF5n0jIbPZs3yt7bM6GtHkARicQaMMGGQbTTuZPSoE+zuz1R2u8tWWMU92ArubfgfSgbz9nxcr6F6aTBVPTqOqzd9ycmO+fGDizKy1updWVbiUUIE7xbuer20EDj6scq20sC4VRW4+DxODEIcDpXwCOjCzS4+jHDJNjOC0fcYjlo54++8DM+TbyOpzL3bvrlZkBOX37iatfoP5tiE+fC1F5XFsmTFC0DNzOt1//JM75t4VM22rpBZbnYyZRKGMVOJr+4WjS9zV5Bv6+FwyjCTzbkGcnvIFiysk5CVFR+B8LI0QCurzuQkQKR2dLdGUax8y6fppW1NeKINoAsCmik1cIP+puNNI6iJjNl8A45ZLGdvq2nfKBCybRgQkqPzcNGl5dmaVwcHcpVk0scWuF/Cd9e0uOXCO1aAk6xJ7x3OXTkiPcQEsnDlgOYDxLRprtNt6i61L0ni2q0gXc63MuTH5tM3lYVvOmwbdr8fN5swe5bZWkP3i2RGLjyMxJ3HggfzEs+z/UXl/ENIb44Nxruf/8WMfG9OxCW7iwI1NRZvPjiSVuML2xBxZpE9Y944rVMvDf8XtKyaUT57gVO7NO5GvY2chyX2sH8xF5Z1mu3mk5YFL1VJA5z4FRetF0rx3rlayhaIJicaiUdnOvnSnobDijonTHRQNkqkFr1BrkfbmtnOTHbGHpI+niwRa/lySTdNkr1dZPXMHM6uSChOaN0Qp4gy2x1qqgcvpcS9RdopKz8K5lYPkCn/cL3Jyq+f4g/CIK89WKQHbRpC1pbSS4fv87AJu3enYUKM+6+26S+zPZdmVdunWPPROvcZPpf55qlN86TO5C2K7OekZwj9//QOmhYDwjtZh/Bd5DprbNv4GSYKrKTjIKevxj5yp6JMDX4nYvxB9RzQFmLOUSrNdnw7AE6CbHFg8T5/ZAJU+G+vuh5V4MKDa2t3Ye/SKOu3KBu2AuRrHyzO5wzzPcjVECHEqv0zrYpxU4XUFG7m5wDvT/scSAgrWvPQeBzy2RbjfSyBXqhN+ovRoTcnRH99ezWcqkWJcI5Vkx5x7tUq3OoxRyC4w0DQC7MZa4MxKn3tsixUCjf0V5yoeAjrr/6VNpLc45Vztv+jyyE55CT62ozXcaw2QP54w1oUK2lpOlhBbdtHMSt2bwSQZ+cQXVbEhDdLAEt0tFsR3VpiToJD6N6eCg0xDLimvC8phS76C2vfvlXFVEaKO+XR687nkg0RQXBqqiQOJSDyMnPwY/kKmttt2Ag4nnZebAamRVE1bQrjrIvZLKwIRtz2YucBnSbZW6zVzpiZZDtL24PI8nsSoV+bKmpy03t+oHqVXj2tKIVQW6IsVXNgY5nEIFalhkTEiK12Mu3rO7BK+Dblxbfs19RilHGYyGajlM6BUsVVloSZ+OsHANV98g6gkQrRjZYYlk5r6KCtDFdXhFzFkLvfrRvXZ+5GOAPFEhscNHvyTPDRzABbewSUUEGiVvQo+ZBNS1XeXK15tJJKG6L4stc0fcyQEYZP+yYAOqzxdYZFp1tjtXzsRpTi4crL9/iYJ0H3k1NGK1Z80A6ruK7TyBKHL6uGrE2f98bqQHFAE/AxxVVmS9jNZ47BDlZFjdHxWOoy5WeYRgxjE4GiRD4W1B5naRDWXppIGHvXZUhdJdJ7vAgJJhe7vlHNoYQMnOXOlrxoQUk6MT4Mo+eWMUnQNj90mGpqo+86Ru0sBgoe70eyUG+rKnMoSeqtGs1wqIrqkpSmEYd8aesj8AmjENpgOjTQ9kkym50sELCMBw6SjiivzWUKRs3ge8QTgxNBgfivylemQXtcYRrbfnnABS+2mCUkzsuc+0XGkJjVZf0+OXQLhIZiQ0HqQKYuDUaOqaPFOYPC5QQxw28d32It16eeS4wVKjuTciEDO1aN4mdCqTYfAxo0T9faVG258jeQdMCI8g4l8blURtiloFFzsZpEKe7GyMOenuZ2+M/AVJpsqMjSMhdFLp46lUQkKUy/00ulMuWFe3WGPnynUDOJSvrBodAxuDQmU+FntH6o20cA9yavxgIcBoyxxPraN2cVOpXrXx+NjQfieNsZmiXDDwOUW045F8pWmXC9pl0l8SOZbvylYU1kFcCJ4iSOtczs19MJqpcqor/GZob7cCx5fuA0j9zVX9NFwvnJG7ZzAh+k7WZky9NWot4GhRGYiVzE+ej/3LdvG7pKuiFtAUyGfwESCXv2t7XW5+MA1AEK2OLW7I/SwI83ItbCCFqm2CkBw1ITLGqFY0WwDHVL7/0kPa4pzLLomQ9gfvp8If1I4Ft2s0bx2ddfnLUqOwQ+J9WsjTaewwid0PksWaZ7fbCVN2kaNJDIUq5zfH7lnosp4UOlUNUT+FKfRDHDTBbAKTCbZsi8WrBgIJShTtzoE/25AzX5Du/zJvGjdZS67T+DjWytSAL8We8YeibGmRrrGgVy+s8p4rAPejB9em3TxqllU2bgNPMHgq1ihsuH4CYrjJda0ngml3NMA5rzPIfNQjgRiGFPj1gDLQY5Yj8ANPVG/V+VtUGTEfmSmwXdz4J7Kl6GT6Ybu/q5chRIs6UaA7o105Ac1/fjxe0skmsKPfAfYGeTv+5Nl4DLxJvUE1FQX4lCl7PEhvs9PsSxwdW+UrOXpfNS5jsXVlGmtdG1vjNSHlSVxPQRmfdHF0nhSSZKiwUSWZtCVomXRLivWbFnZXMMh48WmuARQVFKJLzvQDQlIs8akktQCU/bu+jyxPOrmpomOA3UXNgmcOPhBa/WG8+V7E9HzAOIUw2PuliSuyJQkMpIjWaI+O8m1ErJOvgH7fX8roSupGq6EJ2VHFZreLwX5HGK1R4deiBaATRJmaCRCaUAmfZca4rt6RA6O9zsTgZ9lGs2535hwUbqxic8WjRkoYHh3XL7LRX7Kr+L3LfAupk1D0WHL1T4VdfRcwFXstiY0W3/JxiAr5kpWwN2hEIAuWFRD6RIaUj0+DApV/S6CzKMPrnm8JuCbcRl7fnH51htYx9jsWHAuUpkanxEwuhF6TgnFhNN5RgWPBOytRZrWVCtDez4mm3YO80niYNsVl4uEjUu+AmGCr66Z8+QuQhRv5nsDSg/9YktKlMMAoEABdkkR2mP6HJc9fJ6Elt4RbGlBTUJUSUq48kw6OQzLwTnAlnCV/GqB2r1IohWlOXppz7P8H8zhywvz+sB8lngGevVsLN650xzomMiB14aoCGDGlIehO13N3FGp3dGqJ+t1RNDQG9/42HevZ0oIwAJHhkxT6Swm1o4rB/VGNKPCnjGmOttfXDtXTb1OQnUylyuGLVc+IgOXJEPhXhTKAZ8srEAc/psAQu6KJfz9KEsHloNBCYclAqdMApPZYlp6NPsIX0XkZr+CEpIihsE5FVsup6YX2o8z3atuAvou2Bbc/lZSY8ySXePuIHRLP5upUvvTSUvMZvBuMw/rfsLv3G8KGSSkAA0JnH6CNTk44c7uIBJ8IJINnghNuE2rWToLRCauoya6gv7cspu9PVX/qbIDIgMRY0BmSEGP7SxiXxH894utEeMQKpsIUAshJr4Ka5rEV9I4p24LaTQX0r2iEOaybKjSWpYc6PID7d/SvTrVbqJ0186+Boay0Uh5Hb12wgmMMWJxudYMU0V4I/wzZhFzIiNl4zVgZbh/2cd4t6TqwtpR2Sm+SIqsJb/agcFXhA0/gZuLaxHqUeGdGWV6SBsif/C8FSILSW1dfTke9xZtONqf2xVsXk5AzNOyXulEnBTKVnzrIwNFDPeRiUc4fiA1sBP/Okuy6DxAbfP7tl6mGmpMHm00t+G4P5kp03PHhE6MKmpp5g5Q4rY4F7wg2ZVAmpcoW32w6wsYtq5SS+7x3IbM3sx6BYSpcRiBLedgHpbtZSlZ/hE/OlzTmtJ3gkTNddZCLS4dEP17IkcpGFwOYI1J57Xka7H3CEHitemZz/PMCN2U+n5SjpEmWlPCMmnziAQxQ0I2D5jOxh4kMuJGDyu6eIavwIZjOs0pzBmi8HclSGZIwLn9Bxk5d0+pAZV2Rt3E+qYh4pfR6LQQMVf5bmh6px6scIjAvLyXHuZ4GwEA9nD3DWSCGR769lpa4zcKgNpfbcCCtLyUY2GrGo+IWdnTq/8bV09doaFK/rgDk7VJZkZsrbFuG02p4I4WVWJ6Mmxet7ntOT4w8A/qqPtg5Y+8iSEICgguVLpb+J9BzkpwrM7E1leuskjcS3Nn6491gb2Uq2Yi1hML0aR0UUeDsEU95t9KuJuqnxwwYu4fQK9/OPmTUKj0H7c086AvAUIbooDaqNxB44AnBBaHcLM2RxTx8WRIYjiF8f71VwoQR9HLX1E2vzL2wS7PqZVuY22PFjL/ugj/11PyWYvjHEBaw0uVQXAnxxIrICJ1gp07WtcnwAGUNjiGqWxzEmbKAIEEjLEPdXr2EYcfJ2Z/IACdj9WfbSSXpaLMCfdT5FKhQHm7IY6AKlea0xebOHsfVamtiyjcnWYCx86XI3AuBKD6aGjo+Yb/buDfcsr4iQay63aMQqcgsqm9HURsjiQexNhdANfnpO8k6W8Pyzj+xpjMPhj4ayMhQzv3WpWZVHP9vFKMo+uxFr4G/uc8Zv1rsxigYWkyeWpmibXmGtZ8x/J4izje5mQQJO/NOL0CxXDmW/tG7aNdwBml4uHJMfpk+pesxVDXXSnP5NPqc8Qi7Zg3tssnQqYztaP1aZdR4+Gvzx7J/b9ch4AhJKzv8hbRmifPeU6ncL+iqu6/KM2t++xReQLukcV4JWc/cvP3evE2sdS4s3TRAjgOC1oT9i/KxtM8ttKdcIQNc4tVkc9kgrLfpL0bvBDY+N2Fj53eTqtuxc8hRCyRQgLG7MJjlBxLmnGONfxXbr5LTaFpmSYRc3vc7uRJnUEhS6+OjOFvHZyuV4XgtVGZ7XTApJ8Qc6Jr8oIeWkVxmsSX/d17UbGFAekZXphIljosit9cmeCrgwuZZZfGFteFxg+Ozd9qxQi2bRd13cFLKEKzvHegoDv480/uXLltcK8630rLHZPp6QFAwRI2EAa2g2TlzRx9I4xU7kbRss6aadQVqdr20zjAPw+9RVTRarUg9e9pFdSSCI6ZtxISnLqFCbs6S8BjJYZzqYBpPy4pPZCN8lXmICiXm3c6oFkNiGERv616Ln3LkoLoILs+5/GAxX1miZB0ykBv01esCCr87DLqsj4MDY+xiHiTzMYT0o/sT4HkpFCMosBi39fTez9H4GUQzIcjDOy4p79O9ZNSA49jl/CcavhcpoZZC3MSPyLlLWjlR577aHzliTNeRVTDJn4MR3swPYgDlAsS+D4gCPFQbexcR86CXPTvQ3Oyq9uFbq8WihJlTpKEH3wY/oQOWo9KQRMBsTxdjqrDGof/3nKUKF/2MvgIFovUR9sURlm1Be0SEMQpFeN2NrMnBHwI4pD4N7bosdXfWzvFUzrwZDIis3sXhRqucqFu91U6lfBEwoREdFiHpJaevA5CYlHBW92VUFlXXM8/pEIPYIqVfk58C3tK2vFVPCH8sM1HrkEx/rV3V6ydTI8qY7MRff12veBtikQwAHrM+X7jW0xGnYDpaTBqlJgrk2cD+QUFid+CgGj6au8sak8zVWGYE3DovSdozMC/5wCrTWzzoyYTfrC8sR6LMpWPT70ivUSqBQ==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
        <categories>
            
            <category> 年度总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《C++ Primer》第八章小结]]></title>
      <url>http://tech.noexception.cn/2016/12/29/sumeryofchapter8/</url>
      <content type="html"><![CDATA[<p align="center">IO库小结</p>
<a id="more"></a>
<h2 id="c-使用标准库类来处理面向流的输入和输出"><a class="markdownIt-Anchor" href="#c-使用标准库类来处理面向流的输入和输出"></a> C++ 使用标准库类来处理面向流的输入和输出；</h2>
<ul>
<li><code>iostream</code>处理控制台IO</li>
<li><code>fstream</code>处理命名文件IO</li>
<li><code>stringstream</code>完成内存string的IO</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类`fstream`和`stringstream`都是继承自类`iostream`的。输入类都继承自`istream`，输出类都继承自`ostream`。因此，可以在`istream`对象上执行的操作，也可在`ifstream`或`istringstream`对象上执行。继承自`ostream`的输出类也有类似情况。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个IO对象都维护一组条件状态，用来指出对象上是否可以进行IO操作。如果遇到了错误——例如在输入流上遇到了文件末尾，则对象的状态变为失效，所有后续输入操作都不能执行，直至错误被纠正。标准库提供了一组函数，用来设置和检测这些状态。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7安装Mysql]]></title>
      <url>http://tech.noexception.cn/2016/11/15/CentOS7%25E5%25AE%2589%25E8%25A3%2585Mysql/</url>
      <content type="html"><![CDATA[<h2 id="centos7默认的yum源没有mysql-server这个库所以yum-install-y-mysql-server这个命令在centos7中无法使用"><a class="markdownIt-Anchor" href="#centos7默认的yum源没有mysql-server这个库所以yum-install-y-mysql-server这个命令在centos7中无法使用"></a> CENTOS7默认的yum源没有mysql-server这个库，所以<code>yum install -y mysql-server</code>这个命令在CENTOS7中无法使用。</h2>
<a id="more"></a>
<h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1. 安装：</h2>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;repo.mysql.com&#x2F;mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">sudo rpm -yvh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum update</span><br><span class="line">sudo yum install mysql-server</span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>
<h2 id="2-管理root密码"><a class="markdownIt-Anchor" href="#2-管理root密码"></a> 2. 管理root密码</h2>
<ul>
<li>默认安装的mysql是没有密码的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#执行下面的命令，直接回车即可进入mysql终端</span><br><span class="line">mysql -u root -p</span><br><span class="line">#执行下面的命令给root用户设置密码</span><br><span class="line">set password for root@localhost&#x3D;password(&#39;123&#39;);</span><br><span class="line">#然后退出</span><br><span class="line">quit</span><br><span class="line">#再次登陆，需要密码进入</span><br><span class="line">mysql -u root -p</span><br><span class="line">#或者快捷方式进入</span><br><span class="line">mysql -uroot -p123</span><br></pre></td></tr></table></figure>
<h2 id="3-设置mysql的访问权限"><a class="markdownIt-Anchor" href="#3-设置mysql的访问权限"></a> 3. 设置Mysql的访问权限</h2>
<ul>
<li>设置所有ip可以访问这台mysql的命令，默认情况下只有本机能访问，对外是不公开的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123&#39; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">#命令说明：</span><br><span class="line">grant all ：所有的权限用all</span><br><span class="line"></span><br><span class="line">on *.*：匹配库名.表名，*.*指的是允许所有的库和表被访问。</span><br><span class="line"></span><br><span class="line">&#39;root&#39;@&#39;%&#39;：用户名@IP，注意用户名和ip都要用单引号引起来</span><br><span class="line">ip这个地方，支持like通配，比如%dev，允许所有以dev结尾的域名访问</span><br><span class="line">%代表所有的ip</span><br><span class="line"></span><br><span class="line">&#39;123&#39;代表root密码</span><br></pre></td></tr></table></figure>
<h2 id="4-mysql有关的系统管理命令"><a class="markdownIt-Anchor" href="#4-mysql有关的系统管理命令"></a> 4. mysql有关的系统管理命令</h2>
<ul>
<li>CentOS7管理Mysql的启动和停止</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl stop mysqld</span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>
<hr />
<p>转自：<a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE4MDI0NQ==&amp;mid=2650335219&amp;idx=1&amp;sn=38abc805b96fb7d4f497a90f28f377c2&amp;chksm=83aacbc9b4dd42dfbf2be8b83155124aeafd490234a9bcfbb6a94fa255d455fe8d04b4467da6&amp;scene=4#wechat_redirect" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzAxMzE4MDI0NQ==&amp;mid=2650335219&amp;idx=1&amp;sn=38abc805b96fb7d4f497a90f28f377c2&amp;chksm=83aacbc9b4dd42dfbf2be8b83155124aeafd490234a9bcfbb6a94fa255d455fe8d04b4467da6&amp;scene=4#wechat_redirect</a></p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法复习（一）]]></title>
      <url>http://tech.noexception.cn/2016/11/07/%25E6%2595%25B0%25E6%258D%25AE%25E7%25BB%2593%25E6%259E%2584%25E4%25B8%258E%25E7%25AE%2597%25E6%25B3%2595%25E5%25A4%258D%25E4%25B9%25A0%25EF%25BC%2588%25E4%25B8%2580%25EF%25BC%2589/</url>
      <content type="html"><![CDATA[<p align="center">本篇为复习数据结构与算法的第一篇</p>
<a id="more"></a>
<h2 id="背包-队列和栈"><a class="markdownIt-Anchor" href="#背包-队列和栈"></a> 背包、队列和栈</h2>
<h3 id="api"><a class="markdownIt-Anchor" href="#api"></a> API</h3>
<ul>
<li><strong>泛型可迭代的基础集合数据类型的API</strong></li>
</ul>
<table>
<thead>
<tr>
<th>背包</th>
<th><code>public class Bag&lt;Item&gt; implements Iterable&lt;Item&gt;</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Bag()</code></td>
<td>创建一个空背包</td>
</tr>
<tr>
<td><code>void add(Item item)</code></td>
<td>添加一个元素</td>
</tr>
<tr>
<td><code>boolean isEmpty()</code></td>
<td>背包是否为空</td>
</tr>
<tr>
<td><code>int size()</code></td>
<td>背包中的元素数量</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>先进先出(FIFO)队列</th>
<th><code>public class Queue&lt;Item&gt; implements Iterable&lt;Item&gt;</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Queue()</code></td>
<td>创建空队列</td>
</tr>
<tr>
<td><code>void enqueue(Item item)</code></td>
<td>添加一个元素</td>
</tr>
<tr>
<td><code>Item dequeue()</code></td>
<td>删除最早添加的元素</td>
</tr>
<tr>
<td><code>boolean isEmpty()</code></td>
<td>队列是否为空</td>
</tr>
<tr>
<td><code>int size()</code></td>
<td>队列中的元素数量</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>下压(后进先出，LIFO)栈</th>
<th><code>public class Stack&lt;Item&gt; implements Iterable&lt;Item&gt;</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Stack()</code></td>
<td>创建一个空栈</td>
</tr>
<tr>
<td><code>void push(Item item)</code></td>
<td>添加一个元素</td>
</tr>
<tr>
<td><code>Item pop()</code></td>
<td>删除最近添加的元素</td>
</tr>
<tr>
<td><code>boolean isEmpty()</code></td>
<td>栈是否为空</td>
</tr>
<tr>
<td><code>int size()</code></td>
<td>栈中的元素数量</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>泛型</strong></li>
</ol>
<ul>
<li>集合类的抽象数据类型的一个关键特性是我们应该可以用它们存储任意类型的数据。一种特别的Java机制能够做到这一点，它被成为<em>泛型</em>，也叫做参数化类型。</li>
<li>在每份API中，类名后的<Item>记号将Item定义为一个类型参数，它一个象征性的占位符，表示的是用例将会使用的某种具体数据类型。可以将Stack<Item>理解为某种元素的栈。</li>
<li>在创建栈时，用例会提供一种具体的数据类型：我们可以将Item替换为任意引用数据类型（Item出现的每个地方都是如此）。</li>
</ul>
<ol start="2">
<li><strong>自动装箱</strong></li>
</ol>
<ul>
<li>类型参数必须被实例化为引用类型，因此Java有一种特殊机制来使泛型代码能够处理原始数据类型。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">stack.push(<span class="number">17</span>);   <span class="comment">//自动装箱(int -&gt; Integer)</span></span><br><span class="line"><span class="keyword">int</span> i = stack.pop();  <span class="comment">//自动拆箱(Integer -&gt; int)</span></span><br></pre></td></tr></table></figure>
</li>
<li>自动将一个原始数据类型转换为一个封装类型被成为自动装箱，自动将一个封装类型转换为一个原始数据类型被成为自动拆箱。</li>
</ul>
<ol start="3">
<li><strong>可迭代的集合类型</strong></li>
</ol>
<ul>
<li>对于许多应用场景，用例的要求只是用某种方式处理集合中的每个元素，或者叫做<em>迭代访问</em>集合中的所有元素。</li>
<li>例如，假设用例在Queue中维护一个交易集合：</li>
</ul>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;Transaction&gt; collection = <span class="keyword">new</span> Queue&lt;Transaction&gt;();</span><br><span class="line"><span class="comment">//如果集合是可迭代的，用例用一行语句即可打印出交易的列表：</span></span><br><span class="line"><span class="keyword">for</span>(Transaction t : collection)&#123;</span><br><span class="line">    StdOUt.println(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种语法叫做foreach语句：可以将for语句看做对于集合中的每个交易t(foreach)，执行一下代码断。</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>背包</strong></li>
</ol>
<ul>
<li>背包市一种不支持从中删除元素的集合数据类型——它的目的就是帮助用例手机元素并迭代便利所有收集到的元素（用例也可以检查背包是否为空或者获取背包中的元素数量）。</li>
</ul>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stats</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Bag&lt;Double&gt; numbers = <span class="keyword">new</span> Bag&lt;Double&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!StdIn.isEmpty())</span><br><span class="line">            numbers.add(StdIn.readDouble());</span><br><span class="line">        <span class="keyword">int</span> N = numbers.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> x: numbers)&#123;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> mean = sum/N;</span><br><span class="line">        sum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> x : numbers)&#123;</span><br><span class="line">            sum += (x-mean)*(x-mean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> std = Math.sqrt(sum/(N-<span class="number">1</span>));</span><br><span class="line">        StdOUt.printf(<span class="string">"Mean: %.2f\n"</span>, mean);</span><br><span class="line">        StdOUt.printf(<span class="string">"Std dev: %.2f\n"</span>, std);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>上述的Stats类是Bag的一个典型用例。它的任务是简单的计算标准输入中的所有double值的平均值和样本标准差。如果标准输入中有N个数字，那么平均值为它们的和除以N，样本标准差为每个值和平均值只差的平方之和除以N-1之后的平方根。</li>
<li>在这些计算中，数的计算顺序和结果无关，因此我们将它们保存在一个Bag对象中并使用foreach语法来计算每个和。</li>
<li>**注意:**不需要保存所有的数也可以计算标准差（就像我们在Accumulator中计算平均值那样）。</li>
</ul>
<ol start="5">
<li><strong>先进先出队列</strong></li>
</ol>
<ul>
<li><em>先进先出队列</em>（或简称队列）是一种基于<em>先进先出</em>（FIFO）策略的集合类型。</li>
<li>在提到公平时大多数热的第一个想法就是应该优先服务等待时间最久的人，这正是先进先出策略的准则。队列是许多日常现象的自然模型，它是无数应用程序的核心。</li>
<li>当用例使用foreach语句迭代访问队列中的元素时，元素的处理顺序就是它们被添加到队列中的顺序。</li>
</ul>
<ol start="6">
<li><strong>下压栈</strong></li>
</ol>
<ul>
<li>下压栈（或简称栈）是一种基于后进先出（LIFO）策略的集合类型。</li>
<li>当你的邮件在桌上放成一叠时，使用的就是栈。</li>
<li>这种策略的好处是我们能够及时看到感兴趣的邮件，坏处是如果你不把栈清空，某些较早的邮件可能永远不会被阅读。</li>
<li>当用例使用foreach语句迭代遍历栈中的元素时，元素处理顺序和它们被压入栈的顺序正好相反。</li>
<li>在应用程序中使用栈迭代器的一个典型原因是在用集合保存元素的同时颠倒他们的相对顺序。</li>
</ul>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reserse</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!StdIn.isEmpty())</span><br><span class="line">            stack.push(StdIn.readInt());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : stack)</span><br><span class="line">            StdOUt.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><strong>算术表达式求值</strong></li>
</ol>
<ul>
<li>E.W.Dijkstra在20世纪60年代发明了一个非常简单的算法，用两个栈（一个用于保存运算符，一个用于保存操作数）完成了这个任务，其实现过程如下：</li>
</ul>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dijkstra的双栈算术表达式求值算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Stack&lt;String&gt; ops = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line">        Stack&lt;Double&gt; vals = <span class="keyword">new</span> Stack&lt;Double&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!StdIn.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//读取字符，如果是运算符则压入栈</span></span><br><span class="line">            String s = StdIn.readString();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">"("</span>));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">"+"</span>))  ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">"-"</span>))  ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">"*"</span>))  ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">"/"</span>))  ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">"sqrt"</span>))   ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">")"</span>))&#123;</span><br><span class="line">                <span class="comment">//如果字符为“)”，弹出运算符和操作数，计算结果并压入栈</span></span><br><span class="line">                String op = ops.pop();</span><br><span class="line">                <span class="keyword">double</span> v = vals.pop();</span><br><span class="line">                <span class="keyword">if</span>      (op.equals(<span class="string">"+"</span>))        v = vals.pop() + v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>))        v = vals.pop() - v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>))        v = vals.pop() * v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>))        v = vals.pop() / v;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"sqrt"</span>))     v = Math.sqrt(v);</span><br><span class="line">                vals.push(v);</span><br><span class="line">            &#125;   <span class="comment">//如果字符既非运算符也不是括号，将它作为double值压入栈</span></span><br><span class="line">            <span class="keyword">else</span> vals.push(Double.parseDouble(s));</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(vals.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这段Stack的用例使用了两个栈来计算表达式的值。它展示了一种重要的计算模型：将一个字符串解释为一段程序并执行该程序得到结果。有了泛型，我们只需实现Stack一次即可使用String值的栈和Double值的栈。</li>
<li>表达式由括号、运算符和操作数（数组）组成。我们根据一下4种情况从左到右逐个将这些实体送入栈处理：
<ol>
<li>将操作数压入操作数栈；</li>
<li>将运算符压入运算符栈；</li>
<li>忽略左括号；</li>
<li>在遇到右括号时，弹出一个运算符，弹出所需数量的操作数，并将运算符和操作数的运算结果压入操作数栈中。</li>
</ol>
</li>
</ul>
<hr />
<p>未完待续……</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 背包 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MathJax相关]]></title>
      <url>http://tech.noexception.cn/2016/11/05/MathJax%25E7%259B%25B8%25E5%2585%25B3-md/</url>
      <content type="html"><![CDATA[<p>本篇记录了一些和MathJax相关的东西，以及数学公式书写的规则还有一些常用的希腊字母</p>
<a id="more"></a>
<h3 id="希腊字母"><a class="markdownIt-Anchor" href="#希腊字母"></a> 希腊字母</h3>
<table>
<thead>
<tr>
<th>字母名称</th>
<th>大写</th>
<th>Markdown原文</th>
<th>小写</th>
<th>Markdown原文</th>
</tr>
</thead>
<tbody>
<tr>
<td>alpha</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></td>
<td><code>A</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span></td>
<td><code>\alpha</code></td>
</tr>
<tr>
<td>beta</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></td>
<td><code>B</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span></td>
<td><code>\beta</code></td>
</tr>
<tr>
<td>gamma</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi></mrow><annotation encoding="application/x-tex">\Gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Γ</span></span></span></span></td>
<td><code>\Gamma</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span></span></td>
<td><code>\gamma</code></td>
</tr>
<tr>
<td>delta</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span></td>
<td><code>\Delta</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span></td>
<td><code>\delta</code></td>
</tr>
<tr>
<td>epsilon</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span></td>
<td><code>E</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span></td>
<td><code>\epsilon</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span></td>
<td><code>\varepsilon</code></td>
<td></td>
</tr>
<tr>
<td>zeta</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></td>
<td><code>Z</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ζ</mi></mrow><annotation encoding="application/x-tex">\zeta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07378em;">ζ</span></span></span></span></td>
<td><code>\zeta</code></td>
</tr>
<tr>
<td>eta</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span></td>
<td><code>H</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span></span></span></span></td>
<td><code>\eta</code></td>
</tr>
<tr>
<td>theta</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span></td>
<td><code>\Theta</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span></td>
<td><code>\theta</code></td>
</tr>
<tr>
<td>iota</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span></td>
<td><code>I</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ι</mi></mrow><annotation encoding="application/x-tex">\iota</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ι</span></span></span></span></td>
<td><code>\iota</code></td>
</tr>
<tr>
<td>kappa</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span></td>
<td><code>K</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding="application/x-tex">\kappa</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">κ</span></span></span></span></td>
<td><code>\kappa</code></td>
</tr>
<tr>
<td>lambda</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Λ</mi></mrow><annotation encoding="application/x-tex">\Lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Λ</span></span></span></span></td>
<td><code>\Lambda</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span></td>
<td><code>\lambda</code></td>
</tr>
<tr>
<td>mu</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></td>
<td><code>M</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span></td>
<td><code>\mu</code></td>
</tr>
<tr>
<td>nu</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></td>
<td><code>N</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ν</mi></mrow><annotation encoding="application/x-tex">\nu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.06366em;">ν</span></span></span></span></td>
<td><code>\nu</code></td>
</tr>
<tr>
<td>xi</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ξ</mi></mrow><annotation encoding="application/x-tex">\Xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ξ</span></span></span></span></td>
<td><code>\Xi</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ξ</mi></mrow><annotation encoding="application/x-tex">\xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span></span></span></span></td>
<td><code>\xi</code></td>
</tr>
<tr>
<td>omicron</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span></td>
<td><code>O</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ο</mi></mrow><annotation encoding="application/x-tex">\omicron</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ο</span></span></span></span></td>
<td><code>\omicron</code></td>
</tr>
<tr>
<td>pi</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Π</span></span></span></span></td>
<td><code>\Pi</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span></td>
<td><code>\pi</code></td>
</tr>
<tr>
<td>rho</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span></td>
<td><code>P</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span></span></span></span></td>
<td><code>\rho</code></td>
</tr>
<tr>
<td>sigma</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Σ</mi></mrow><annotation encoding="application/x-tex">\Sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Σ</span></span></span></span></td>
<td><code>\Sigma</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span></td>
<td><code>\sigma</code></td>
</tr>
<tr>
<td>tau</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></td>
<td><code>T</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span></td>
<td><code>\tau</code></td>
</tr>
<tr>
<td>upsilon</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Υ</mi></mrow><annotation encoding="application/x-tex">\Upsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Υ</span></span></span></span></td>
<td><code>\Upsilon</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>υ</mi></mrow><annotation encoding="application/x-tex">\upsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">υ</span></span></span></span></td>
<td><code>\upsilon</code></td>
</tr>
<tr>
<td>phi</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Φ</span></span></span></span></td>
<td><code>\Phi</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span></td>
<td><code>\phi</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi></mrow><annotation encoding="application/x-tex">\varphi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">φ</span></span></span></span></td>
<td><code>\varphi</code></td>
<td></td>
</tr>
<tr>
<td>chi</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></td>
<td><code>X</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>χ</mi></mrow><annotation encoding="application/x-tex">\chi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">χ</span></span></span></span></td>
<td><code>\chi</code></td>
</tr>
<tr>
<td>psi</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ψ</mi></mrow><annotation encoding="application/x-tex">\Psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ψ</span></span></span></span></td>
<td><code>\Psi</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ψ</mi></mrow><annotation encoding="application/x-tex">\psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span></span></span></span></td>
<td><code>\psi</code></td>
</tr>
<tr>
<td>omega</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></td>
<td><code>\Omega</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></td>
<td><code>\omega</code></td>
</tr>
</tbody>
</table>
<h3 id="括号"><a class="markdownIt-Anchor" href="#括号"></a> 括号</h3>
<ul>
<li>小括号与中括号可以直接使用</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>Markdown原文</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo></mrow><annotation encoding="application/x-tex">\lbrace</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span></span></span></span></td>
<td><code>\lbrace</code></td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\rbrace</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></td>
<td><code>\rbrace</code></td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⟨</mo></mrow><annotation encoding="application/x-tex">\langle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⟨</span></span></span></span></td>
<td><code>\langle</code></td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\rangle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">⟩</span></span></span></span></td>
<td><code>\rangle</code></td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo></mrow><annotation encoding="application/x-tex">\lceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span></span></span></span></td>
<td><code>\lceil</code></td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">⌉</span></span></span></span></td>
<td><code>\rceil</code></td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo></mrow><annotation encoding="application/x-tex">\lfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span></span></span></span></td>
<td><code>\lfloor</code></td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">⌋</span></span></span></span></td>
<td><code>\rfloor</code></td>
</tr>
</tbody>
</table>
<h3 id="mathjax公式编辑"><a class="markdownIt-Anchor" href="#mathjax公式编辑"></a> MathJax公式编辑</h3>
<ol>
<li><strong>行内公式</strong>：行内公式可以与其他内容显示在同一行</li>
</ol>
<pre><code>- 用法：用两个美元符$包裹住公式即可。
- $f(x)=ax+b$
</code></pre>
<ol start="2">
<li><strong>行间公式</strong>：行间公式会占据单独的行。</li>
</ol>
<pre><code>- 用法：公式前后各添加两个美元符
$$
f(x)=ax+b
$$
</code></pre>
<ol start="3">
<li><strong>几个特殊符号</strong></li>
</ol>
<pre><code>- **^表示上标**
  - `$a^2$`
  - $a^2$
- **\_表示下标**
  - 由于markdown与MathJax的渲染有冲突，下划线必须使用反斜杠转义
  - `$a\_2$`
  - $a\_2$
- **{}用于分组**
  - 举个例子，a的b乘c次方，需要对bc进行分组，否则就变成了a的b次方乘c。
  - `$a^{bc}$`
  - $a^{bc}$
- **公式推倒过程**
  - 有时一行放不下所有的推导过程，放到多行并使得每行的等号对齐可以大大增加可读性。
  - 下面这个例子原始形式是A，然后经过三步推导最终得到了D。
  - 以符号 &amp; 的下一个字符进行对齐，末尾的三个反斜杠\用来分割行。
  $$
  \begin {aligned}
  A&amp;=B \\\
  &amp;=C\\\
  &amp;=D
  \end {aligned}
  $$
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin &#123;aligned&#125;</span><br><span class="line">A&amp;&#x3D;B \\\</span><br><span class="line">&amp;&#x3D;C\\\</span><br><span class="line">&amp;&#x3D;D</span><br><span class="line">\end &#123;aligned&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="4">
<li><strong>分段函数</strong></li>
</ol>
<pre><code>- 以符号 &amp; 的下一个字符进行对齐，末尾的三个反斜杠\用来分割行。
$$
sign(x)=\begin {cases}
+1, &amp; x\geq0 \\\
-1, &amp; x&lt;0
\end {cases}
$$
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">sign(x)&#x3D;\begin &#123;cases&#125;</span><br><span class="line">+1, &amp; x\geq0 \\\</span><br><span class="line">-1, &amp; x\&lt;0</span><br><span class="line">\end &#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="5">
<li><strong>分数表示</strong></li>
</ol>
<pre><code>- 用法：\frac后面的两个分组分别作为分子和分母。
- $\frac{1}{6}$
- `$\frac{1}{6}$`
</code></pre>
<h3 id="mathjax用法及例子"><a class="markdownIt-Anchor" href="#mathjax用法及例子"></a> MathJax用法及例子</h3>
<ol>
<li><strong>输入开方</strong></li>
</ol>
<pre><code>- \sqrt{2} 和 \sqrt{3}
- $\sqrt{2}$ 和 $\sqrt{3}$
</code></pre>
<ol start="2">
<li><strong>输入省略号</strong></li>
</ol>
<pre><code>- 数学公式中常见的省略号有两种，\ldots表示与文本底线对齐的省略号，\cdots表示与文本中线对齐的省略号。
- f(x1,x2,\ldots,xn) = x1^2 + x2^2 + \cdots + xn^2
- $f(x1,x2,\ldots,xn) = x1^2 + x2^2 + \cdots + xn^2$
</code></pre>
<ol start="3">
<li><strong>输入矢量</strong></li>
</ol>
<pre><code>- \vec{a} \cdot \vec{b}=0
- $\vec{a} \cdot \vec{b}=0$
</code></pre>
<ol start="4">
<li><strong>输入积分</strong></li>
</ol>
<pre><code>- \int_0^1 x^2 {\rm d}x
- $\int_0^1 x^2 {\rm d}x$
</code></pre>
<ol start="5">
<li><strong>极限运算</strong></li>
</ol>
<pre><code>- \lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}
- $\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$
</code></pre>
<ol start="6">
<li><strong>累加、累乘运算</strong></li>
</ol>
<pre><code>- \sum{i=0}^n \frac{1}{i^2}　和　\prod{i=0}^n \frac{1}{i^2}
- $\sum{i=0}^n \frac{1}{i^2}　和　\prod{i=0}^n \frac{1}{i^2}$
</code></pre>
<ol start="7">
<li><strong>其他特殊字符</strong></li>
</ol>
<ul>
<li>关系运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span></td>
<td>\pm</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span></td>
<td>\times</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span></td>
<td>\div</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∣</mo></mrow><annotation encoding="application/x-tex">\mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel">∣</span></span></span></span></td>
<td>\mid</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∤</mo></mrow><annotation encoding="application/x-tex">\nmid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99253em;vertical-align:-0.25142em;"></span><span class="mrel amsrm">∤</span></span></span></span></td>
<td>\nmid</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span></td>
<td>\cdot</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∘</mo></mrow><annotation encoding="application/x-tex">\circ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">∘</span></span></span></span></td>
<td>\circ</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">\ast</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span></td>
<td>\ast</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⨀</mo></mrow><annotation encoding="application/x-tex">\bigodot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨀</span></span></span></span></td>
<td>\bigodot</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⨂</mo></mrow><annotation encoding="application/x-tex">\bigotimes</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨂</span></span></span></span></td>
<td>\bigotimes</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⨁</mo></mrow><annotation encoding="application/x-tex">\bigoplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨁</span></span></span></span></td>
<td>\bigoplus</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span></td>
<td>\leq</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\geq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span></td>
<td>\geq</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">≠</mi></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span></span></span></span></td>
<td>\neq</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≈</mo></mrow><annotation encoding="application/x-tex">\approx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mrel">≈</span></span></span></span></td>
<td>\approx</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mrel">≡</span></span></span></span></td>
<td>\equiv</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span></span></span></span></td>
<td>\sum</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span></span></span></span></td>
<td>\prod</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">coprod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span></span></span></span></td>
<td>\coprod</td>
</tr>
</tbody>
</table>
<ul>
<li>集合运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span></td>
<td>\in</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∉</mi></mrow><annotation encoding="application/x-tex">\notin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span></span></span></span></td>
<td>\notin</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding="application/x-tex">\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td>
<td>\subset</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span></td>
<td>\subseteq</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊇</mo></mrow><annotation encoding="application/x-tex">\supseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊇</span></span></span></span></td>
<td>\supseteq</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding="application/x-tex">\bigcap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋂</span></span></span></span></td>
<td>\bigcap</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋃</mo></mrow><annotation encoding="application/x-tex">\bigcup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋃</span></span></span></span></td>
<td>\bigcup</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋁</mo></mrow><annotation encoding="application/x-tex">\bigvee</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋁</span></span></span></span></td>
<td>\bigvee</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋀</mo></mrow><annotation encoding="application/x-tex">\bigwedge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋀</span></span></span></span></td>
<td>\bigwedge</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⨄</mo></mrow><annotation encoding="application/x-tex">\biguplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨄</span></span></span></span></td>
<td>\biguplus</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⨆</mo></mrow><annotation encoding="application/x-tex">\bigsqcup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨆</span></span></span></span></td>
<td>\bigsqcup</td>
</tr>
</tbody>
</table>
<ul>
<li>对数运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\log</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span></span></span></span></td>
<td>\log</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>lg</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\lg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span></span></span></span></td>
<td>\lg</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\ln</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">ln</span></span></span></span></td>
<td>\ln</td>
</tr>
</tbody>
</table>
<ul>
<li>三角函数运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">⊥</mi></mrow><annotation encoding="application/x-tex">\bot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">⊥</span></span></span></span></td>
<td>\bot</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∠</mi></mrow><annotation encoding="application/x-tex">\angle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span></span></span></span></td>
<td>\angle</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><msup><mn>0</mn><mo>∘</mo></msup></mrow><annotation encoding="application/x-tex">30^\circ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.674115em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.674115em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∘</span></span></span></span></span></span></span></span></span></span></span></td>
<td>30^\circ</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>sin</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\sin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span></span></span></span></td>
<td>\sin</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>cos</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\cos</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">cos</span></span></span></span></td>
<td>\cos</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>tan</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\tan</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span></span></span></span></td>
<td>\tan</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>cot</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\cot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">cot</span></span></span></span></td>
<td>\cot</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>sec</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\sec</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">sec</span></span></span></span></td>
<td>\sec</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>csc</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\csc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">csc</span></span></span></span></td>
<td>\csc</td>
</tr>
</tbody>
</table>
<ul>
<li>微积分运算符：</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo mathvariant="normal">′</mo></mrow><annotation encoding="application/x-tex">\prime</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">′</span></span></span></span></td>
<td>\prime</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∫</mo></mrow><annotation encoding="application/x-tex">\int</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span></span></span></span></td>
<td>\int</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∬</mo></mrow><annotation encoding="application/x-tex">\iint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0004999999999999727em;">∬</span></span></span></span></td>
<td>\iint</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∭</mo></mrow><annotation encoding="application/x-tex">\iiint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0004999999999999727em;">∭</span></span></span></span></td>
<td>\iiint</td>
</tr>
<tr>
<td><span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \iiiint at position 1: \̲i̲i̲i̲i̲n̲t̲'>\iiiint</span></td>
<td>\iiiint</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∮</mo></mrow><annotation encoding="application/x-tex">\oint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∮</span></span></span></span></td>
<td>\oint</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>lim</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\lim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">lim</span></span></span></span></td>
<td>\lim</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>lim</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\lim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">lim</span></span></span></span></td>
<td>\lim</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></td>
<td>\infty</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∇</mi></mrow><annotation encoding="application/x-tex">\nabla</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">∇</span></span></span></span></td>
<td>\nabla</td>
</tr>
</tbody>
</table>
<ul>
<li>逻辑运算符</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span></span></span></span></td>
<td>\because</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">\therefore</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span></span></span></span></td>
<td>\therefore</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∀</span></span></span></span></td>
<td>\forall</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∃</span></span></span></span></td>
<td>\exists</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≠</mo></mrow><annotation encoding="application/x-tex">\not=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span></span></span></td>
<td>\not=</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⊄</mo></mrow><annotation encoding="application/x-tex">\not\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td>
<td>\not\subset</td>
</tr>
</tbody>
</table>
<ul>
<li>戴帽符号</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>y</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></td>
<td>\hat{y}</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>y</mi><mo>ˇ</mo></mover></mrow><annotation encoding="application/x-tex">\check{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82291em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.62847em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">ˇ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></td>
<td>\check{y}</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>y</mi><mo>˘</mo></mover></mrow><annotation encoding="application/x-tex">\breve{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">˘</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></td>
<td>\breve{y}</td>
</tr>
</tbody>
</table>
<ul>
<li>连线符号</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{a+b+c+d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.97777em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.89444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span></span></span><span style="top:-3.81444em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08333em;"><span></span></span></span></span></span></span></span></span></td>
<td>\overline{a+b+c+d}</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder accentunder="true"><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi></mrow><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">\underline{a+b+c+d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.97777em;vertical-align:-0.2833300000000001em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.7566699999999997em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2833300000000001em;"><span></span></span></span></span></span></span></span></span></td>
<td>\underline{a+b+c+d}</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover><mover><mrow><mi>a</mi><mo>+</mo><munder><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow><mo stretchy="true">⏟</mo></munder><mn>1.0</mn><mo>+</mo><mi>d</mi></mrow><mo stretchy="true">⏞</mo></mover><mn>2.0</mn></mover></mrow><annotation encoding="application/x-tex">\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.7248779999999995em;vertical-align:-0.73133em;"></span><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9935479999999997em;"><span style="top:-3.34244em;"><span class="pstrut" style="height:3.34244em;"></span><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3424399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span class="svg-align" style="top:-2.26867em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13
 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688
 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7
-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214
c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14
 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3
 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0
-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3
 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237
-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.73133em;"><span></span></span></span></span></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span></span></span><span class="svg-align" style="top:-3.79444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117
-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7
 5-6 9-10 13-.7 1-7.3 1-20 1H6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M200428 334
c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14
-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7
 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11
 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M400000 542l
-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5
s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1
c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.73133em;"><span></span></span></span></span></span></span><span style="top:-4.884879999999999em;"><span class="pstrut" style="height:3.34244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">.</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.73133em;"><span></span></span></span></span></span></span></span></span></td>
<td>\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}</td>
</tr>
</tbody>
</table>
<ul>
<li>箭头符号：</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>↑</mo></mrow><annotation encoding="application/x-tex">\uparrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↑</span></span></span></span></td>
<td>\uparrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>↓</mo></mrow><annotation encoding="application/x-tex">\downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↓</span></span></span></span></td>
<td>\downarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇑</mo></mrow><annotation encoding="application/x-tex">\Uparrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇑</span></span></span></span></td>
<td>\Uparrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇓</mo></mrow><annotation encoding="application/x-tex">\Downarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">⇓</span></span></span></span></td>
<td>\Downarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span></td>
<td>\rightarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">←</span></span></span></span></td>
<td>\leftarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span></td>
<td>\Rightarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇐</mo></mrow><annotation encoding="application/x-tex">\Leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇐</span></span></span></span></td>
<td>\Leftarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span></td>
<td>\longrightarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟵</mo></mrow><annotation encoding="application/x-tex">\longleftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟵</span></span></span></span></td>
<td>\longleftarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟹</mo></mrow><annotation encoding="application/x-tex">\Longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟹</span></span></span></span></td>
<td>\Longrightarrow</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟸</mo></mrow><annotation encoding="application/x-tex">\Longleftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟸</span></span></span></span></td>
<td>\Longleftarrow</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>要输出字符　空格　#　$　%　&amp;　_　{　}　，用命令：　\空格　#　$　%　&amp;　_　{　}</p>
</li>
<li>
<p>要对公式的某一部分字符进行字体转换，可以用{\rm 需转换的部分字符}命令，其中\rm可以参照下表选择合适的字体。一般情况下，公式默认为意大利体。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\rm</td>
<td>罗马体</td>
</tr>
<tr>
<td>\it</td>
<td>意大利体</td>
</tr>
<tr>
<td>\bf</td>
<td>黑体</td>
</tr>
<tr>
<td>\cal</td>
<td>花体</td>
</tr>
<tr>
<td>\sl</td>
<td>倾斜体</td>
</tr>
<tr>
<td>\sf</td>
<td>等线体</td>
</tr>
<tr>
<td>\mit</td>
<td>数学斜体</td>
</tr>
<tr>
<td>\tt</td>
<td>打字机字体</td>
</tr>
<tr>
<td>\sc</td>
<td>小体大写字母</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MathJax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++读书笔记——函数]]></title>
      <url>http://tech.noexception.cn/2016/10/08/C-%25E8%25AF%25BB%25E4%25B9%25A6%25E7%25AC%2594%25E8%25AE%25B0%25E2%2580%2594%25E2%2580%2594%25E5%2587%25BD%25E6%2595%25B0/</url>
      <content type="html"><![CDATA[<p>整理读书笔记系列。</p>
<a id="more"></a>
<ul>
<li>C++中的函数传递大致的分为两类：
<ol>
<li>当函数参数为<strong>引用类型</strong>时，它对应的实参被引用传递，或者函数被<strong>传引用调用</strong>。和其他引用一样，引用形参也是它绑定的对象别名；也就是说，引用形参是它对应的实参的别名。</li>
<li>当<strong>实参的值被拷贝给形参</strong>时，形参和实参是两个相互独立的对象。我们说这样的实参被值传递，或者函数被传值调用。</li>
</ol>
</li>
</ul>
<h2 id="1-传值参数"><a class="markdownIt-Anchor" href="#1-传值参数"></a> 1. 传值参数</h2>
<ul>
<li>当初始化一个非引用的变量时，初始值被拷贝给变量。此时，对变量的改动不会影响初始值；</li>
<li><strong>指针形参</strong>
<ul>
<li>指针的行为和其他非引用类型一样。当执行指针拷贝操作时，拷贝的是指针的值。拷贝之后，两个指针是不同的指针。因为指针是我们可以访问它所指向的对象，所以通过指针可以修改它所值对象的值。<br />
s</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Cpp读书笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[js的学习笔记——终篇]]></title>
      <url>http://tech.noexception.cn/2016/09/25/js%25E7%259A%2584%25E5%25AD%25A6%25E4%25B9%25A0%25E7%25AC%2594%25E8%25AE%25B0%25E2%2580%2594%25E2%2580%2594%25E9%25A2%2584%25E5%25A4%2587%25E7%25AF%2587/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鉴于目前Javascript如此火爆，再加上近日微信宣布的“小程序”功能，可想以后的前端工程师是有多么的热门了</p>
<a id="more"></a>
<h2 id="一-js基础语法"><a class="markdownIt-Anchor" href="#一-js基础语法"></a> 一、JS基础语法：</h2>
<ol>
<li>变量的声明：</li>
</ol>
<pre><code>- 语法：``var myname;``
</code></pre>
<ol start="2">
<li>变量赋值：</li>
</ol>
<pre><code>- 我觉得这里没啥好说的了。几乎所有编程语言的赋值都差不多…
</code></pre>
<ol start="3">
<li>表达式：</li>
<li>算术表达式；</li>
<li>字符串表达式；</li>
<li>关系表达式（比较）；</li>
<li>逻辑表达式。</li>
<li>运算符：</li>
<li>赋值运算符：</li>
</ol>
<pre><code>  - ``=``
  - 支持复合赋值运算符，包含但不限于``+=, -=, /=``
2. 算术运算符：
  - `+, -, *, /, %, ++(自加), --(自减)`
3. 字符串运算符：
  - `+,  +=`
4. 比较运算符：
  - `==, !=, ===(比较值及类型), !==(比较值及类型), &lt;, &lt;=, &gt;, &gt;=`
5. 逻辑运算符：
  - `&amp;&amp;(与运算), ||(或运算), !(取反)`
6. 逐位运算符：
7. 特殊运算符：
  1. new 运算符，创建对象（实例）
    - 语法：``对象名称 = new 对象类型(参数)``
  2. this 运算符，表示当前对象
    - 语法：``this.属性``
  3. 条件运算符：
    - 语法：``&lt;条件表达式&gt; ? 第一个值:第二个值``
    - 说明：当条件表达式为真时，执行第一个值，否则执行第二个值，如果有学过其他静态语言的同学，就回很熟悉了^_^
8. 运算符执行的优选顺序：
  - 算数&gt;比较＞逻辑＞赋值
</code></pre>
<h2 id="二-数组"><a class="markdownIt-Anchor" href="#二-数组"></a> 二、数组</h2>
<ol>
<li>创建数组：</li>
</ol>
<pre><code>- ``var myarray = new Array()``
</code></pre>
<ol start="2">
<li>数组赋值：</li>
</ol>
<pre><code>- `var myarray = new Array(66, 88, 99);`
- `var myarray = [66, 88, 99];`
</code></pre>
<ol start="3">
<li>向数组增加一个新元素</li>
</ol>
<pre><code>- ```javascript
    myarray[5] = 22;
    //原数组长为4
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  4. 二维数组：</span><br><span class="line">    - 定义方法一：</span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">  var myarr &#x3D; new Array();</span><br><span class="line">  for(var i &#x3D; 0; i&lt;2; i++)&#123;</span><br><span class="line">      myarr[i] &#x3D; new Array();</span><br><span class="line">      for(var j &#x3D; 0; j&lt;i; j++)&#123;</span><br><span class="line">          myarr[i][j] &#x3D; i+j;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
- 定义方法二：
</code></pre>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Myarr = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]];</span><br></pre></td></tr></table></figure>
<h2 id="三-事件响应"><a class="markdownIt-Anchor" href="#三-事件响应"></a> 三、事件响应</h2>
<ol>
<li>主要事件：</li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onclick</td>
<td>鼠标单机事件</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标经过事件</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标移开事件</td>
</tr>
<tr>
<td>onchange</td>
<td>文本框内容改变事件</td>
</tr>
<tr>
<td>onselect</td>
<td>文本框内容被选中事件</td>
</tr>
<tr>
<td>onfocus</td>
<td>光标聚焦</td>
</tr>
<tr>
<td>onblur</td>
<td>光标离开</td>
</tr>
<tr>
<td>onload</td>
<td>网页导入/加载事件</td>
</tr>
<tr>
<td>onunload</td>
<td>关闭网页/卸载事件</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>获取元素的值和获取方法：</li>
</ol>
<pre><code>- 赋值：`document.getElementById(&quot;is&quot;).value=1;`
- 取值：`var=document.getElementById(&quot;id&quot;).value;`
- 使用 parseInt() 函数可以解析一个字符串，并返回一个整数。
</code></pre>
<h2 id="四-javascript内置对象"><a class="markdownIt-Anchor" href="#四-javascript内置对象"></a> 四、JavaScript内置对象</h2>
<ol>
<li>对象：</li>
</ol>
<pre><code>- JS中所有事物都是对象；
- 每个对象都带有属性方法
</code></pre>
<ol start="2">
<li>Date 日期对象</li>
</ol>
<pre><code>- 语法：`var Udate = new Date();`
- 注意：默认初始值为当前时间（当前电脑系统的时间）。
- 访问方法语法：&lt;日期对象&gt;.&lt;方法&gt;
- Date对象中处理时间和日期的方法：
</code></pre>
<table><tr><th>方法名称</th><th>功能描述</th></tr><tr><td>get/setDate()</td><td>返回/设置日期</td></tr><td>get/setFullYear()</td><td>返回/设置年份，用四位数表示</td><tr><td>get/setMonth()</td><td>返回/设置月份，0表示一月；以此类推</td></tr><tr><td>get/setHours()</td><td>返回/设置小时，24小时制</td></tr><tr><td>get/setMinutes()</td><td>返回/设置分钟数</td></tr><tr><td>get/setSeconds()</td><td>返回/设置秒钟数</td></tr><tr><td>get/setTime()</td><td>返回/设置时间内（毫秒为单位）</td></tr></table>
<ol start="3">
<li>返回/设置年份方法：</li>
</ol>
<pre><code>- eg:
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取：</span></span><br><span class="line">mydate.getFullYear();</span><br><span class="line"><span class="comment">//设置：</span></span><br><span class="line">mydate.setFullYear();</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="4">
<li>返回/设置星期方法：</li>
</ol>
<pre><code>- eg:
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法：</span></span><br><span class="line">getDay();</span><br><span class="line"><span class="comment">//返回的是0-6的数字，0表示星期天，若要返回对应的“星期”，可通过数组完成。</span></span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="5">
<li>返回/设置时间方法：</li>
</ol>
<pre><code>- **方法：**get/setTime();
- **注意：**
  1. 一小时60分，一分60秒，一秒100毫秒；
  2. 时间推迟1小时，就是``x.setTime(x.getTime()+60*60*100);``
</code></pre>
<ol start="6">
<li>String字符串对象（类JAVA）</li>
</ol>
<pre><code>-
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x.length; <span class="comment">//返回字符串的长度</span></span><br><span class="line">x.toUpperCase(); <span class="comment">//转大写字母</span></span><br><span class="line">x.toLowerCase(); <span class="comment">//转小写字母</span></span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="7">
<li>返回指定位置的字符：</li>
</ol>
<pre><code>- **语法：**``stringObject.charAt(index)``
- **参数说明：**
  - `index`：必需，表示字符串某个位置的数字，即字符在字符串中的下标。
</code></pre>
<ol start="8">
<li>返回指定字符串首次出现的位置</li>
</ol>
<pre><code>- **语法：**``stringObject.indexOf(substring,starpos)``
- **参数说明：**
  1. ``substring``：必需，规定需检索的字符串值；
  2. ``starpos``：可选的整数参数，规定在字符串开始检索的位置。它的合法取值是0到stringObject.length-1。如省略该z高数，则将字符串的首字符开始检索。
</code></pre>
<ol start="9">
<li>字符串分割split()</li>
</ol>
<pre><code>- **语法:**``stringObject.split(separator,limit)``
- **参数说明：**
  1. `Separator`：必需。从该参数指定的地方分割stringObject;
  2. `limit`：可选参数；分割的次数，如设置该参数，返回的子串不会多于这个参数指定的数组，如果无此参数为不限制次数
</code></pre>
<ol start="10">
<li>提取字符串substring()</li>
</ol>
<pre><code>- **功能：**用于提取字符串中介于两个指定下标之间的字符。
- **语法：**``stringObject.substring(starPos,stopPos)``
- **参数说明：**
  1. `starPos`： 必需，一个非负的整数，开始的位置；
  2. `stopPos`： 可选，一个非负的整数。结束的位置，如果省略此参数，那么返回的子串会一直到字符串对象的结尾。
- **注意：**
  1. 返回的内容是从star开始（包含star位置的字符）到stop-1处的所有字符，其长度为stop减star
  2. 如果参数star到stop相等，那么该方法返回的就是一个空串（即长度为0的字符串）
  3. 如果star比stop大，那该方法在提取字符串之前会先交换这两个参数
</code></pre>
<ol start="11">
<li>提取指定数目的字符substr()</li>
</ol>
<pre><code>- **功能：**从字符串中提取从starPos位置开始的指定数目的字符串
- **语法：**``stringObject.substr(starPos,length)``
- **参数说明：**
  1. ``starPos``：必需，要提取的子串起始位置。必需是数值。
  2. `length`：可选，提取字符串子串的长度，如果省略，返回从`stringObject`的开始位置starPos到stringObject的结尾的字符
- **注意：**
  - 如果参数starPos是负数，从字符串的尾部开始算起的位置，也就是说，-1指字符串最后一个字符，-2指倒数第二个字符，以此类推，如果starPos为负数且绝对值大于字符串长度，starPos为0.
</code></pre>
<ul>
<li><strong>Math对象</strong>
<ul>
<li>Math对象，提供数据的数学计算</li>
<li>使用Math的属性和方法：
<ul>
<li>eg:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> mypi=<span class="built_in">Math</span>.PI;</span><br><span class="line">  <span class="keyword">var</span> myabs=<span class="built_in">Math</span>.abs(<span class="number">-15</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(mypi);</span><br><span class="line">  <span class="built_in">document</span>.write(myabs);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[js的学习笔记——预备篇]]></title>
      <url>http://tech.noexception.cn/2016/09/22/js%25E7%259A%2584%25E5%25AD%25A6%25E4%25B9%25A0%25E7%25AC%2594%25E8%25AE%25B0/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本篇文章会介绍之前学习Javascript时的一些笔记，苦于不知道可以写些啥有营养的东西。昨晚就忽然想到最近的Javascript这么火爆，于是乎就把以前学习的Javascript的笔记再整理一遍到自己这个“处女”博客吧~哈哈哈~</p>
<a id="more"></a>
<h2 id="一-预备知识"><a class="markdownIt-Anchor" href="#一-预备知识"></a> 一、预备知识：</h2>
<h3 id="1-在html文本中嵌入javascript的方式一共有三种"><a class="markdownIt-Anchor" href="#1-在html文本中嵌入javascript的方式一共有三种"></a> 1. 在HTML文本中嵌入Javascript的方式一共有三种：</h3>
<ol>
<li>内部引用</li>
<li>内联引用</li>
<li>外部引用</li>
</ol>
<ul>
<li>但是，我们用的最多的是<code>外部引用</code>这种方式，如下代码所示：</li>
</ul>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"path/to/your_code.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>上述代码可以放在html页面内的任何位置，具体要放在哪里，视具体情况而定了……</li>
</ul>
<h3 id="2-注释"><a class="markdownIt-Anchor" href="#2-注释"></a> 2. 注释：</h3>
<ul>
<li>关于JS的注释方法，我一直是使用C++风格的注释方法，即：<code>//这是一行注释</code>，可能是用久了就成为习惯了吧，哈哈哈，不过另外值得注意的是，如果是使用“WebStorm”的话，尽量使用快捷键，我记得单行注释的快捷键是：<code>Ctrl + /</code>，要是用到多行注释的时候就可以输入<code>/**</code>然后键入回车即可。</li>
</ul>
<h3 id="3-变量"><a class="markdownIt-Anchor" href="#3-变量"></a> 3. 变量：</h3>
<ol>
<li>定义变量要使用关键字：<code>var</code>，语法：<code>var 变量名</code></li>
<li>命名规则：</li>
<li>变量名必须使用字母、下划线或者美元符号开始；</li>
<li>可以使用任意多个英文字母、数字、下划线或美元符号；</li>
<li>不能使用JS关键字和JS保留字。</li>
<li>注意：</li>
</ol>
<pre><code>- 变量要先声明，再赋值
- 变量可以重复赋值；
- 在JS中区分大小写；
- 变量可以不声明，直接使用，但是不推荐，不规范；
</code></pre>
<h3 id="4-语句"><a class="markdownIt-Anchor" href="#4-语句"></a> 4. 语句</h3>
<ul>
<li>这里常用到的语句无非就是这几种：
<ol>
<li>赋值语句；</li>
<li>判断语句；</li>
<li>循环语句；</li>
<li>选择语句。</li>
</ol>
</li>
</ul>
<h3 id="5-函数"><a class="markdownIt-Anchor" href="#5-函数"></a> 5. 函数</h3>
<ol>
<li>定义的方法：</li>
</ol>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//**</span><br><span class="line">* 函数的参数可以有任意多个</span><br><span class="line">* 函数可以有返回值</span><br><span class="line">**/</span><br><span class="line">function fun1(arg1, arg2)&#123;</span><br><span class="line">    //your code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>函数的调用：</li>
<li>放在<code>&lt;head&gt;</code>标签之间，会自动运行</li>
<li>使用标签<code>&lt;input type=&quot;button&quot; value=&quot;点击&quot; onclick=&quot;函数名&quot;&gt;</code></li>
</ol>
<h2 id="二-js常用的互动方法"><a class="markdownIt-Anchor" href="#二-js常用的互动方法"></a> 二、JS常用的互动方法</h2>
<h3 id="1-内容输出documentwrite"><a class="markdownIt-Anchor" href="#1-内容输出documentwrite"></a> 1. 内容输出（document.write）</h3>
<ul>
<li>document.write可用于直接想HTML输出流写内容。
<ol>
<li>输出内容直接用“双引号”括起来，直接输出引号内的内容。</li>
<li>通过变量输出内容：</li>
</ol>
<ul>
<li>eg: <code>document.write(mystr);</code></li>
</ul>
<ol start="3">
<li>输出多项内容，内容之间用&quot;+&quot;号连接</li>
</ol>
<ul>
<li>eg: <code>document.write(mystr+&quot;Hello&quot;);</code></li>
</ul>
<ol start="4">
<li>输出HTML标签</li>
</ol>
<ul>
<li>eg: <code>document.write(mystr+&quot;&lt;br&gt;&quot;);</code></li>
</ul>
</li>
</ul>
<h3 id="2-alert消息提示窗"><a class="markdownIt-Anchor" href="#2-alert消息提示窗"></a> 2. alert消息提示窗</h3>
<ul>
<li>alert(str)</li>
</ul>
<h3 id="3-确认confirm消息对话框"><a class="markdownIt-Anchor" href="#3-确认confirm消息对话框"></a> 3. 确认（confirm消息对话框）</h3>
<ul>
<li>作用：用于允许用户做选择的动作；</li>
<li>语法：<code>confirm(str);</code>；</li>
<li>参数说明：</li>
</ul>
  <table border=1>
  <tr><td>**str**</td><td>在消息对话框中要显示的文本</td></tr><tr><td>返回值</td><td>Boolean值</td></tr></table>
<h3 id="4-提问prompt消息对话框"><a class="markdownIt-Anchor" href="#4-提问prompt消息对话框"></a> 4. 提问（prompt消息对话框）</h3>
<ul>
<li>**作用：**通常用于询问一些需要用户交互的信息。弹出消息对话框（包含一个确定按钮，取消按钮与一个文本输入框）</li>
<li><strong>语法：</strong><code>prompt(str1,str2);</code></li>
<li><strong>参数说明：</strong></li>
</ul>
  <table><tr><td>**str1**</td><td>要显示在消息对话框的文本，不可修改；</td></tr><tr><td>**str2**</td><td>文本框中的内容，可修改</td></tr></table>
  - **返回值：**
    1. 点击确定按钮，文本款的内容将作为函数返回值；
    2. 点击取消按钮，返回`null`;
<h3 id="5-打开新窗口windowopen"><a class="markdownIt-Anchor" href="#5-打开新窗口windowopen"></a> 5. 打开新窗口（window.open）</h3>
<ul>
<li><strong>作用：</strong><code>open()</code>方法可以查找一个已经存在或者新建的浏览器窗口；</li>
<li><strong>语法：</strong><code>window.open([URL],[窗口名称],[参数字符串])；</code>；</li>
<li><strong>参数说明：</strong>
<ul>
<li>URL:可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档；</li>
<li>窗口名称：可选参数,被打开窗口的名称。
<ol>
<li>该名称由字母、数字、下划线字符组成；</li>
<li><code>_top</code>,<code>_blank</code>,<code>_self</code>具有特殊意义的名称；</li>
</ol>
<ul>
<li><code>_top</code>：框架网页中在上不窗口中显示目标网页；</li>
<li><code>_blank</code>：在新窗口中显示目标网页；</li>
<li><code>_self</code>：在当前窗口显示目标网页。</li>
</ul>
<ol start="3">
<li>相同<code>name</code>的窗口只能创建一个，要想创建多个窗口，则<code>name</code>不能相同。</li>
<li><code>name</code>不能包含空格</li>
</ol>
</li>
<li>参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。</li>
<li><strong>参数表：</strong></li>
</ul>
<table>
<tr><th>参数</th><th>值</th><th>说明</th></tr><tr><td>top</td><td>number</td><td>窗口顶部离开屏幕顶部的像素数</td></tr><tr><td>left</td><td>number</td><td>窗口左端离开屏幕左端的像素数</td></tr><tr><td>width</td><td>number</td><td>窗口的宽度</td></tr><tr><td>height</td><td>number</td><td>窗口的高度</td></tr><tr><td>menubar</td><td>yes,no</td><td>窗口有没有菜单</td></tr><tr><td>toolbar</td><td>yes,no</td><td>窗口有没有工具条</td></tr><tr><td>scroll</td><td>yes,no</td><td>窗口有没有滚动条</td></tr><tr><td>status</td><td>yes,no</td><td>窗口有没有状态栏</td></tr></table>
</li>
</ul>
<h3 id="6-关闭窗口windowclose"><a class="markdownIt-Anchor" href="#6-关闭窗口windowclose"></a> 6. 关闭窗口（window.close）</h3>
<ul>
<li>**作用：**关闭窗口；</li>
<li><strong>语法：</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.close();<span class="comment">//关闭当前窗口</span></span><br><span class="line">&lt;窗口对象&gt;.close();<span class="comment">//关闭指定窗口</span></span><br></pre></td></tr></table></figure>
<pre><code>eg:关闭新建的窗口：
</code></pre>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mywin = <span class="built_in">window</span>.open(<span class="string">'http://imooc.com'</span>);</span><br><span class="line">mywin.close();</span><br></pre></td></tr></table></figure>
<h2 id="三-dom操作"><a class="markdownIt-Anchor" href="#三-dom操作"></a> 三、DOM操作</h2>
<ul>
<li>介绍：
<ul>
<li><strong>文档对象模型（DOM）定义访问和处理HTML文档的标准方法。</strong></li>
<li><strong>HTML文档可以说有节点构成的集合。</strong></li>
</ul>
</li>
</ul>
<h3 id="1-三种常见的dom节点"><a class="markdownIt-Anchor" href="#1-三种常见的dom节点"></a> 1. 三种常见的DOM节点：</h3>
<ol>
<li><strong>元素节点：</strong><code>&lt;html&gt;,&lt;body&gt;,&lt;p&gt;</code>等，即标签；</li>
<li>**文本节点：**向用户展示的内容，如<code>&lt;li&gt;...&lt;/li&gt;</code>中的JavaScript</li>
<li>**属性节点：**元素属性，如<code>&lt;a&gt;</code>标签的链接属性。</li>
</ol>
<h3 id="2-通过id获取元素"><a class="markdownIt-Anchor" href="#2-通过id获取元素"></a> 2. 通过ID获取元素</h3>
<ul>
<li>语法：<code>document.getElementById(&quot;id&quot;);</code>
<ul>
<li>获取的元素是一个对象，如想对元素进行操作，我们要通过它的属性或方法。</li>
</ul>
</li>
</ul>
<h3 id="3-innerhtml属性"><a class="markdownIt-Anchor" href="#3-innerhtml属性"></a> 3. innerHTML属性</h3>
<ul>
<li><strong>语法：</strong><code>object.innerHTML;</code></li>
<li>**作用：**innerHTML属性用于获取或替换HTML元素的内容</li>
<li>
<ol>
<li>Object是获取的元素对象，如通过<code>document.getElementById(&quot;ID&quot;);</code>获取的元素；</li>
<li>innerHTML区分大小写<br />
eg：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mycon = <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"......"</span>+mycon.innerHTML+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">mycon.innerHTML=<span class="string">"New text!"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"..."</span>+mycon.innerHTML+<span class="string">"&lt;br&gt;"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-改变html样式"><a class="markdownIt-Anchor" href="#4-改变html样式"></a> 4. 改变HTML样式：</h3>
<ul>
<li><strong>HTML DOM允许Javascript改变HTML元素的样式</strong></li>
<li><strong>语法：</strong><code>object.style.properly=new style;</code></li>
<li>**注意：**Object是获取的元素对象，如通过<code>getElementById(&quot;ID&quot;);</code>获取的元素。</li>
<li><strong>基本属性表(property)：</strong></li>
</ul>
<table><tr><th>属性</th><th>描述</th></tr><tr><td>backgroundColor</td><td>设置元素背景颜色</td></tr><tr><td>height</td><td>设置元素的高度</td></tr><tr><td>width</td><td>设置元素的宽度</td></tr><tr><td>color</td><td>设置文本的颜色</td></tr><tr><td>font</td><td>在一行设置所有字体的属性</td></tr><tr><td>fontFamily</td><td>设置元素的字体系列</td></tr><tr><td>fontSize</td><td>设置元素的字体大小</td></tr></table>
<h3 id="5-显示和隐藏display属性"><a class="markdownIt-Anchor" href="#5-显示和隐藏display属性"></a> 5. 显示和隐藏(display属性)</h3>
<ul>
<li><strong>网页中经常会看到显示和隐藏的效果，可以通过<code>display</code>属性来设置</strong></li>
<li><strong>语法：</strong><code>Object.style.display=value;</code></li>
<li><strong>注意：</strong>
<ul>
<li><code>Object</code>是获取的元素对象，如通过<code>document.getElementById(&quot;id&quot;)</code>获取的元素。</li>
<li><strong>value的取值：</strong></li>
</ul>
<table><tr><th>值</th><th>描述</th></tr><tr><td>none</td><td>此元素不会被显示（即隐藏）</td></tr><tr><td>block</td><td>此元素显示为块级元素（即显示）</td></tr></table>
</li>
</ul>
<h3 id="6-控制类名classname属性"><a class="markdownIt-Anchor" href="#6-控制类名classname属性"></a> 6. 控制类名（className属性）</h3>
<ul>
<li><strong>className属性设置或返回元素的class属性</strong></li>
<li><strong>语法：</strong><code>Object.className=classname;</code></li>
<li><strong>作用：</strong>
<ol>
<li>获取元素的class属性；</li>
<li>为网页的某个元素指定一个CSS样式来更改元素的外观。</li>
</ol>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[okhttp边学边记]]></title>
      <url>http://tech.noexception.cn/2016/09/19/okhttp%25E8%25BE%25B9%25E5%25AD%25A6%25E8%25BE%25B9%25E8%25AE%25B0/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习安卓一定离不开网络访问，但是官方已经不推荐使用HttpClient了，我们需要一个好用的网络库，这时，就想到了okhttp。</p>
<a id="more"></a>
<h2 id="一-导包"><a class="markdownIt-Anchor" href="#一-导包"></a> 一、导包</h2>
<ul>
<li>对于Android Studio的用户：<code>compile 'com.squareup.okhttp3:okhttp:(insert latest version)'</code>(目前的最新版本是3.4.1)</li>
<li>对于Eclipse的用户：可以直接下载<a href="https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST" target="_blank" rel="noopener">[the lastest JAR]</a>,导入项目中即可。</li>
<li>注意：官方文档里说到，“当使用到快速I/O和resizable buffers的时候需要<a href="https://github.com/square/okio" target="_blank">okio</a>”所以，还有一步：
<ul>
<li>对于Android Studio的用户：<code>compile 'com.squareup.okio:okio:(insert latest version)'</code>(目前的最新版本是1.10.0)</li>
<li>对于Eclipse的用户：下载最近的<a href="https://search.maven.org/remote_content?g=com.squareup.okio&a=okio&v=LATEST" target="_blank" rel="noopener"> [ the lastest JAR ]</a> 即可</li>
</ul>
</li>
</ul>
<h2 id="二-使用步骤"><a class="markdownIt-Anchor" href="#二-使用步骤"></a> 二、使用步骤：</h2>
<ol>
<li>HttpGet</li>
</ol>
<pre><code>- 首先从最常用到的http get请求开始，例子：
- ```java
    //创建okHttp对象
    OkHttpClient client = new OkHttpClient();
    //创建一个Request
    final Request request = new Request.Builder().url(&quot;http://luciferlv.tech&quot;).build();
    //new call
    Call call = client.newCall(request);
    //请求加入调度
    call.enqueue(new CallBack(){
            @Override
            public void onFailure(Request request, IOException e){

            }

            @Override
            public void onResponse(final Response response) throws IOException{
                //String htmlStr = response.body().string();
            }
        })
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- 代码分析：</span><br><span class="line">  1. 发送一个get请求的步骤：首先构造一个Request对象，参数起码有一个url，也可以通过Request.Builder来设置更多的参数如：&#96;header和method&#96;等。</span><br><span class="line">  2. 然后通过request的对象去构造得到一个Call对象，类似于将你的请求封装成了任务，既然是任务，就会有&#96;execute()&#96;和&#96;cancel()&#96;等方法。</span><br><span class="line">  3. 最后，我们希望以**异步**的方式去执行请求，所以我们调用的是&#96;call.enqueue&#96;，将call加入调度队列，然后等待任务执行完成，我们在CallBack中即可得到结果。</span><br><span class="line">  - **注意：**</span><br><span class="line">    - &#96;onResponse&#96;回调的参数是response，一般情况下，比如我们希望获得返回的字符串，可以通过&#96;response.body().string()&#96;获取；如果希望获得返回的二进制字节数组，则调用&#96;response.body().bytes();&#96;如果想拿到返回的inputStream，则调用&#96;response.body().byteStream();&#96;，我们能拿到&#96;inputStream&#96;就可以通过IO的方式下载大文件（写文件）。</span><br><span class="line">    - 还有一个问题&#96;onResponse&#96;执行的线程并不是UI线程。如果希望操作控件，还是需要用到handler等。如：</span><br><span class="line">    - &#96;&#96;&#96;java</span><br><span class="line">        @Override</span><br><span class="line">        public void onResponse(final Response response) throws IOException&#123;</span><br><span class="line">            final String res &#x3D; response.body().string();</span><br><span class="line">            runOnUiThread(new Runnable()&#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run()&#123;</span><br><span class="line">                    mTextView.setText(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
    - 我们这里是异步的方式去执行，当然也支持阻塞的方式，上面也说了Call有一个`execute()`方法，你也可以直接调用`call.execute()`通过返回一个`Response`。
</code></pre>
<ol start="2">
<li>HttpPost携带参数</li>
</ol>
<pre><code>- 当请求需要提交参数的时候，我们就会用到post请求，和Get不同的就是Request构造的不同
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Request request = buildMultipartFormRequest(url, <span class="keyword">new</span> File[]&#123;file&#125;, <span class="keyword">new</span> String[]&#123;fileKey&#125;, <span class="keyword">null</span>);</span><br><span class="line">FormEncodingBuilder builder = <span class="keyword">new</span> FormEncodingBuilder();</span><br><span class="line">builder.add(<span class="string">"username"</span>, <span class="string">"Lucifer"</span>);</span><br><span class="line"></span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder.url(url).post(builder.build()).build();</span><br><span class="line">client.newCall(request).enqueue(<span class="keyword">new</span> CallBack()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
- 大家都清除，post的矢耦，参数是包含在请求体中的；所以我们通过FormEncodingBuilder。添加多个String键值对，然后去构造RequestBody，最后完成我们Request的构造。后面的就和上面的是一样的了。
</code></pre>
<ol start="3">
<li>基于http的文件上传</li>
</ol>
<pre><code>- 接下来我们再介绍一个可以构造RequestBody的Builder，叫做`MultipartBuilder`。当我们需要做类似与表单上传的时候，就可以用它来构造我们的requestBody。
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"balabala.mp4"</span>);</span><br><span class="line"></span><br><span class="line">RequestBody fileBody = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), file);</span><br><span class="line"></span><br><span class="line">RequestBody requestBody = <span class="keyword">new</span> MultipartBuilder()</span><br><span class="line">      .type(MultipartBuilder.FORM)</span><br><span class="line">      .addPart(Headers.of(<span class="string">"Content-Dispostion"</span>, <span class="string">"form-data; name=\"username\""</span>), RequestBody.create(<span class="keyword">null</span>, <span class="string">"Lucifer"</span>))</span><br><span class="line">      .addPart(Heafers.of(<span class="string">"Content-Dispostion"</span>, <span class="string">"form-data; name=\"mFile\"; fileName=\"wjd.mp4\""</span>), fileBody)</span><br><span class="line">      .build();</span><br><span class="line"></span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">    .url(<span class="string">"http://192.168.1.103:8080/okHttpServer/fileUpload"</span>)</span><br><span class="line">    .post(requestBody)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">Call call = client.newCall(request);</span><br><span class="line">call.enqueue(<span class="keyword">new</span> CallBack()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
- 上述代码向服务器传递了一个键值对`username: Lucifer`和一个文件。我们通过MultipartBuilder的addPart()方法可以添加键值对或者文件。
- 其实类似于我们拼接浏览器行为的方式
- **图片下载：**通过回调的Response拿到byte[]然后decode成图片；
- **文件下载：**通过拿到inputStream做写文件操作。
</code></pre>
<h2 id="三-封装"><a class="markdownIt-Anchor" href="#三-封装"></a> 三、封装</h2>
<ul>
<li>由于按照上述的代码，请求多了重复的代码就多了，我们就希望封装这些代码</li>
</ul>
<ol>
<li>使用：</li>
<li>一般的get请求</li>
</ol>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClientManager.getAsyn(<span class="string">"https://www.baidu.com"</span>, <span class="keyword">new</span> OkHttpClientManager.ResultCallBack&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Request request, Exception e)</span></span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String u)</span></span>&#123;</span><br><span class="line">        mTextView.setText(u);<span class="comment">//这里是UI线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
- 对于一把的请求，我们希望给个url，然后CallBack里面直接操作控件。
2. 文件上传且携带参数
  - 我们希望提供一个方法，传入url, params, file, callback即可。
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClientManager.postAsyn(<span class="string">"http://192.168.1.103:8080/okHttpServer/fileUpload"</span>, <span class="comment">//参数1</span></span><br><span class="line">    <span class="keyword">new</span> OkHttpClientManager.ResultCallBack&lt;String&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Request request, IOException e)</span></span>&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String result)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="comment">//参数2</span></span><br><span class="line">    file, <span class="comment">//参数3</span></span><br><span class="line">    <span class="string">"mFile"</span>,<span class="comment">//参数4</span></span><br><span class="line">    <span class="keyword">new</span> OkHttpClientManager.Param[]&#123;</span><br><span class="line">        <span class="keyword">new</span> OkHttpClientManager.param(<span class="string">"username"</span>, <span class="string">"lt"</span>),</span><br><span class="line">        <span class="keyword">new</span> OkHttpClientManager.param(<span class="string">"password"</span>, <span class="string">"123"</span>)</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
  - 参数3为file，参数4为file对应的name，这个name不是文件的名字；
  - 对应于http中的`&lt;input type=&quot;file&quot; name=&quot;mFile&quot; &gt;`
  - 对应的是name后面的值，即mFile。
3. 文件下载
  - 对于文件下载，提供url，目标dir，callback即可。
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClientManager.downloadAsyn(<span class="string">"http://192.168.1.103:8080/okHttpServer/files/message_01.png"</span>,<span class="comment">//</span></span><br><span class="line">    Environment.getExternalStorageDirectory().getAbsolutePath(),<span class="comment">//</span></span><br><span class="line">    <span class="keyword">new</span> OkHttpClientManager.ResultCallBack&lt;String&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Request request, IOException e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span></span>&#123;</span><br><span class="line">            <span class="comment">//文件下载成功，这里回调的response为文件的absolutePath</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

4. 展示图片
  - 展示图片，我们希望提供一个url和一个imageView，如果下载成功，直接帮我们设置上即可。
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClientManager.displayImage(mImageView, <span class="string">"http://192.168.1.103:8080/20150817/1.jpg"</span>);</span><br></pre></td></tr></table></figure>
  - 内部会自动根据imageView的大小自动对图片进行合适的压缩。虽然，这里可能不适合一次性加载大量图片的场景，但是对于app中偶尔有几个图片的加载，还是可用的。
</code></pre>
<h2 id="四-整合gson"><a class="markdownIt-Anchor" href="#四-整合gson"></a> 四、整合Gson</h2>
<ul>
<li>项目中使用时，服务端返回的是Json字符串，希望客户端回调可以直接拿到对象，于是整合进入Gson。</li>
</ul>
<ol>
<li>直接回调对象</li>
</ol>
<pre><code>- 例如现在有个User实体类：
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span>+</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">",password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
- 服务端返回：``{&quot;username&quot;:&quot;lt&quot;, &quot;password&quot;:&quot;123&quot;}``
- 客户端可以如下方式的调用：
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClientManager.getAsyn(<span class="string">"http://192.168.56.1:8080/okHttpServer/user!getUser"</span>,</span><br><span class="line">    <span class="keyword">new</span> OkHttpClientManager.ResultCallBack&lt;User&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Request request, Exception e)</span></span>&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">            mTextView.setText(user.toString());<span class="comment">//UI线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
- 我们传入泛型User，在onResponse里面直接回调User对象。
- **注意：**如果在`json字符串-&gt;实体对象`过程中发生错误，程序不会崩溃，`onError`方法会被回调。
</code></pre>
<ol start="2">
<li>回调对象集合</li>
</ol>
<pre><code>- 依然是上述的User类，服务端返回
  - ``[{&quot;username&quot;:&quot;lt&quot;,&quot;password&quot;:&quot;123&quot;},{&quot;username&quot;:&quot;chl&quot;,&quot;password&quot;:&quot;12345&quot;}]``
- 则客户端可以如下调用：
  - ```java
      OkHttpClientManager.getAsyn(&quot;http://192.168.56.1:8080/okHttpServer/user!getUsers&quot;,//
          new OkHttpClientManager.ResultCallBack&lt;List&lt;User&gt;&gt;(){
              @Override
              public void onError(Request request, Exception e){
                  e.printStackTrace();
              }

              @Override
              public void onResponse(List&lt;User&gt; us){
                  Log.e(&quot;TAG&quot;, us.size() + &quot; &quot;);
                  mTextView.setText(us.get(1).toString());
              }
          });
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br></pre></td><td class="code"><pre><span class="line">      - 唯一的区别，就是泛型变成了&#96;List&lt;User&gt;&#96;。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### OkHttpClientManager的源码</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class OkHttpClientManager</span><br><span class="line">&#123;</span><br><span class="line">    private static OkHttpClientManager mInstance;</span><br><span class="line">    private OkHttpClient mOkHttpClient;</span><br><span class="line">    private Handler mDelivery;</span><br><span class="line">    private Gson mGson;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static final String TAG &#x3D; &quot;OkHttpClientManager&quot;;</span><br><span class="line"></span><br><span class="line">    private OkHttpClientManager()</span><br><span class="line">    &#123;</span><br><span class="line">        mOkHttpClient &#x3D; new OkHttpClient();</span><br><span class="line">        &#x2F;&#x2F;cookie enabled</span><br><span class="line">        mOkHttpClient.setCookieHandler(new CookieManager(null, CookiePolicy.ACCEPT_ORIGINAL_SERVER));</span><br><span class="line">        mDelivery &#x3D; new Handler(Looper.getMainLooper());</span><br><span class="line">        mGson &#x3D; new Gson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static OkHttpClientManager getInstance()</span><br><span class="line">    &#123;</span><br><span class="line">        if (mInstance &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            synchronized (OkHttpClientManager.class)</span><br><span class="line">            &#123;</span><br><span class="line">                if (mInstance &#x3D;&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    mInstance &#x3D; new OkHttpClientManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 同步的Get请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @return Response</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Response _getAsyn(String url) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        final Request request &#x3D; new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line">        Call call &#x3D; mOkHttpClient.newCall(request);</span><br><span class="line">        Response execute &#x3D; call.execute();</span><br><span class="line">        return execute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 同步的Get请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @return 字符串</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String _getAsString(String url) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Response execute &#x3D; _getAsyn(url);</span><br><span class="line">        return execute.body().string();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异步的get请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param callback</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _getAsyn(String url, final ResultCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        final Request request &#x3D; new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 同步的Post请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param params post的参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Response _post(String url, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildPostRequest(url, params);</span><br><span class="line">        Response response &#x3D; mOkHttpClient.newCall(request).execute();</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 同步的Post请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param params post的参数</span><br><span class="line">     * @return 字符串</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String _postAsString(String url, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Response response &#x3D; _post(url, params);</span><br><span class="line">        return response.body().string();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异步的post请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param callback</span><br><span class="line">     * @param params</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _postAsyn(String url, final ResultCallback callback, Param... params)</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildPostRequest(url, params);</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异步的post请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param callback</span><br><span class="line">     * @param params</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _postAsyn(String url, final ResultCallback callback, Map&lt;String, String&gt; params)</span><br><span class="line">    &#123;</span><br><span class="line">        Param[] paramsArr &#x3D; map2Params(params);</span><br><span class="line">        Request request &#x3D; buildPostRequest(url, paramsArr);</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 同步基于post的文件上传</span><br><span class="line">     *</span><br><span class="line">     * @param params</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Response _post(String url, File[] files, String[] fileKeys, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildMultipartFormRequest(url, files, fileKeys, params);</span><br><span class="line">        return mOkHttpClient.newCall(request).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Response _post(String url, File file, String fileKey) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildMultipartFormRequest(url, new File[]&#123;file&#125;, new String[]&#123;fileKey&#125;, null);</span><br><span class="line">        return mOkHttpClient.newCall(request).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Response _post(String url, File file, String fileKey, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildMultipartFormRequest(url, new File[]&#123;file&#125;, new String[]&#123;fileKey&#125;, params);</span><br><span class="line">        return mOkHttpClient.newCall(request).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异步基于post的文件上传</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param callback</span><br><span class="line">     * @param files</span><br><span class="line">     * @param fileKeys</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _postAsyn(String url, ResultCallback callback, File[] files, String[] fileKeys, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildMultipartFormRequest(url, files, fileKeys, params);</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异步基于post的文件上传，单文件不带参数上传</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param callback</span><br><span class="line">     * @param file</span><br><span class="line">     * @param fileKey</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _postAsyn(String url, ResultCallback callback, File file, String fileKey) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildMultipartFormRequest(url, new File[]&#123;file&#125;, new String[]&#123;fileKey&#125;, null);</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异步基于post的文件上传，单文件且携带其他form参数上传</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param callback</span><br><span class="line">     * @param file</span><br><span class="line">     * @param fileKey</span><br><span class="line">     * @param params</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _postAsyn(String url, ResultCallback callback, File file, String fileKey, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Request request &#x3D; buildMultipartFormRequest(url, new File[]&#123;file&#125;, new String[]&#123;fileKey&#125;, params);</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 异步下载文件</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param destFileDir 本地文件存储的文件夹</span><br><span class="line">     * @param callback</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _downloadAsyn(final String url, final String destFileDir, final ResultCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        final Request request &#x3D; new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line">        final Call call &#x3D; mOkHttpClient.newCall(request);</span><br><span class="line">        call.enqueue(new Callback()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(final Request request, final IOException e)</span><br><span class="line">            &#123;</span><br><span class="line">                sendFailedStringCallback(request, e, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Response response)</span><br><span class="line">            &#123;</span><br><span class="line">                InputStream is &#x3D; null;</span><br><span class="line">                byte[] buf &#x3D; new byte[2048];</span><br><span class="line">                int len &#x3D; 0;</span><br><span class="line">                FileOutputStream fos &#x3D; null;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    is &#x3D; response.body().byteStream();</span><br><span class="line">                    File file &#x3D; new File(destFileDir, getFileName(url));</span><br><span class="line">                    fos &#x3D; new FileOutputStream(file);</span><br><span class="line">                    while ((len &#x3D; is.read(buf)) !&#x3D; -1)</span><br><span class="line">                    &#123;</span><br><span class="line">                        fos.write(buf, 0, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    fos.flush();</span><br><span class="line">                    &#x2F;&#x2F;如果下载文件成功，第一个参数为文件的绝对路径</span><br><span class="line">                    sendSuccessResultCallback(file.getAbsolutePath(), callback);</span><br><span class="line">                &#125; catch (IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    sendFailedStringCallback(response.request(), e, callback);</span><br><span class="line">                &#125; finally</span><br><span class="line">                &#123;</span><br><span class="line">                    try</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (is !&#x3D; null) is.close();</span><br><span class="line">                    &#125; catch (IOException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                    try</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (fos !&#x3D; null) fos.close();</span><br><span class="line">                    &#125; catch (IOException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getFileName(String path)</span><br><span class="line">    &#123;</span><br><span class="line">        int separatorIndex &#x3D; path.lastIndexOf(&quot;&#x2F;&quot;);</span><br><span class="line">        return (separatorIndex &lt; 0) ? path : path.substring(separatorIndex + 1, path.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 加载图片</span><br><span class="line">     *</span><br><span class="line">     * @param view</span><br><span class="line">     * @param url</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void _displayImage(final ImageView view, final String url, final int errorResId)</span><br><span class="line">    &#123;</span><br><span class="line">        final Request request &#x3D; new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line">        Call call &#x3D; mOkHttpClient.newCall(request);</span><br><span class="line">        call.enqueue(new Callback()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Request request, IOException e)</span><br><span class="line">            &#123;</span><br><span class="line">                setErrorResId(view, errorResId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Response response)</span><br><span class="line">            &#123;</span><br><span class="line">                InputStream is &#x3D; null;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    is &#x3D; response.body().byteStream();</span><br><span class="line">                    ImageUtils.ImageSize actualImageSize &#x3D; ImageUtils.getImageSize(is);</span><br><span class="line">                    ImageUtils.ImageSize imageViewSize &#x3D; ImageUtils.getImageViewSize(view);</span><br><span class="line">                    int inSampleSize &#x3D; ImageUtils.calculateInSampleSize(actualImageSize, imageViewSize);</span><br><span class="line">                    try</span><br><span class="line">                    &#123;</span><br><span class="line">                        is.reset();</span><br><span class="line">                    &#125; catch (IOException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        response &#x3D; _getAsyn(url);</span><br><span class="line">                        is &#x3D; response.body().byteStream();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    BitmapFactory.Options ops &#x3D; new BitmapFactory.Options();</span><br><span class="line">                    ops.inJustDecodeBounds &#x3D; false;</span><br><span class="line">                    ops.inSampleSize &#x3D; inSampleSize;</span><br><span class="line">                    final Bitmap bm &#x3D; BitmapFactory.decodeStream(is, null, ops);</span><br><span class="line">                    mDelivery.post(new Runnable()</span><br><span class="line">                    &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void run()</span><br><span class="line">                        &#123;</span><br><span class="line">                            view.setImageBitmap(bm);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; catch (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    setErrorResId(view, errorResId);</span><br><span class="line"></span><br><span class="line">                &#125; finally</span><br><span class="line">                &#123;</span><br><span class="line">                    if (is !&#x3D; null) try</span><br><span class="line">                    &#123;</span><br><span class="line">                        is.close();</span><br><span class="line">                    &#125; catch (IOException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void setErrorResId(final ImageView view, final int errorResId)</span><br><span class="line">    &#123;</span><br><span class="line">        mDelivery.post(new Runnable()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run()</span><br><span class="line">            &#123;</span><br><span class="line">                view.setImageResource(errorResId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;*************对外公布的方法************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static Response getAsyn(String url) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        return getInstance()._getAsyn(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String getAsString(String url) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        return getInstance()._getAsString(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void getAsyn(String url, ResultCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._getAsyn(url, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Response post(String url, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        return getInstance()._post(url, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String postAsString(String url, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        return getInstance()._postAsString(url, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void postAsyn(String url, final ResultCallback callback, Param... params)</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._postAsyn(url, callback, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void postAsyn(String url, final ResultCallback callback, Map&lt;String, String&gt; params)</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._postAsyn(url, callback, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static Response post(String url, File[] files, String[] fileKeys, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        return getInstance()._post(url, files, fileKeys, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Response post(String url, File file, String fileKey) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        return getInstance()._post(url, file, fileKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Response post(String url, File file, String fileKey, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        return getInstance()._post(url, file, fileKey, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void postAsyn(String url, ResultCallback callback, File[] files, String[] fileKeys, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._postAsyn(url, callback, files, fileKeys, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void postAsyn(String url, ResultCallback callback, File file, String fileKey) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._postAsyn(url, callback, file, fileKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void postAsyn(String url, ResultCallback callback, File file, String fileKey, Param... params) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._postAsyn(url, callback, file, fileKey, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void displayImage(final ImageView view, String url, int errorResId) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._displayImage(view, url, errorResId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void displayImage(final ImageView view, String url)</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._displayImage(view, url, -1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void downloadAsyn(String url, String destDir, ResultCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        getInstance()._downloadAsyn(url, destDir, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;****************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Request buildMultipartFormRequest(String url, File[] files,</span><br><span class="line">                                              String[] fileKeys, Param[] params)</span><br><span class="line">    &#123;</span><br><span class="line">        params &#x3D; validateParam(params);</span><br><span class="line"></span><br><span class="line">        MultipartBuilder builder &#x3D; new MultipartBuilder()</span><br><span class="line">                .type(MultipartBuilder.FORM);</span><br><span class="line"></span><br><span class="line">        for (Param param : params)</span><br><span class="line">        &#123;</span><br><span class="line">            builder.addPart(Headers.of(&quot;Content-Disposition&quot;, &quot;form-data; name&#x3D;\&quot;&quot; + param.key + &quot;\&quot;&quot;),</span><br><span class="line">                    RequestBody.create(null, param.value));</span><br><span class="line">        &#125;</span><br><span class="line">        if (files !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            RequestBody fileBody &#x3D; null;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; files.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                File file &#x3D; files[i];</span><br><span class="line">                String fileName &#x3D; file.getName();</span><br><span class="line">                fileBody &#x3D; RequestBody.create(MediaType.parse(guessMimeType(fileName)), file);</span><br><span class="line">                &#x2F;&#x2F;TODO 根据文件名设置contentType</span><br><span class="line">                builder.addPart(Headers.of(&quot;Content-Disposition&quot;,</span><br><span class="line">                                &quot;form-data; name&#x3D;\&quot;&quot; + fileKeys[i] + &quot;\&quot;; filename&#x3D;\&quot;&quot; + fileName + &quot;\&quot;&quot;),</span><br><span class="line">                        fileBody);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RequestBody requestBody &#x3D; builder.build();</span><br><span class="line">        return new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .post(requestBody)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String guessMimeType(String path)</span><br><span class="line">    &#123;</span><br><span class="line">        FileNameMap fileNameMap &#x3D; URLConnection.getFileNameMap();</span><br><span class="line">        String contentTypeFor &#x3D; fileNameMap.getContentTypeFor(path);</span><br><span class="line">        if (contentTypeFor &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            contentTypeFor &#x3D; &quot;application&#x2F;octet-stream&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return contentTypeFor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Param[] validateParam(Param[] params)</span><br><span class="line">    &#123;</span><br><span class="line">        if (params &#x3D;&#x3D; null)</span><br><span class="line">            return new Param[0];</span><br><span class="line">        else return params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Param[] map2Params(Map&lt;String, String&gt; params)</span><br><span class="line">    &#123;</span><br><span class="line">        if (params &#x3D;&#x3D; null) return new Param[0];</span><br><span class="line">        int size &#x3D; params.size();</span><br><span class="line">        Param[] res &#x3D; new Param[size];</span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries &#x3D; params.entrySet();</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        for (Map.Entry&lt;String, String&gt; entry : entries)</span><br><span class="line">        &#123;</span><br><span class="line">            res[i++] &#x3D; new Param(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final String SESSION_KEY &#x3D; &quot;Set-Cookie&quot;;</span><br><span class="line">    private static final String mSessionKey &#x3D; &quot;JSESSIONID&quot;;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, String&gt; mSessions &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    private void deliveryResult(final ResultCallback callback, Request request)</span><br><span class="line">    &#123;</span><br><span class="line">        mOkHttpClient.newCall(request).enqueue(new Callback()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(final Request request, final IOException e)</span><br><span class="line">            &#123;</span><br><span class="line">                sendFailedStringCallback(request, e, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(final Response response)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    final String string &#x3D; response.body().string();</span><br><span class="line">                    if (callback.mType &#x3D;&#x3D; String.class)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sendSuccessResultCallback(string, callback);</span><br><span class="line">                    &#125; else</span><br><span class="line">                    &#123;</span><br><span class="line">                        Object o &#x3D; mGson.fromJson(string, callback.mType);</span><br><span class="line">                        sendSuccessResultCallback(o, callback);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125; catch (IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    sendFailedStringCallback(response.request(), e, callback);</span><br><span class="line">                &#125; catch (com.google.gson.JsonParseException e)&#x2F;&#x2F;Json解析的错误</span><br><span class="line">                &#123;</span><br><span class="line">                    sendFailedStringCallback(response.request(), e, callback);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void sendFailedStringCallback(final Request request, final Exception e, final ResultCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        mDelivery.post(new Runnable()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run()</span><br><span class="line">            &#123;</span><br><span class="line">                if (callback !&#x3D; null)</span><br><span class="line">                    callback.onError(request, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void sendSuccessResultCallback(final Object object, final ResultCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        mDelivery.post(new Runnable()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run()</span><br><span class="line">            &#123;</span><br><span class="line">                if (callback !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    callback.onResponse(object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Request buildPostRequest(String url, Param[] params)</span><br><span class="line">    &#123;</span><br><span class="line">        if (params &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            params &#x3D; new Param[0];</span><br><span class="line">        &#125;</span><br><span class="line">        FormEncodingBuilder builder &#x3D; new FormEncodingBuilder();</span><br><span class="line">        for (Param param : params)</span><br><span class="line">        &#123;</span><br><span class="line">            builder.add(param.key, param.value);</span><br><span class="line">        &#125;</span><br><span class="line">        RequestBody requestBody &#x3D; builder.build();</span><br><span class="line">        return new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .post(requestBody)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static abstract class ResultCallback&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Type mType;</span><br><span class="line"></span><br><span class="line">        public ResultCallback()</span><br><span class="line">        &#123;</span><br><span class="line">            mType &#x3D; getSuperclassTypeParameter(getClass());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static Type getSuperclassTypeParameter(Class&lt;?&gt; subclass)</span><br><span class="line">        &#123;</span><br><span class="line">            Type superclass &#x3D; subclass.getGenericSuperclass();</span><br><span class="line">            if (superclass instanceof Class)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new RuntimeException(&quot;Missing type parameter.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            ParameterizedType parameterized &#x3D; (ParameterizedType) superclass;</span><br><span class="line">            return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public abstract void onError(Request request, Exception e);</span><br><span class="line"></span><br><span class="line">        public abstract void onResponse(T response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Param</span><br><span class="line">    &#123;</span><br><span class="line">        public Param()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Param(String key, String value)</span><br><span class="line">        &#123;</span><br><span class="line">            this.key &#x3D; key;</span><br><span class="line">            this.value &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String key;</span><br><span class="line">        String value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<hr />
<p>参考文献：</p>
<ul>
<li><a href="https://square.github.io/okhttp/" target="_blank">[okhttp官方文档]</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/23781773" target="_blank">[ 张鸿洋的博客——从原理角度解析Android （Java） http 文件上传 ]</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/47911083" target="_blank">[Android OkHttp完全解析]</a></li>
<li><a href="https://square.github.io/okhttp/3.x/okhttp/" target="_blank">[OkHttp官方API文档]</a></li>
<li><a href="https://github.com/square/okhttp/" target="_blank" rel="noopener">https://github.com/square/okhttp/</a></li>
<li><a href="https://github.com/hongyangAndroid/okhttp-utils" target="_blank" rel="noopener">https://github.com/hongyangAndroid/okhttp-utils</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中的正则表达式]]></title>
      <url>http://tech.noexception.cn/2016/09/17/Java%25E4%25B8%25AD%25E7%259A%2584%25E6%25AD%25A3%25E5%2588%2599%25E8%25A1%25A8%25E8%25BE%25BE%25E5%25BC%258F/</url>
      <content type="html"><![CDATA[<p>        很久以前，正则表达式就已经整合到标准Unix工具集之中，例如sed和awk，以及程序设计语言之中了，例如Python和Perl。而在JAVA中，字符串操作还主要集中于String、StringBuffer和StringTokenizer类。与正则表达式相比较，他们只能提供相当简单的功能。</p>
<a id="more"></a>
<h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3>
<ul>
<li>一般来说，正则表达式就是以某种方式描述字符串，因此你可以说：“如果一个字符串含有这些东西，那么它就是我正在找的东西。”例如，要找一个数字，它可能有一个负号在最前面，那你就写一个负号加上一个问号，就像这样：<code>-?</code> 要描述一个整数，你可以说它有一位或多位阿拉伯数字。在正则表达式中，用<code>\d</code>表示一位数字。如果在其他语言中使用过正则表达式，那你立刻就能发现Java对反斜杠<code>\</code>的不同处理。在其他语言中，<code>\\</code>表示“我想要在正则表达式中插入一个普通的（字面上的）反斜线，请不要给它任何特殊意义。”而在Java中，<code>\\</code>的意思是“我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。”例如，如果你想表示一个数字，那么正则表达式应该是<code>\\d</code>。如果你想插入一个普通的反斜线，则应该这样<code>\\\\</code>。不过换行和制表符之类的东西只需要使用单反斜线：<code>\n\t</code>。</li>
<li>要表示“一个或多个之前的表达式”，应该使用<code>+</code>。所以，如果要表示“可能有一个负号后面跟着一位或多位数字”，可以这样：<code>-?\\d+</code></li>
<li>String类还自带了一个非常有用的正则表达式工具——<code>split()</code>方法，其功能是“将字符串从正则表达式匹配的地方切开。”</li>
</ul>
<h3 id="创建正则表达式"><a class="markdownIt-Anchor" href="#创建正则表达式"></a> 创建正则表达式</h3>
<ul>
<li>我们首先从正则表达式可能存在的构造集中选取一个很有用的子集，以此开始学习正则表达式。正则表达式的完整构造子列表，<strong>请参考JDK文档<code>java.util.regex</code>包中的<code>Pattern</code>类。</strong> <strong><a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" target="_blank" >[Pattern]</strong></li>
</ul>
<h3 id="量词"><a class="markdownIt-Anchor" href="#量词"></a> 量词</h3>
<ul>
<li>量词描述一个模式吸收输入文本的方式：
<ul>
<li>贪婪型：量词总是贪婪的，除非有其他的选项被设置。贪婪表达式会为所有可能的模式发现尽可能多的匹配。导致此问题的一个典型理由就是假定我们的模式仅能匹配第一个可能的字符组，如果它是贪婪的，那么它就会继续往下匹配。</li>
<li>勉强型：用问号来指定，这个量词匹配满足模式所需的最少字符数。因此也称作懒惰的、最少占匹配的、非贪婪的或不贪婪的。</li>
<li>占有型：目前，这种类型的量词只有在Java语言中才可用（其他语言中不可用），并且也更高级，因此我们大概不会立刻用到它。当正则表达式被应用于字符串时，它会产生相当多的状态，以便在匹配失败时可以回溯。而“占有的”量词并不保存这些中间状态，因此它们可以防止回溯。它们常常用于防止正则表达式时空，因此可以使正则表达式执行起来更有效。</li>
</ul>
</li>
</ul>
<h3 id="pattern和matcher"><a class="markdownIt-Anchor" href="#pattern和matcher"></a> Pattern和Matcher</h3>
<h3 id="split"><a class="markdownIt-Anchor" href="#split"></a> split()</h3>
<h3 id="替换操作"><a class="markdownIt-Anchor" href="#替换操作"></a> 替换操作</h3>
<h3 id="reset"><a class="markdownIt-Anchor" href="#reset"></a> reset()</h3>
<h3 id="正则表达式与java-io"><a class="markdownIt-Anchor" href="#正则表达式与java-io"></a> 正则表达式与Java I/O</h3>
<hr />
<p>参考文献:</p>
<ul>
<li>《Think in Java(4 Edtion)》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于英语学习]]></title>
      <url>http://tech.noexception.cn/2016/09/12/%25E5%2585%25B3%25E4%25BA%258E%25E8%258B%25B1%25E8%25AF%25AD%25E5%25AD%25A6%25E4%25B9%25A0/</url>
      <content type="html"><![CDATA[<br>
<a id="more"></a>
<p><a href="http://www.tianya.cn/10299670" target="_blank"> [ 漏屋_天涯社区 ]</p>
]]></content>
      
        <categories>
            
            <category> 英语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于指针的那点事]]></title>
      <url>http://tech.noexception.cn/2016/09/10/%25E5%2585%25B3%25E4%25BA%258E%25E6%258C%2587%25E9%2592%2588%25E7%259A%2584%25E9%2582%25A3%25E7%2582%25B9%25E4%25BA%258B/</url>
      <content type="html"><![CDATA[<p align = "center">一篇有助于理解C指针的文章</p>
<a id="more"></a>
<h2 id="左值和右值"><a class="markdownIt-Anchor" href="#左值和右值"></a> 左值和右值</h2>
<ul>
<li>C++的表达式要不然是右值(rvalue，读作&quot;are-value&quot;)，要不然就是左值(lvalue，读作&quot;ell-valule&quot;)。这两个名次是从C语言继承过来的，原本就是为了帮助记忆的：左值可以位于赋值语句的左侧，右值不能。</li>
<li>在C++语言中，二者的区别就没有那么简单了。一个左值表达式的求值结果是一个对象或者一个函数，然而以常量对象为代表的某些左值实际上不能作为赋值语句的左侧运算对象。此外，虽然某些表达式的求值结果是对象，但它们是右值而非左值。<strong>可以做一个简单的归纳：当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。</strong></li>
<li>不同的运算符对运算对象的要求各有不同，有的需要左值运算对象、有的需要右值运算对象；返回值也有差异，有的得到左值结果、有的得到右值的结果。一个重要的原则是在需要右值的地方可以用左值来代替，但是不能把右值当成左值（也就是位置）使用。当一个左值被当成右值使用时，实际使用的是它的内容（值）。常见地，运算符要用到左值的有一下几个：
<ul>
<li>赋值运算符（*）需要一个（非常量）左值作为其左侧运算符对象，得到的结果也仍然是一个左值；</li>
<li>取地址符(&amp;)作用于一个左值元算对象，返回一个指向该运算对象的指针，这个指针是一个右值。</li>
<li>内置解析引用运算符、下标运算符、迭代器解析引用运算符、<code>string</code>和<code>vector</code>的下标运算符的求值结果都是左值。</li>
<li>内置类型和迭代器的递增递减运算符作用于左值运算对象，其前置版本所得的结果也是左值。</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 指针 </tag>
            
            <tag> 左值、右值 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Android程序崩溃的一些记录]]></title>
      <url>http://tech.noexception.cn/2016/08/22/%25E5%2585%25B3%25E4%25BA%258EAndroid%25E7%25A8%258B%25E5%25BA%258F%25E5%25B4%25A9%25E6%25BA%2583%25E7%259A%2584%25E4%25B8%2580%25E4%25BA%259B%25E8%25AE%25B0%25E5%25BD%2595/</url>
      <content type="html"><![CDATA[<p align = "center">Android应用崩溃的原因归纳</p>
<a id="more"></a>
<h3 id="android平台程序崩溃的类型及原因列举"><a class="markdownIt-Anchor" href="#android平台程序崩溃的类型及原因列举"></a> Android平台程序崩溃的类型及原因列举</h3>
<p>Android平台程序崩溃大家都应该遇到过，force close和ANR应该是大家遇到较多的。</p>
<p>这里把Android平台程序崩溃的各种类型做一个简述和原因列举。</p>
<ol>
<li>ANR（可见ANR）：</li>
</ol>
<ul>
<li>
<p>发生场景：应用发生ANR。</p>
</li>
<li>
<p>崩溃症状：系统弹出窗口询问用户选择“Force Close”或者“Wait”。</p>
</li>
<li>
<p>“Force Close”将杀掉发生ANR的应用进程。</p>
</li>
<li>
<p>“Wait”将会等待系统择机恢复此应用进程。</p>
</li>
<li>
<p>发生原因：（1）应用主线程卡住，对其他请求响应超时。（2）死锁。（3）系统反应迟钝。（4）CPU负载过重。</p>
</li>
</ul>
<ol start="2">
<li>Force Close：</li>
</ol>
<ul>
<li>
<p>发生场景：应用进程崩溃。</p>
</li>
<li>
<p>崩溃症状：系统弹出窗口提示用户某进程崩溃。</p>
</li>
<li>
<p>发生原因：空指向异常或者未捕捉的异常。</p>
</li>
</ul>
<ol start="3">
<li>Tombstones：</li>
</ol>
<ul>
<li>
<p>发生场景：Native层崩溃</p>
</li>
<li>
<p>崩溃症状：如果发生崩溃的native层和UI有关联（比如Browser），我们可以在UI上发现这个崩溃。</p>
</li>
<li>
<p>如果发生崩溃的native层是在后台并且和UI没有直接联系，那么对于用户来说是不可见的，如果是debug版本可能会有Log打印出当时的底层现场。</p>
</li>
<li>
<p>发生原因：各种各样，需要具体情况具体分析。</p>
</li>
</ul>
<ol start="4">
<li>系统服务崩溃（System Server Crash）：</li>
</ol>
<ul>
<li>
<p>发生场景：系统服务是Android核心进程，此服务进程发生崩溃。</p>
</li>
<li>
<p>崩溃症状：手机重启到Android启动界面</p>
</li>
<li>
<p>发生原因：（1）系统服务看门狗发现异常。（2）系统服务发生未捕获异常。（3）OOM。（4）系统服务Native发生Tombstone。</p>
</li>
</ul>
<ol start="5">
<li>Kernel Panics：</li>
</ol>
<ul>
<li>
<p>发生场景：Linux内核发生严重错误</p>
</li>
<li>
<p>崩溃症状：手机从bootloader开始完全重启</p>
</li>
<li>
<p>发生原因：（1）Linux内核内存空间发生内存崩溃。（2）内核看门狗发现异常。（3）空指针操作内核。</p>
</li>
</ul>
<p>转自：<a href="http://www.cnblogs.com/mobile-veterans" target="_blank" rel="noopener">http://www.cnblogs.com/mobile-veterans</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reports </tag>
            
            <tag> activity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SuperRecyclerView用法]]></title>
      <url>http://tech.noexception.cn/2016/08/22/SuperRecyclerView%25E7%2594%25A8%25E6%25B3%2595/</url>
      <content type="html"><![CDATA[<p align = "center">关于SuperRecyclerView的用法</p>
<a id="more"></a>
<h3 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介：</h3>
<ul>
<li><strong>SuperRecyclerView</strong>是支持addHeaderView、addFooterView、下拉刷新、分页加载数据的RecyclerView。</li>
<li><strong>它对RecyclerView控件进行了拓展，给RecyclerView增加HeaderView、FooterView，并且不需要对你的Adapter做任何修改。</strong></li>
</ul>
<h3 id="2-主要功能"><a class="markdownIt-Anchor" href="#2-主要功能"></a> 2. 主要功能</h3>
<ol>
<li>下拉刷新、滑动到底部自动加载下页数据；</li>
<li>可以方便添加Header和Footer；</li>
<li>头部下拉样式可以自定义；</li>
<li>具备item点击和长按事件。</li>
<li>网络错误加载加载失败点击Footer重新请求数据；</li>
<li>可以动态为FooterView赋予不同状态（加载中、加载失败、滑到最底等）。</li>
</ol>
<h3 id="3-使用"><a class="markdownIt-Anchor" href="#3-使用"></a> 3. 使用</h3>
<ol>
<li><strong>添加HeaderView、FooterView</strong></li>
</ol>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mDataAdapter = <span class="keyword">new</span> DataAdapter(<span class="keyword">this</span>);</span><br><span class="line">mDataAdapter.setData(dataList);</span><br><span class="line"></span><br><span class="line">mHeaderAndFooterRecyclerViewAdapter = <span class="keyword">new</span> HeaderAndFooterRecyclerViewAdapter(<span class="keyword">this</span>, mDataAdapter);</span><br><span class="line">mRecyclerView.setAdapter(mHeaderAndFooterRecyclerViewAdapter);</span><br><span class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//add a HeaderView</span></span><br><span class="line">RecyclerViewUtils.setHeaderView(mRecyclerView, <span class="keyword">new</span> SampleHeader(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//add a FooterView</span></span><br><span class="line">RecyclerViewUtils.setFooterView(mRecyclerView, <span class="keyword">new</span> SampleFooter(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="2">
<li><strong>添加滚动监听事件</strong></li>
</ol>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mRecyclerView.addOnScrolListener(mOnScrollListener);</span><br><span class="line"></span><br><span class="line">RecyclerOnScrollListener mOnScrollListener = <span class="keyword">new</span> RecyclerOnScrollListener()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBottom</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        LoadingFooter.State state = RecyclerViewUtils.getFooterViewState(mRecyclerView);</span><br><span class="line">        <span class="keyword">if</span>(state == LoadingFooter.State.Loading)&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"the state is Loading, just wait..."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mCurrentCounter &lt; TOTAL_COUNTER)&#123;</span><br><span class="line">            <span class="comment">//loading more</span></span><br><span class="line">            RecyclerViewStateUtils.setFooterViewState(EndlessLinearLayoutActivity.<span class="keyword">this</span>, mRecyclerView, REQUEST_COUNT, LoadingFooter.State.Loading, <span class="keyword">null</span>);</span><br><span class="line">            requestData();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//the end</span></span><br><span class="line">            RecyclerViewStateUtils.setFooterViewState(EndlessLinearLayoutActivity.<span class="keyword">this</span>, mRecyclerView, REQUEST_COUNT, LoadingFooter.State.TheEnd, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
**RecyclerOnScrollListener**实现了**onScrollUp()、onScrollDown()、onBottom()、onScrolled()**四个事件，如下所示：
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scroll down to up</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> abstrsct <span class="keyword">void</span> <span class="title">onScrollUp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//scroll from up to down</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> abstrsct <span class="keyword">void</span> <span class="title">onScrollDown</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//load next page</span></span><br><span class="line"><span class="function">publid abstrsct <span class="keyword">void</span> <span class="title">onBottom</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//moving state,you can get the move distance</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> abstrsct <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(<span class="keyword">int</span> distanceX, <span class="keyword">int</span> distenceY)</span></span>;</span><br></pre></td></tr></table></figure>
- **onScrollUp()**——RecyclerView向上滑动的监听事件；
- **onScrollDown()**——RecyclerView向下滑动的监听事件；
- **onBottom()**——RecyclerView滑动到底部的监听事件；
- **onBottom()**——RecyclerView正在滚动的监听事件；
</code></pre>
<ol start="3">
<li><strong>加载更多（加载下页数据）</strong></li>
</ol>
<pre><code>- 从上面的RecyclerOnScrollListener类的介绍中就可以看出，实现加载更多只要在**onBottom()**接口中处理即可。
</code></pre>
<hr />
<p>未完待续……</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> view </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS知识点整理]]></title>
      <url>http://tech.noexception.cn/2016/08/22/CSS%25E7%259F%25A5%25E8%25AF%2586%25E7%2582%25B9%25E6%2595%25B4%25E7%2590%2586/</url>
      <content type="html"><![CDATA[<p align = "center">CSS归纳</p>
<a id="more"></a>
<h3 id="1-对web标准以及w3c的理解与认知"><a class="markdownIt-Anchor" href="#1-对web标准以及w3c的理解与认知"></a> 1. 对WEB标准以及W3C的理解与认知</h3>
<ul>
<li>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率；</li>
<li>使用外链CSS和JS脚本、结构行为表现的分离、文件下载与页面速度更快；</li>
<li>内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件；</li>
<li>容易维护、改版方便，不需要变动页面内容；</li>
<li>提供打印版本而不需要复制内容、提高网站易用性；</li>
</ul>
<h3 id="2-xhtml和html有什么区别"><a class="markdownIt-Anchor" href="#2-xhtml和html有什么区别"></a> 2. xhtml和html有什么区别</h3>
<ul>
<li>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的标志语言；</li>
<li><strong>最主要的不同：</strong>
<ul>
<li>XHTML元素必须被正确的嵌套。</li>
<li>XHTML元素必须被关闭。</li>
<li>XHTML标签名必须用小写字母。</li>
<li>XHTML文档必须拥有根元素。</li>
</ul>
</li>
</ul>
<h3 id="3-doctype严格模式与混杂模式-如何触发这两种模式区分它们有何意义"><a class="markdownIt-Anchor" href="#3-doctype严格模式与混杂模式-如何触发这两种模式区分它们有何意义"></a> 3. Doctype?严格模式与混杂模式-如何触发这两种模式，区分它们有何意义？</h3>
<ul>
<li>用于声明文档使用那种规范(html\Xhtml)一般为：严格、过度、基于框架的html文档；</li>
<li>加入XML声明可触发，解析方式更改为IE5.5拥有IE5.5的bug；</li>
</ul>
<h3 id="4-行内元素有哪些块级元素有哪些css的盒模型"><a class="markdownIt-Anchor" href="#4-行内元素有哪些块级元素有哪些css的盒模型"></a> 4. 行内元素有哪些？块级元素有哪些？CSS的盒模型？</h3>
<ul>
<li>块级元素：<code>div p h1 h2 h3 h4 form ul</code></li>
<li>行内元素: <code>a b br i span input select</code></li>
<li>CSS盒模型：<code>内容, border, margin, padding</code></li>
</ul>
<h3 id="5-css引入的方式有哪些link和import的区别是"><a class="markdownIt-Anchor" href="#5-css引入的方式有哪些link和import的区别是"></a> 5. CSS引入的方式有哪些？link和@import的区别是？</h3>
<ul>
<li>**引入方式：**内联、内嵌、外链、导入</li>
<li><strong>link和@import区别：</strong>
<ul>
<li>同时加载；</li>
<li>前者无兼容，后者CSS2.1以下浏览器不支持；</li>
<li>Link支持使用javascript改变样式，后者不可；</li>
</ul>
</li>
</ul>
<h3 id="6-css选择符有哪些哪些属性可以继承优先级算法如何计算内联和important哪个优先级高"><a class="markdownIt-Anchor" href="#6-css选择符有哪些哪些属性可以继承优先级算法如何计算内联和important哪个优先级高"></a> 6. CSS选择符有哪些？哪些属性可以继承？优先级算法如何计算？内联和important哪个优先级高？</h3>
<ul>
<li>选择符：标签选择符、类选择符、id选择符；</li>
<li>继承不如指定id&gt;class&gt;标签选择</li>
<li>内联和important优先级哪个高：important优先级高</li>
</ul>
<h3 id="7-前端页面有哪三层构成分别是什么作用是什么"><a class="markdownIt-Anchor" href="#7-前端页面有哪三层构成分别是什么作用是什么"></a> 7. 前端页面有哪三层构成，分别是什么？作用是什么？</h3>
<ul>
<li>**结构层：**Html</li>
<li>**表示层：**CSS</li>
<li>**行为层：**js</li>
</ul>
<h3 id="8-css的基本语句构成是"><a class="markdownIt-Anchor" href="#8-css的基本语句构成是"></a> 8. CSS的基本语句构成是？</h3>
<ul>
<li>选择器{属性1:值1;属性2:值2;…}</li>
</ul>
<h3 id="9-你做的页面在那些浏览器测试过这些浏览器的内核分别是什么"><a class="markdownIt-Anchor" href="#9-你做的页面在那些浏览器测试过这些浏览器的内核分别是什么"></a> 9. 你做的页面在那些浏览器测试过？这些浏览器的内核分别是什么？</h3>
<ul>
<li>IE(IE内核)、火狐(Gecko)、谷歌(webkit)、opear(Presto)</li>
</ul>
<h3 id="10-写出几种ie6-bug的解决办法"><a class="markdownIt-Anchor" href="#10-写出几种ie6-bug的解决办法"></a> 10. 写出几种IE6 BUG的解决办法</h3>
<ul>
<li>双边距BUG：float引起的，使用display；</li>
<li>像素问题：使用float引起的，使用display:inline -3px;</li>
<li>超链接hover点击后失效：使用正确的书写顺序<code>linkvisited hover activen</code></li>
<li>IE z-index问题:给父级添加<code>position:relative</code></li>
<li>png透明：使用js代码改</li>
<li>min-height最小高度：important解决</li>
<li>select在IE6下遮盖：使用iframe嵌套；</li>
<li>为什么没有办法定义1px左右的宽度容器(IE6默认的行高造成的，使用<code>over:hidden,0.08line-height:1px</code>)</li>
</ul>
<h3 id="11-img标签title与alt属性的区别是什么"><a class="markdownIt-Anchor" href="#11-img标签title与alt属性的区别是什么"></a> 11. <img>标签title与alt属性的区别是什么？</h3>
<ul>
<li>Alt：当图片不显示是用文字代表。</li>
<li>Title：为该属性提供信息</li>
</ul>
<h3 id="12-描述css-reset的作用和用途"><a class="markdownIt-Anchor" href="#12-描述css-reset的作用和用途"></a> 12. 描述css reset的作用和用途。</h3>
<ul>
<li>css reset的作用：reset重置浏览器的css默认属性；</li>
<li>用途：浏览器的品种不同，样式不同，然后重置，让他们统一；</li>
</ul>
<h3 id="13-解释css-sprites如何使用"><a class="markdownIt-Anchor" href="#13-解释css-sprites如何使用"></a> 13. 解释css sprites，如何使用。</h3>
<ul>
<li>css sprites：把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量</li>
</ul>
<h3 id="14-浏览器标准模式和怪异模式之间的区别是什么"><a class="markdownIt-Anchor" href="#14-浏览器标准模式和怪异模式之间的区别是什么"></a> 14. 浏览器标准模式和怪异模式之间的区别是什么？</h3>
<ul>
<li>盒子模型 渲染模式的不同</li>
<li>使用window.top.document.compatMode 可显示为什么模型</li>
</ul>
<h3 id="15-你如何对网站的文件和资源进行优化期待的解决方案包括"><a class="markdownIt-Anchor" href="#15-你如何对网站的文件和资源进行优化期待的解决方案包括"></a> 15. 你如何对网站的文件和资源进行优化？期待的解决方案包括：</h3>
<ul>
<li>文件合并</li>
<li>文件最小化/文件压缩</li>
<li>使用CDN托管</li>
<li>缓存的使用</li>
</ul>
<h3 id="16-什么是语义化的html"><a class="markdownIt-Anchor" href="#16-什么是语义化的html"></a> 16. 什么是语义化的HTML?</h3>
<ul>
<li>直观的认识标签，对于搜索引擎的抓取有好处</li>
</ul>
<h3 id="17-清除浮动的几种方式各自的优缺点"><a class="markdownIt-Anchor" href="#17-清除浮动的几种方式各自的优缺点"></a> 17. 清除浮动的几种方式，各自的优缺点</h3>
<ul>
<li>使用空标签清除浮动clear:both(理论上能清除任何标签，，，增加无意义的标签)</li>
<li>使用<code>overflow:auto</code>(空标签元素清除浮动而不得不增加无意代码的弊端，使用zoom:1用于兼容IE)</li>
<li>使用afert伪元素清除浮动（用于非IE浏览器）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reports </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用SSH实现无密码自动登陆]]></title>
      <url>http://tech.noexception.cn/2016/08/22/%25E7%2594%25A8SSH%25E5%25AE%259E%25E7%258E%25B0%25E6%2597%25A0%25E5%25AF%2586%25E7%25A0%2581%25E8%2587%25AA%25E5%258A%25A8%25E7%2599%25BB%25E9%2599%2586/</url>
      <content type="html"><![CDATA[<p align = "center">SSH的公钥私钥问题</p>
<a id="more"></a>
<h2 id="用ssh实现无密码自动登陆"><a class="markdownIt-Anchor" href="#用ssh实现无密码自动登陆"></a> 用SSH实现无密码自动登陆</h2>
<ul>
<li>        SSH广泛用于脚本自动化，它使得我们可以在远程主机上执行命令并读取输出。SSH通常使用用户名和密码进行认证，在其执行过程中会提示输入密码。但是在自动化脚本中要求用户输入密码就显得不实际了。因此需要将登录过程自动化。SSH包含了一个内建特性，可以用SSH密钥实现自动登录。</li>
</ul>
<h4 id="1-预备知识"><a class="markdownIt-Anchor" href="#1-预备知识"></a> 1. 预备知识：</h4>
<p>        SSH采用非对称加密技术，认证密钥包含两部分：一个公钥和一个私钥。我们可以通过<code>ssh-keygen</code> 命令创建认证密钥。想要实现自动化认证，公钥必须放置在服务器中（将其加入文件<code>~/.ssh/authorized_keys</code>），与公钥对应的私钥应该放入登录客户机的<code>~/.ssh</code> 目录中。另一些与SSH相关的配置信息（例如，arthorized_keys文件的路径与名称）可以通过修改文件/etc/ssh/sshd_config进行配置。</p>
<h4 id="2-实战演练"><a class="markdownIt-Anchor" href="#2-实战演练"></a> 2. 实战演练：</h4>
<p>        设置SSH自动化认证需要两步：<br />
                1. 创建SSH密钥，这里用于登录远程主机；<br />
                2. 将生成的公钥传给远程主机，并将其加入文件<code>~/.ssh/authorized_keys</code> 中。<br />
        输入命令<code>ssh-keygen</code> 创建SSH密钥，并指定加密算法类型为RSA：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;home&#x2F;HELEN&#x2F;.ssh&#x2F;id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in &#x2F;home&#x2F;HELEN&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;home&#x2F;HELEN&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:NKlL1KFVD867uAwLIAd01ujibgrwx18Q45FrFlOCV4Q HELEN@Lucifer</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| . oo..+*.o      |</span><br><span class="line">|. o...EB &#x3D; o     |</span><br><span class="line">|. .  .X &#x3D; o .    |</span><br><span class="line">| o . o X . .     |</span><br><span class="line">|+ +   O S .      |</span><br><span class="line">|.&#x3D; o + o . .     |</span><br><span class="line">|o . + o o .      |</span><br><span class="line">|.o . o &#x3D; .       |</span><br><span class="line">|+     o o        |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>
<ul>
<li>你需要输入一个口令来生成一对公钥和私钥。如果不输入的话，也可以生成密钥，但是这样做可不安全。我们可以编写监控脚本，利用自动登陆来登入多台主机。对于这种情况，在运行<code>ssh-keygen</code> 命令时，不要填入口令，这样就能够避免在脚本运行时向你索要口令了。</li>
<li>现在<code>~/.ssh/id_rsa.pub</code>和<code>~/.ssh/id_rsa</code> 已经生成了。<strong><code>id_rsa.pub</code>是生成的公钥</strong>，**<code>i_rsa</code>是生成的私钥。**公钥必须添加到远程服务器<code>~/.ssh/authorized_keys</code> 文件中，这台服务器也正是我们想从当前主机自动登入的那台服务器。</li>
<li><strong>多数Linux发布版中有一个叫做 <code>ssh-copy-di</code> 的工具，它可以自动将公钥加入远程服务器的authorized_keys文件中。用法如下：<code>ssh-copy-id USER@REMOTE_HOST</code></strong></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[滑动菜单]]></title>
      <url>http://tech.noexception.cn/2016/08/22/%25E6%25BB%2591%25E5%258A%25A8%25E8%258F%259C%25E5%258D%2595/</url>
      <content type="html"><![CDATA[<p align = "center">介绍滑动菜单的用法</p>
<a id="more"></a>
<h3 id="预备"><a class="markdownIt-Anchor" href="#预备"></a> 预备：</h3>
<ul>
<li>support v4包，继承自ViewGroup</li>
</ul>
<h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例：</h2>
<h3 id="样式一"><a class="markdownIt-Anchor" href="#样式一"></a> 样式一：</h3>
<ul>
<li>示例布局</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;android.support.v4.widget.SlidingPaneLayout</span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:id=<span class="string">"@+id/SlidingPane"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match"</span></span><br><span class="line">    android:background=<span class="string">"#D32F2F"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=<span class="string">"@+id/ll_menu"</span></span><br><span class="line">        android:gravity=<span class="string">"center"</span></span><br><span class="line">        android:layout_width=<span class="string">"200dp"</span></span><br><span class="line">        android:background=<span class="string">"#d32f2f"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:text=<span class="string">"Menu"</span></span><br><span class="line">            android:textSize=<span class="string">"25sp"</span></span><br><span class="line">            android:textColor=<span class="string">"#ffffff"</span></span><br><span class="line">            android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">            android:layout_height=<span class="string">"wrap_content"</span> /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=<span class="string">"@+id/ll_main"</span></span><br><span class="line">        android:background=<span class="string">"#ffffff"</span></span><br><span class="line">        android:orientation=<span class="string">"vertical"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.v7.widget.Toolbar</span><br><span class="line">            android:id=<span class="string">"@+id/toolbar"</span></span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">            android:background=<span class="string">"@color/colorPrimary"</span></span><br><span class="line">            app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span><br><span class="line">            app:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>/&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.v4.widget.SlidingPaneLayout&gt;</span><br></pre></td></tr></table></figure>
<h3 id="slidingpanelayout-一些主要的方法"><a class="markdownIt-Anchor" href="#slidingpanelayout-一些主要的方法"></a> SlidingPaneLayout 一些主要的方法：</h3>
<ul>
<li><code>setParallaxDistance(int parallaxBy)</code>设置滑动视差</li>
<li><code>setCoveredFadeColor(int color)</code>导航菜单视图的滑动颜色渐变</li>
<li><code>setSliderFadeColor(int color)</code>主视图的滑动颜色渐变</li>
<li><code>setPanelSlideListener(SlidingPanelLayou.PanelSlideListener listener)</code>滑动监听</li>
<li><code>openPanel()</code>打开导航菜单</li>
<li><code>closePanel()</code>关闭导航菜单</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingPanelLayoutActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> SlidingPaneLayout mSlidingPane;</span><br><span class="line">  <span class="keyword">private</span> LinearLayout ll_menu,ll_main;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.first_layout);</span><br><span class="line">      mSlidingPane=(SlidingPaneLayout)findViewById(R.id.SlidingPane);</span><br><span class="line">      ll_main=(LinearLayout) findViewById(R.id.ll_main);</span><br><span class="line">      ll_menu=(LinearLayout) findViewById(R.id.ll_menu);</span><br><span class="line">      setSupportActionBar((Toolbar)findViewById(R.id.toolbar));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//设置滑动视差    可选</span></span><br><span class="line">      mSlidingPane.setParallaxDistance(<span class="number">200</span>);</span><br><span class="line">      <span class="comment">//菜单滑动的颜色渐变设置   可选</span></span><br><span class="line"><span class="comment">//        mSlidingPane.setCoveredFadeColor(getResources().getColor(R.color.colorAccent));</span></span><br><span class="line">      <span class="comment">//主视图滑动的颜色渐变设置  可选</span></span><br><span class="line">      mSlidingPane.setSliderFadeColor(<span class="number">0</span>);</span><br><span class="line">      <span class="comment">//滑动监听  可选</span></span><br><span class="line">      mSlidingPane.setPanelSlideListener(<span class="keyword">new</span> SlidingPaneLayout.PanelSlideListener()&#123;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * Called when a sliding pane's position changes.</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> panel       The child view that was moved</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> slideOffset The new offset of this sliding pane within its range, from 0-1</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPanelSlide</span><span class="params">(View panel, <span class="keyword">float</span> slideOffset)</span> </span>&#123;</span><br><span class="line">              Log.d(<span class="string">"mylog"</span>, <span class="string">"slide---"</span>+slideOffset);</span><br><span class="line">              <span class="comment">//slideOffset这个参数是跟随滑动0-1变化的</span></span><br><span class="line">              <span class="comment">//通过这个竖直变化我们可以做出一些不一样的滑动效果</span></span><br><span class="line"><span class="comment">//                ll_menu.setScaleY(slideOffset/2+0.5F);</span></span><br><span class="line"><span class="comment">//                ll_menu.setScaleX(slideOffset/2+0.5F);</span></span><br><span class="line"><span class="comment">//                ll_main.setScaleY(1-slideOffset/5);</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * Called when a sliding pane becomes slid completely open. The pane may or may not</span></span><br><span class="line"><span class="comment">           * be interactive at this point depending on how much of the pane is visible.</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> panel The child view that was slid to an open position, revealing other panes</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPanelOpened</span><span class="params">(View panel)</span> </span>&#123;</span><br><span class="line">              Log.d(<span class="string">"mylog"</span>,<span class="string">"slide---open"</span>);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * Called when a sliding pane becomes slid completely closed. The pane is now guaranteed</span></span><br><span class="line"><span class="comment">           * to be interactive. It may now obscure other views in the layout.</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> panel The child view that was slid to a closed position</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPanelClosed</span><span class="params">(View panel)</span> </span>&#123;</span><br><span class="line">              Log.d(<span class="string">"mylog"</span>,<span class="string">"slide---close"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这样就做出了互动导航的效果</li>
<li>注意：<strong>在滑动监听中的这个方法里，根据<code>slideOffset</code>参数0~1的变化可以去改变视图大小就会做出更多种类的效果，这里我们设置滑动过程中改变主视图的大小，代码如下：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPanelSlide</span><span class="params">(View panel, <span class="keyword">float</span> slideOffset)</span></span>&#123;</span><br><span class="line">    <span class="comment">//slideOffset这个参数是跟随滑动0~1变化的</span></span><br><span class="line">    <span class="comment">//通过这个数值变化我们可以做出一些不一样的滑动效果</span></span><br><span class="line">    ll_menu.setScaleY(slideOffset/<span class="number">2</span>+<span class="number">0.5F</span>);</span><br><span class="line">    ll_menu.setScaleX(slideOffset<span class="number">.2</span>+<span class="number">0.5F</span>);</span><br><span class="line">    ll_main.setScaleY(<span class="number">1</span>-slideOffset/<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="样式二"><a class="markdownIt-Anchor" href="#样式二"></a> 样式二：</h3>
<ul>
<li>快速实现这个效果需要利用V4包的DrawerLayout这个布局容器，可见V4包下面有多少好东西，另外其实<strong>SlidingPaneLayout</strong>和<strong>DrawerLayout</strong>都是利用V4的<strong>ViewDragHelper</strong>去实现的，这是一个帮助类，这里就不多介绍了，对它感兴趣的可以深入了解下。</li>
<li>示例布局：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.Toolbar</span><br><span class="line">        android:id=<span class="string">"@+id/toolbar2"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">        android:background=<span class="string">"@color/colorPrimary"</span></span><br><span class="line">        app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span><br><span class="line">        app:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.widget.DrawerLayout</span><br><span class="line">        android:id=<span class="string">"@+id/dl_left"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:background=<span class="string">"#ffffff"</span></span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--drawer layout--&gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=<span class="string">"200dp"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            android:background=<span class="string">"#d32f2f"</span></span><br><span class="line">            android:layout_gravity=<span class="string">"start"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">                android:text=<span class="string">"Menu"</span></span><br><span class="line">                android:textSize=<span class="string">"25sp"</span></span><br><span class="line">                android:gravity=<span class="string">"center"</span></span><br><span class="line">                android:textColor=<span class="string">"#ffffff"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.v4.widget.DrawerLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>需要注意的是主视图的布局代码要放在侧滑菜单布局的前面，侧滑菜单布局的代码中<code>android:layout_gravity=&quot;start&quot;</code>从左侧滑动，反之end右侧滑动</li>
</ul>
<h3 id="drawerlayout的一些主要方法"><a class="markdownIt-Anchor" href="#drawerlayout的一些主要方法"></a> DrawerLayout的一些主要方法：</h3>
<ul>
<li><code>addDrawerListener(DrawerLayout.DrawerListener listener)</code>添加滑动监听</li>
<li><code>openDrawer(int gravity)</code>开启导航菜单参数：<code>GravityCompat.START GravityCompat.END</code>要跟XML设置相同</li>
<li><code>closeDrawer(int gravity)</code>关闭导航菜单</li>
<li><code>isDrawerOpen(int drawerGravity)</code>菜单是否开启</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerLayoutActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DrawerLayout drawerLayout;</span><br><span class="line">    <span class="keyword">private</span> Toolbar toolbar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.second_layout);</span><br><span class="line">        setSupportActionBar(toolbar = (Toolbar) findViewById(R.id.toolbar2));</span><br><span class="line">        drawerLayout = (DrawerLayout)findViewById(R.id.dl_left);</span><br><span class="line">        <span class="comment">//ActionBarDrawerToggle是DrawerLayout.DrawerListener的实现</span></span><br><span class="line">        <span class="comment">//可以方便的将drawlayout和actionbar结合起来</span></span><br><span class="line">        ActionBarDrawerToggle actionBarDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>,drawerLayout, toolbar, R.string.open, R.string.close)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * &#123;<span class="doctag">@link</span> DrawerLayout.DrawerListener&#125; callback method. If you do not use your</span></span><br><span class="line"><span class="comment">             * ActionBarDrawerToggle instance directly as your DrawerLayout's listener, you should call</span></span><br><span class="line"><span class="comment">             * through to this method from your own listener object.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> drawerView Drawer view that is now open</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerOpened</span><span class="params">(View drawerView)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onDrawerOpened(drawerView);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * &#123;<span class="doctag">@link</span> DrawerLayout.DrawerListener&#125; callback method. If you do not use your</span></span><br><span class="line"><span class="comment">             * ActionBarDrawerToggle instance directly as your DrawerLayout's listener, you should call</span></span><br><span class="line"><span class="comment">             * through to this method from your own listener object.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> drawerView Drawer view that is now closed</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerClosed</span><span class="params">(View drawerView)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onDrawerClosed(drawerView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        actionBarDrawerToggle.syncState();</span><br><span class="line">        drawerLayout.addDrawerListener(actionBarDrawerToggle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>DrawerLayout</strong>跟<strong>ActionBarDrawerToggle</strong>配合快速就可以快速构建出具有动画交互的滑动导航菜单效果，是不是很简单。</li>
</ul>
<h2 id="当下的设计标准"><a class="markdownIt-Anchor" href="#当下的设计标准"></a> 当下的设计标准</h2>
<ul>
<li>接下来总结“当下”如何按照Android的设计标准去滑动导航菜单，我为什么说的“当下”呢？因为这个设计标准是会变的。
<ul>
<li>滑动导航菜单需要在Actionbar(Toolbar)下面，这在Android 4.X时代是比较常见的设计，也是当时Android Design标准设计。<br />
###实现步骤：</li>
</ul>
</li>
<li>因为<code>NavigationView</code>在Design库中，需要添加依赖：<code>compile 'com.android.support:design:24.0.0'</code></li>
<li>在DrawLayout 中添加 NavigationView:</li>
<li>布局：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.widget.DrawerLayout</span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:id=<span class="string">"@+id/drawerlayout"</span></span><br><span class="line">    android:fitsSystemWindows=<span class="string">"true"</span>&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=<span class="string">"@+id/ll_main"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        android:orientation=<span class="string">"vertical"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.v7.widget.Toolbar</span><br><span class="line">            android:id=<span class="string">"@+id/toolbar"</span></span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">            android:background=<span class="string">"@color/colorPrimary"</span></span><br><span class="line">            app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span><br><span class="line">            app:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.NavigationView</span><br><span class="line">        android:id=<span class="string">"@+id/navigationView"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_gravity=<span class="string">"start"</span></span><br><span class="line">        app:headerLayout=<span class="string">"@layout/nv_header"</span></span><br><span class="line">        app:menu=<span class="string">"@menu/main_drawer"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.v4.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>因为属于DrawLayout的导航菜单布局，所以NavigationView要加上<code>android:layout_gravity=&quot;start&quot;</code>代表从左面滑动，反之是&quot;end&quot;。</li>
<li>其中<code>app:headerLayout=&quot;@layout/nv_header&quot;</code>需要传入一个导航菜单的头部布局，它的作用如图绿框部分。。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头部布局代码</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"180dp"</span></span><br><span class="line">    android:background=<span class="string">"@drawable/background_material"</span></span><br><span class="line">    android:gravity=<span class="string">"bottom"</span></span><br><span class="line">    android:padding=<span class="string">"16dp"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_marginTop=<span class="string">"8dp"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"0dp"</span></span><br><span class="line">        android:layout_weight=<span class="string">"1"</span></span><br><span class="line">        android:gravity=<span class="string">"center_vertical"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=<span class="string">"@+id/profile_image"</span></span><br><span class="line">            android:layout_width=<span class="string">"76dp"</span></span><br><span class="line">            android:layout_height=<span class="string">"76dp"</span></span><br><span class="line">            android:background=<span class="string">"@drawable/z"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:text=<span class="string">"xlucifer"</span></span><br><span class="line">        android:textSize=<span class="string">"14sp"</span></span><br><span class="line">        android:textColor=<span class="string">"#fff"</span></span><br><span class="line">        android:textStyle=<span class="string">"bold"</span></span><br><span class="line">        android:paddingBottom=<span class="string">"4dp"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:text=<span class="string">"1234567890"</span></span><br><span class="line">        android:textSize=<span class="string">"14sp"</span></span><br><span class="line">        android:textColor=<span class="string">"#fff"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>app:menu=&quot;@menu/main_drawer&quot;</code>用于设置导航菜单中的菜单部分。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;menu xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">&lt;group&gt;</span><br><span class="line">    &lt;item android:id=<span class="string">"@+id/navigation_item1"</span></span><br><span class="line">        android:checkable=<span class="string">"true"</span></span><br><span class="line">        android:title=<span class="string">"First"</span></span><br><span class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br><span class="line">    &lt;item android:id=<span class="string">"@+id/navigation_item2"</span></span><br><span class="line">        android:checkable=<span class="string">"true"</span></span><br><span class="line">        android:title=<span class="string">"Second"</span></span><br><span class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br><span class="line">    &lt;item android:id=<span class="string">"@+id/navigation_item3"</span></span><br><span class="line">        android:checkable=<span class="string">"true"</span></span><br><span class="line">        android:title=<span class="string">"Third"</span></span><br><span class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br><span class="line">    &lt;item android:id=<span class="string">"@+id/navigation_item4"</span></span><br><span class="line">        android:checkable=<span class="string">"true"</span></span><br><span class="line">        android:title=<span class="string">"Fourth"</span></span><br><span class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item android:id=<span class="string">"@+id/navigation_sub"</span></span><br><span class="line">        android:title=<span class="string">"其他"</span>&gt;</span><br><span class="line">        &lt;menu&gt;</span><br><span class="line">            &lt;item android:id=<span class="string">"@+id/navigation_sub_item1"</span></span><br><span class="line">                android:checkable=<span class="string">"true"</span></span><br><span class="line">                android:title=<span class="string">"Fifth"</span></span><br><span class="line">                android:icon=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br><span class="line">            &lt;item android:id=<span class="string">"@+id/navigation_sub_item2"</span></span><br><span class="line">                android:checkable=<span class="string">"true"</span></span><br><span class="line">                android:title=<span class="string">"Sixth"</span></span><br><span class="line">                android:icon=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br><span class="line">            &lt;item android:id=<span class="string">"@+id/navigation_sub_item3"</span></span><br><span class="line">                android:checkable=<span class="string">"true"</span></span><br><span class="line">                android:title=<span class="string">"Seventh"</span></span><br><span class="line">                android:icon=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br><span class="line">        &lt;/menu&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">&lt;/group&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后是java中代码实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavigationViewActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DrawerLayout drawerLayout;</span><br><span class="line">    <span class="keyword">private</span> Toolbar toolbar;</span><br><span class="line">    <span class="keyword">private</span> NavigationView navigationView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.drawlayout_activity);</span><br><span class="line">        <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.KITKAT)&#123;</span><br><span class="line">            <span class="comment">//透明状态栏</span></span><br><span class="line">            getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">        &#125;</span><br><span class="line">        setSupportActionBar(toolbar=(Toolbar)findViewById(R.id.toolbar));</span><br><span class="line">        drawerLayout=(DrawerLayout)findViewById(R.id.drawerlayout);</span><br><span class="line">        navigationView=(NavigationView)findViewById(R.id.navigationView);</span><br><span class="line"></span><br><span class="line">        ActionBarDrawerToggle actionBarDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, drawerLayout, toolbar, R.string.open, R.string.close);</span><br><span class="line">        actionBarDrawerToggle.syncState();</span><br><span class="line">        drawerLayout.addDrawerListener(actionBarDrawerToggle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//navigationView menu点击监听</span></span><br><span class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">                selectDrawerItem(menuItem);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectDrawerItem</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (menuItem.getItemId())&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Toast.makeText(NavigationViewActivity.<span class="keyword">this</span>, <span class="string">"menu click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        menuItem.setChecked(<span class="keyword">true</span>);</span><br><span class="line">        drawerLayout.closeDrawers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其中下面代码和布局代码中的<code>android:fitsSystemWindows=&quot;true&quot;</code>起到一个半透明状态栏的作用，半透明状态栏效果有各种实现方式，google也没能给一个好的实现方式，后续可能会考虑写一个全面的了解透明状态效果的文章</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.KITKAT)&#123;</span><br><span class="line">    <span class="comment">//透明状态栏</span></span><br><span class="line">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> view </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio NDK的配置]]></title>
      <url>http://tech.noexception.cn/2016/08/22/First/</url>
      <content type="html"><![CDATA[<p align = "center">环境的配置以及HelloWorld例程</p>
<a id="more"></a>
<ol>
<li>新建Project，此处工程是最简单的一个MainActivity和一个layout文件，在工程里声明native方法。<code>public static native String Hello();</code></li>
<li>编译h头文件</li>
<li><code>View-&gt;Tool Windows-&gt;Terminal</code>，进入工程目录。 <code>cd app/src/main/java</code><br />
2. 编译头文件<code>javah -classpath D:/Android-ProjectsSetUp/MyNDK/app/src/main/java -d jni 包名.MainActivty</code> <code>-classpath:类所在目录 -d:输出目录 jni+包名+类名</code></li>
<li>编写C文件</li>
<li>新建JNI文件夹</li>
<li>实现头文件里的函数</li>
</ol>
<pre><code>- **将刚才的头文件复制到这个新的jni文件夹中**
- 新建一个C源文件，实现代码（注：当时运行程序出了问题，不知道是我Rebulid还是真的是嫁了一个空的C源文件解决的问题。因为网上说要加一个在Jni文件夹中加一个空的源文件才能通过编译，如果你也出现了问题，加一个试试看能不能解决）
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_example_helen_ndkproject_MainActivity.h"</span></span></span><br><span class="line"><span class="function">jstring <span class="title">Java_com_example_helen_ndkproject_MainActivity_sayHello</span><span class="params">(JNIEnv *env, jobject thiz)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"Hello from JNI !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="4">
<li>配置一些信息</li>
</ol>
<ul>
<li>在local.properties文件中设置ndk路径</li>
<li>在bulid.gradle的android节点下加入<code>ndk{ moduleName &quot;MyJni&quot;//这是module的名字 }</code></li>
<li>在gradle.properties下面增加一句话：<code>android.useDeprecatedNdk=true</code></li>
<li>在MainActivty里说明调用这个NDK<code>static { System.loadLibrary(&quot;MyJni&quot;);}</code></li>
</ul>
<ol start="5">
<li>然后就可以运行MainActivty了</li>
</ol>
<ul>
<li>另外篇：
<ul>
<li>分平台配置编译（可选）
<ul>
<li>这一步不是必须的，你可以根据需要，对各个平台进行不同的编译配置，可以设置覆盖前面的编译选项（例如cFlags）。<a href="http://xn--6qqwdo6mya142e7kd2zgi0f2qfs72doytn38a.so" target="_blank" rel="noopener">例如你只想编译指定平台的.so</a>，而不是所有的平台。如下</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">android &#123;  &#x2F;&#x2F; .. android settings ..</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        x86 &#123;</span><br><span class="line">             ndk &#123;</span><br><span class="line">                 abiFilter &quot;x86&quot;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         arm &#123;</span><br><span class="line">             ndk &#123;</span><br><span class="line">                 abiFilter &quot;armeabi-v7a&quot;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         mips &#123;</span><br><span class="line">             ndk &#123;</span><br><span class="line">                 abiFilter &quot;mips&quot;</span><br><span class="line">             &#125;        </span><br><span class="line">         &#125;    </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; &#x2F;&#x2F; android</span><br></pre></td></tr></table></figure>
<ul>
<li>其他篇：
<ul>
<li>默认情况下，你需要把C/C++源代码放在[module]/src/main/jni/路径下，</li>
<li>当然，你也可以自定义源代码路径：</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;  <span class="comment">// .. android settings ..</span></span><br><span class="line">    sourceSets.main &#123;</span><br><span class="line">        jni.srcDirs 'src/main/source'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
